# -*- coding: utf-8 -*-
# *** Spyder Python Console History Log ***

## ---(Thu Feb 22 11:39:07 2018)---
sin(2)
2+3
alph = 'abcdefg'
alph[:2]
alph[2:]
10//2
10/2
100//24
100/24
import matplotlib.pyplot*
import matplotlib.pyplot
import matplotlib.pyplot as mpl
runfile('/home/kalashnikov/.config/spyder-py3/temp.py', wdir='/home/kalashnikov/.config/spyder-py3')
fib(2000)
range(0,10)
list[0:10:2]
range(0:10:2)
range(0,10,2)
range(5, 10)
list(range(0,10,2))
mpl.plot(fib(2000),range(0,len(fib(2000))))
len(fib(2000))
mpl.plot(fib(2000),range(0,len(fib(2000)+1)))
mpl.plot(fib(2000),range(0,len(fib(2000)+'1')))
mpl.plot(fib(2000),range(0,len(fib(2000)+[1])))
mpl.plot(fib(2000),)
mpl.plot(fib(2000))
mpl.plot(fib(10000))
mpl.plot(fib(1000000))
mpl.plot(fib(1000000000))
import numpy as np
np.arange?
np.lispace?
np.linspace?
n = np.arange(0,1,0.1)
n
n[0]
n[3]
3[5]
n[5]
n[2]
n[7]
np.diff?
n
n1=np.diff(n)
n1
1/n1
runfile('/home/kalashnikov/.config/spyder-py3/temp.py', wdir='/home/kalashnikov/.config/spyder-py3')
tonicNeuron(1000,1)
tonicNeuron(10,1)
tonicNeuron(10,2)
tonicNeuron(100,1)
tonicNeuron(100,2)
tonicNeuron(100,3)
tonicNeuron(100,10)
tonicNeuron(100,0.1)
tonicNeuron(100,0.5)
tonicNeuron(100,0.3)
tonicNeuron(100,0.4)
tonicNeuron(100,0.1)
tonicNeuron(100,0.01)
tonicNeuron(100,10)
print(tonicNeuron(100,10))
runfile('/home/kalashnikov/.config/spyder-py3/temp.py', wdir='/home/kalashnikov/.config/spyder-py3')
tonicNeuron(100,10)
tonicNeuron(100,1)
tonicNeuron(10,0.1)
runfile('/home/kalashnikov/.config/spyder-py3/temp.py', wdir='/home/kalashnikov/.config/spyder-py3')
tonicNeuron(10,0.1)
runfile('/home/kalashnikov/.config/spyder-py3/temp.py', wdir='/home/kalashnikov/.config/spyder-py3')
a = tonicNeuron(10,0.1)
a[10]
a[11]
a[200]
a[20]
a = tonicNeuron(10,0.01)
a
a[0]
a[1]
a[12]
a[10]
round?
round(10,3452,2)
round(10.3452,2)
runfile('/home/kalashnikov/.config/spyder-py3/temp.py', wdir='/home/kalashnikov/.config/spyder-py3')
a = tonicNeuron(10,0.1)
runfile('/home/kalashnikov/.config/spyder-py3/temp.py', wdir='/home/kalashnikov/.config/spyder-py3')
a = tonicNeuron(10,0.1)
a = tonicNeuron(10,0.01)
a = tonicNeuron(10,0.001)
a = tonicNeuron(10,0.0001)
a = tonicNeuron(2,0.00001)
import numpy.random as npr
npr.random(1)
npr.random(10)
npr.random?
npr.random(3)
npr.random(3)*5
npr.random(3)*10-5
npr.random(100)*10-5
runfile('/home/kalashnikov/.config/spyder-py3/temp.py', wdir='/home/kalashnikov/.config/spyder-py3')
UniformNeuron(3)
runfile('/home/kalashnikov/.config/spyder-py3/temp.py', wdir='/home/kalashnikov/.config/spyder-py3')
UniformNeuron(3)
runfile('/home/kalashnikov/.config/spyder-py3/temp.py', wdir='/home/kalashnikov/.config/spyder-py3')
UniformNeuron(100)
runfile('/home/kalashnikov/.config/spyder-py3/temp.py', wdir='/home/kalashnikov/.config/spyder-py3')
UniformNeuron(100)
UniformNeuron(1000)
UniformNeuron(100,2)
UniformNeuron(100,3)
UniformNeuron(100,2)
UniformNeuron(100,4)
UniformNeuron(100,1)
UniformNeuron(100,0.1)
UniformNeuron(100,1)
UniformNeuron(100,10)
UniformNeuron(100,10,0.1)
UniformNeuron(100,10,0.2)
UniformNeuron(100,1,0.2)
UniformNeuron(100,0.1,0.2)
runfile('/home/kalashnikov/.config/spyder-py3/temp.py', wdir='/home/kalashnikov/.config/spyder-py3')
UniformNeuron(100,0.1,0.2)
UniformNeuron(1000,0.1,0.2)
UniformNeuron(1000,0.1)
UniformNeuron(1000,0.2)
UniformNeuron(1000,0.3)
UniformNeuron(1000,10)
UniformNeuron(1000,0.01)
UniformNeuron(1000,1,0.01)
UniformNeuron(1000,1,0.02)
UniformNeuron(1000,1,0.03)
UniformNeuron(1000,1,0.1)
UniformNeuron(1000,1,0.01)
UniformNeuron(1000,1,0.2)
UniformNeuron(1000,1,0.3)
UniformNeuron(1000,1,0.5)
UniformNeuron(1000,1,1)
UniformNeuron(1000,1,2)
UniformNeuron(1000,1,3)
UniformNeuron(1000,1,10)
UniformNeuron(10000,1,10)
UniformNeuron(10000,1,`)
UniformNeuron(10000,1,1)
UniformNeuron(10000,1,0.1)
UniformNeuron(10000,1,0.01)
tonicNeuron(100)
tonicNeuron(100,1)
tonicNeuron(100,2)
tonicNeuron(100,10)
runfile('/home/kalashnikov/.config/spyder-py3/temp.py', wdir='/home/kalashnikov/.config/spyder-py3')
tonicNeuron(100,10)
tonicNeuron(100,1)
tonicNeuron(10,1)
tonicNeuron(10,2)
tonicNeuron(10,0.1)
tonicNeuron(10,0.2)
tonicNeuron(10,0.3)
npr.poisson(1)
npr.poisson(2)
npr.poisson?
npr.poisson(0)
npr.poisson(1)
npr.poisson(2)
npr.poisson(2, 100)
plt.plot(npr.poisson(1,100))
plt.plot(npr.poisson(2,100))
plt.plot(npr.poisson(5,100))
plt.plot(npr.poisson(100,100))
plt.plot(npr.poisson(1000,100))
plt.plot(npr.poisson(1000,1000))
plt.plot(npr.poisson(100,1000))
plt.plot(npr.poisson(10,1000))
plt.plot(npr.poisson(1,1000))
plt.plot(npr.poisson(2,1000))
plt.plot(npr.poisson(1000,1000))
plt.plot(npr.poisson(10000,1000))
plt.plot(npr.poisson(10000,10000))
plt.plot(npr.poisson(10000,10000), '.')
plt.plot(npr.poisson(1000,1000), '.')
npr.poisson(2, 100)
plt.hist(npr.poisson(2,100)))
plt.hist(npr.poisson(2,100)),1)
a=npr.poisson(2, 100)
plt.hist(a)
a=npr.poisson(2, 1000)
a
plt.hist(a)
a=npr.poisson(100, 1000)
a
plt.hist(a)
a=npr.poisson(1, 1000)
plt.hist(a)
a=npr.poisson(100, 1000)
plt.hist(a,bin=100)
plt.hist(a,bins=100)
plt.hist(a,bins=30)
plt.hist(a,bins=35)
plt.hist(a,bins=40)
plt.hist(a,bins=100)
plt.hist(a,bins=1000)
plt.hist(a,bins=200)
a=npr.poisson(1, 10000)
a=npr.poisson(2, 10000)
plt.hist(a,bins=200)
plt.hist(a,bins=100)

## ---(Thu Mar 15 17:35:35 2018)---
pylab?
scipy?
import scipy as sp
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
help ("modules")

## ---(Thu Mar 15 17:56:24 2018)---
scipy?
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
help ("modules")
import scipy.integrate as spi
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
clear all
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
spi.odeint?
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
scipy?
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
t=np.linspace(0,20)
t
t=np.linspace(0,20,1)
t
t=np.linspace(0,1.20)
t=np.linspace(0,1,20)
t
t=np.linspace(0,20)
t[1]
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
np.sqrt(4)
np.sqrt(10)
x^2
x**2
2^2
2^22
2**2
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
def model2 (x,y,t, A,alpha,omega,twist):
    dxdt = x*alpha*(A-np.sqrt(x**2 + y**2))-y*(omega + twist*(A-np.sqrt(x**2 + y**2)))
    dydt = y*alpha*(A-r)+x*(omega + twist*(A-r))
    dzdt=[dxdt, dydt]
    return dzdt

t = np.linspace(0,20)
t
t[1]
t[20]
size(t)
np.size(t)
len(t)
x1 = odeint(model2,1,1,t)
odeint?
x=1
y=1
x,y = z
z = ['x', 'y']
z
z[1]
'a'+z[1]

def MassSpring(state,t):
  # unpack the state vector
  x = state[0]
  xd = state[1]

  # these are our constants
  k = -2.5 # Newtons per metre
  m = 1.5 # Kilograms
  g = 9.8 # metres per second

  # compute acceleration xdd
  xdd = ((k*x)/m) + g

  # return the two state derivatives
  return [xd, xdd]

state0 = [0.0, 0.0]
t = arange(0.0, 10.0, 0.1)

state = odeint(MassSpring, state0, t)

plot(t, state)
xlabel('TIME (sec)')
ylabel('STATES')
title('Mass-Spring System')
legend(('$x$ (m)', '$\dot{x}$ (m/sec)'))


def MassSpring(state,t):
  # unpack the state vector
  x = state[0]
  xd = state[1]

  # these are our constants
  k = -2.5 # Newtons per metre
  m = 1.5 # Kilograms
  g = 9.8 # metres per second

  # compute acceleration xdd
  xdd = ((k*x)/m) + g

  # return the two state derivatives
  return [xd, xdd]

state0 = [0.0, 0.0]
t = np.arange(0.0, 10.0, 0.1)

state = odeint(MassSpring, state0, t)

plot(t, state)
xlabel('TIME (sec)')
ylabel('STATES')
title('Mass-Spring System')
legend(('$x$ (m)', '$\dot{x}$ (m/sec)'))

runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
x1
plt.plot(x1,t)
plt.plot(t,x1)
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
plt.plot(t,x1)
x1
len(x1)
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
pend(1,2,3,4)
x1 = odeint(pend,t,args(1,2))
x1 = odeint(pend,t,args=(1,2))
x1 = odeint(pend,args=(1,2))
x1 = odeint(pend,y0,t,args=(1,2))
clear all
def model2 (x,y,t, A,alpha,omega):
    dxdt = x*alpha*(A-np.sqrt(x**2 + y**2))-y*omega
    dydt = y*alpha*(A-np.sqrt(x**2 + y**2))+x*(omega)
    dzdt = [dxdt, dydt]
    return dzdt

x1 = odeint(model2,1,1,t,args=(1,2,3))
x1 = odeint(model2,1,1,t,args=(1,2))
x1 = odeint(model2,1,1,t,args=(1))
x1 = odeint(model2,1,1,t)
x1 = odeint(model2,1,1,t, args=(1,2))
x1 = odeint(model2,1,1,t, args=(1,2,3))
x1 = odeint(model2,1,1, args=(1,2,3))
x1 = odeint(model2,1, args=(1,2,3))
x1 = odeint(model2,1, args=(1,2,3,4))
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
odeint?
def model2 (x,y,t, A,alpha,omega):
    dxdt = x*alpha*(A-np.sqrt(x**2 + y**2))-y*omega
    dydt = y*alpha*(A-np.sqrt(x**2 + y**2))+x*(omega)
    dzdt = [dxdt, dydt]
    return dzdtdef model2 (x,y,t, A,alpha,omega):
    dxdt = x*alpha*(A-np.sqrt(x**2 + y**2))-y*omega
    dydt = y*alpha*(A-np.sqrt(x**2 + y**2))+x*(omega)
    dzdt = [dxdt, dydt]
    return dzdtdef model2 (x,y,t, A,alpha,omega):
    dxdt = x*alpha*(A-np.sqrt(x**2 + y**2))-y*omega
def model2 (x,y,t, A,alpha,omega):
    dxdt = x*alpha*(A-np.sqrt(x**2 + y**2))-y*omega
    dydt = y*alpha*(A-np.sqrt(x**2 + y**2))+x*(omega)
    dzdt = [dxdt, dydt]
    return dzdt

t = np.linspace(0,20)

# initial conditions
x0=1
y0=1

x1 = odeint(model2, x0, y0, t, args=(1,2,3))
x1 = odeint(model2, x0, t, args=(1,2,3))
def model2 (x,y,t, params):
    params[0], params[1], params[2] = A,alpha,omega
    dxdt = x*alpha*(A-np.sqrt(x**2 + y**2))-y*omega
    dydt = y*alpha*(A-np.sqrt(x**2 + y**2))+x*(omega)
    dzdt = [dxdt, dydt]
    return dzdt

A, alpha, omega = 1, 1, 2*np.pi/24
params
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
def model2 (x,y,t,alpha, A, omega):
    #params[0], params[1], params[2] = A,alpha,omega
    dxdt = x*alpha*(A-np.sqrt(x**2 + y**2))-y*omega
    dydt = y*alpha*(A-np.sqrt(x**2 + y**2))+x*(omega)
    dzdt = [dxdt, dydt]
    return dzdt

t = np.linspace(0,20)

# initial conditions
x0=1
y0=1

params1 = [0,1,2]

x1 = odeint(model2,x0,t,args=(params1))
params
params1
type(params1)
params1 = (0,1,2)
type(params1)
x1 = odeint(model2,x0,t,args=(params1))
x1 = odeint(model2,x0,y0,t,args=(params1))
params1 = (0,1,2,3)
x1 = odeint(model2,x0,t,args=(params1))
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
plt.plot(t,x1,'r-', linewidth=2)
plt.plot(t,x1[0],'r-', linewidth=2)
x1
x1[1]
x1[0,1]
x1[:,1]
plt.plot(t,x1[:,0],'r-', linewidth=2)
x1
x[0,1]
x1[0,1]
x1[0,2]
x1[0,0]
x1[1,0]
x1[1,:]
x1[:,1]
x1[:,0]
plt.plot(t,x1[:,1],'r-', linewidth=2)
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
t=linspace(0,1)
t=np.linspace(0,1)
t
size(t)
len(t)
np.linspace(0,10,1000)
len(t)
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
np.pi/12
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
t
t[0]
t[1]
t[2]
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
t
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
x2
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')

## ---(Wed Mar 21 18:02:36 2018)---
results = [0,0,0,0]
len(results)
results = results[0] +1
results
results[0,3,6,9]
results=[0,3,6,9]
results[0]
results[1]
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
results
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
count_nuc("ACCCAG")
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
count_nuc("ACCCAG")
count_nuc("AGCTTAATTACCTCAGGTCCAACTAAGTTCACCGTAGACGTGGCGGTACACCTGATAGCGTCGTGGCGTGCTGACCTATGCCGTAAGAGAAACCCGACATGTTTTACCGATCGGCAACGTAAGACCATAAGACCGCAACGCCCCTCGTAACGGGGATGTGAACTTGTGACATAACACTCGCTATAAGCTGGTGGCAGTGTCACTTACTATTGTCTCTTACCTCTCTCGAACTTCCAAAAATACTAAAATCTTGCAATCACTCGCGCTGGGATTACGGTATTTTAAATATCGCCGGGACTGTCTATTAAGTGTTATTGACGTTGAGCGTCTATGTGATTGTATAAAGCGTCCTACTTGAAGCCATCGTAGACTTTAAGAAGCGATGAGACGAAAGCACCAGGAGAATGTGGGCCCTCTAGCTGGACTAGAAGCAGATCCCACTCTAACACGGTTACACTCCCTAGTAGTTGTCCCTGGCAGATGTGTTCTATGGCCCATACTAGGCAGGGATGGCCAACCCAGACGAATTAGAAAAGTTTAAGCTAATCAATTTTAGGGAACGAGGGTGGCACTCGACGATTACCTTTTTAAGCCCGTCGGTGCTGGAATAAATTGTGCTGTTATAAAACTGACCACTGATACGCTGTTTAGCAATAACTTCCTCGCTTAGGATAACTATCGTCGTCATTGTCACCCAAGCTAATCGTGATGCTATTACTCTAAATAGTGACGAATACATACCTGACATTGCGAACTTGTGTGCCGACTCACACAAGCTTCTAGCCTCTTTATGACAACGGTTTAAATGTTTTTCGTTAGCGA")
s = "s"
s.type
s.type()
type(s)
s.find?
s.replace
s.replace?
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
DNAtoRNA("GATGGAACTTGACTACGTAAATT")
DNAtoRNA("CTTACCGGGTTCCACCGCCGCGCACAAAACTGGGCCAGCCTTCGGCTGGTGGGACACCCTGTCTTGGTCTAACGAAATGCCCTTTTGCTGGACGCCGTTATGACGGCGAGGGCGGATCGCTCACGTTGAAGCCGTACCACGCATATTACCCCGTGTTTAGGCCGATACCCACCCAACTGGAAGGAACGTCATCAAGGTGTCAACGCCGGGGGATTTATCTATTGGACTATGACCTAGGGAGTCGGACGGGGATGACAGGAGTCGCGATAACAGGATGAATCCAGACGCGAACAAAGGTGCTACGAATGAACTCACCAATGATACCTGAAGTTCTTCGACCCACCAAGCAAGGCCCATATTCCCACATCGGGGGAGGCATAAAGTCAGTCTCAGTTATAGCGTTTAACCCATTGATCATCAGCAAGAAAATGTGCAGCGTAATAAGGCGGGCTGATCACTCAATATTGGTTTGGCTTTCCCCTAAAAGTACAGTACTGAGAGGTAGCTTGCCACAGCACCTCGGTCTTCACTTATTGTGCAGGTGAGTTGAAGCCTGAGCGTAAGTAGAAGAAAGTGGTGAATGTCAAGCGTCTTAGCCGGTCTTATGTAAGATCTATTTATGTCCCCTGTTGCCACCGTGAGCGCCCAACGTATCACTTTTCCTGTGAGACGAGAATAAAGGACCTGTGGGACAGATGGCGGCAGTTATTCCTTGCCGTCAACACAGGTTTCCGGGATCGACGGGATAGCGAAGCATAACAGCTCTTATGCTATATGCAGACTTATGATCCTTCTCACCCGAGGTTCGACAGATTTCTGCGACCTGGACTGCCGGGCGATGGGGGTAGAACTATGTGACTGTCAAGTCGGTGCAGCACAAATCACGAGGACGCCATAGTCACATCCATTGGGCTGAGGTGTCTGTATTATGACTGCGCTACTATAGGTGCGTGGCTTTAGACTCAATG")
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
rev_comp("AAAACCCGGT")
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
rev_comp("AAAACCCGGT")
s = "AAAACCCGGT"
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
rev_comp("AAAACCCGGT")
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
rev_comp("ATGC")
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
rev_comp("ATGC")
clear
rev_comp("AAAA")
def rev_comp(s):
    for i in s:
        if i == 'A':
            i = 'T'
    s = s[::-1]
    return s

rev_comp('AAAA')
s = 'AAAA'
rev_comp(s)
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
list(s)
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
rev_comp('AAAA')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
rev_comp('AAAA')
rev_comp('AA')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
rev_comp('AA')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
rev_comp('AA')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
rev_comp("ATGC")
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
rev_comp("AAAACCCGGT")
l = ['A', 'B', 'C']
str(l)
join(l)
.join(l)
print (",".join(foo))
print (",".join(l))
print ("".join(l))
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
rev_comp("AAAACCCGGT")
s = "AAAAA"
l = list(s)
print(l)
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
rev_comp("AAAACCCGGT")
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
rev_comp("AAAACCCGGT")
rev_comp("GGTTTATGCGACCTTGTTTTAAAACGACTGGATGTAACTGTAGTGCAAACTCGTCCAATTAACAACTAGACCTTGACTTTATTACCTTGTGAATAGTAGCCCTTCAGTTTCCCTTACTGTGGCAATGTTTCAGGCACACAGCCATGCTCTCGTTAAAAGCCATGCGTCGAGGGTCCGTGCGCTCTTTATGCCCAGCTGAATTTGACCCCTTCGCCCTTGCTCTCAACATAATTTCCTGTGCAGTTTGCTCGAGAGGCCTCCTCCGGGGAGCGGAGCGCCGCTCGCGCAGTTTATGCCCGCCTGACGCGCGCACGGTCAGTAGCCCGTCGTTCCTAACTCAGTCTGCGTAGCGAGATGCATACACCGAAGGTTGTCACTAGTTGTCGTGCCATTTCTAAGATAACTCTATAGTTGCCACTACGCACCAAATTTACTGCGAACGCGGTTGTCGAAGCCGTAATCACAGGAGTTTCTTAACAAGTTGGTATTGCGGGTACGTTCGAGTCTGAATAGAATAGCGTCTTACGTCGCAAATATAGGTTTTACGTTAAAACAGAGGACATTGCTTGGCTCCCGGTGTCACATCGTCAAGGTTGACTACACCGGGCGGTGGATTATTGGCAGCGCTCCGACACGGTATCTTATATCGCTTCGGGAACTCTTTTTGGAGCCATAAGCTTCGTAGGTGCTCAGTCTCGCTGTGGGTTACGTACCGGGATCCTGCTAGCGTTGCTTGTTCGCAGTTAGAAGCCAAGGTTAATGCCCTGCGTGGTTCGGAGAAGAAGTGGATCATAGTATTCCATTTAAAGATAATTTCGTGGTAGCGGTCTATCCTTCTGACCCGTTGCCAGTCTCAGTGGGGATGATTTGAGCCGACCAAGGGTATCGAGAGAATCTAGATCCATTCTCCTGAGTTAGTACCCACG")
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
maketrans?
s
type(s)
s.maketrans?
s = 'AGTC'
s = 'AAAGTGTGTCCC'
s.maketrans('AGTC', 'TCAG')
s1 = 'AAA'
s1.maketrans('AGTC', 'TCAG')
s.translate?
s.translate.maketrans('AGTC', 'TCAG')
s.translate(maketrans('AGTC', 'TCAG'))
s.translate(s.maketrans('AGTC', 'TCAG'))
s.translate(s.maketrans('AGT', 'TCA', 'C'))
s
s.find('A')
s.find('G')
s.find?
s.find('G',4,7)
s = 'GGGCCCCCCCCCCCCG'
s.find('G',4,7)
s = 'GGGCCCCCCCCCCCGG'
s.find('G',4,7)
s.find('G',4,10)
s.find('G',2,10)
s.find('G',1,10)
s.find('G',4)
s = '>Rosalind_6404
CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCC'
s = '>Rosalind_6404\bCCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCC'
s
s.find('Rosalind')
dictionary?
s[1]
s[13]
s[14]
k=s.find('Rosalind')
k
s[k,k+13]
k
k+13
s[k:k+13]
pwd
cd ../..
ls
cd Downloads
ls
q = open(rosalind_dna*(1).txt)
q = open(rosalind_dna\s(1).txt)
q = open(rosalind_dna (1).txt)
q = open(rosalind_dna(1).txt)
ls
q = open('rosalind_dna(1).txt','r')
q
qw = q.read()
qw
clear
q = open('rosalind_dna(1).txt','r').read()
q
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
dic = {}
d[0]
dic{1:'qwe', 2:'13123'}
dic={1:'qwe', 2:'13123'}
dic{1}
dic[1]
dic.append?
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('rosalind_dna(1).txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC?
GC
GC(1)
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
def GC(file):
       s = open(file).read()  # Input from the file
       s = s.replace(' ', '').replace('\n', '') # Let's get rid of all spaces and newline-characters
       numStr = s.count('Rosalind') # How many entries are there?
       dic = {}
       w=0 
       for i in range(numStr):
           RosInd = s.find('Rosalind', w) # The closest entry, starting with "Rosalind..."
           w = w+13
           dic[s[RosInd:RosInd+13]] = s[RosInd+14:s.find('>',RosInd+14)]
       return dic

GC
GC('rosalind_dna(1).txt')
ls
pwd
cd ../../Downloads
GC('rosalind_dna(1).txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
ls
cd ../../Downloads
GC('rosalind_dna(1).txt')
s = open(file).read()  # Input from the file
        s = s.replace(' ', '').replace('\n', '') # Let's get rid of all spaces and newline-characters
        numStr = s.count('Rosalind') # How many entries are there?
        dic = {}
        w=0 
        for i in range(numStr):
            print (" this is i ", i)
            RosInd = s.find('Rosalind', w) # The closest entry, starting with "Rosalind..."
            print(" this is RosInd ", RosInd)
            w = w+13
            print (" this is dic ", dic)
            dic[s[RosInd:RosInd+13]] = s[RosInd+14:s.find('>',RosInd+14)]
def GC(file):
       s = open(file).read()  # Input from the file
       s = s.replace(' ', '').replace('\n', '') # Let's get rid of all spaces and newline-characters
       numStr = s.count('Rosalind') # How many entries are there?
       dic = {}
       w=0 
       for i in range(numStr):
           print (" this is i ", i)
           RosInd = s.find('Rosalind', w) # The closest entry, starting with "Rosalind..."
           print(" this is RosInd ", RosInd)
           w = w+13
           print (" this is dic ", dic)
           dic[s[RosInd:RosInd+13]] = s[RosInd+14:s.find('>',RosInd+14)]
       return dic

GC('rosalind_dna(1).txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('AAAGGAGGAGGA')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('AAAGGAGGAGGA')
RosInd
GC('AAAGGAGGRosalindAGGA')
GC('>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC>Rosalind_0808CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGG')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC>Rosalind_0808CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGG')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC>Rosalind_0808CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGG')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC>Rosalind_0808CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGG')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC>Rosalind_0808CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGG')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC>Rosalind_0808CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGG')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC>Rosalind_0808CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGG')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC>Rosalind_0808CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGG')
s
s = 'AAADAASASDSAAAA'
s.count?
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC>Rosalind_0808CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGG')
round?
round(1.123213,4)
GC('>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC>Rosalind_0808CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGG')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC>Rosalind_0808CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGG')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC>Rosalind_0808CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGG')
q =GC('>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC>Rosalind_0808CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGG')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
q =GC('>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC>Rosalind_0808CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGG')
q
str(q)
q.items()
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
q =GC('>Rosalind_6404CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG>Rosalind_5959CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC>Rosalind_0808CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGG')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('rosalind_gc.txt')
q = open('rosalind_gc.txt').read()
q
clear
q
clear
q.count("Rosalind")
RosInd = q.find('Rosalind', 0)
w=0
RosInd = q.find('Rosalind', w)
w=w+1+RosInd
RosInd = q.find('Rosalind', w)
q[RosInd:RosInd+13]
q[w]
del s,w,RosInd
w = 0
RosInd = q.find('Rosalind', w)
w = w+RosInd
RosInd = q.find('Rosalind', w)
w=1
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('rosalind_gc.txt')
q
q=q.replace('\n','')
q
q[5229]
len(q)
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC('rosalind_gc.txt')
import re
q
clear
re.finditer('Rosalind', q)
w=re.finditer('Rosalind',q)
w
for m in w
for m in w:
l = []
for m in w:
    l.append(m)
    
l
l[1]
l[1,span=1]
re.finditer?
re.match?
re?
w
l
l[0].start()
l[2].start()
l[2].end()
np.diff(l[0].start(),l[0].end())
import numpy.diff as np.diff
import numpy.diff as diff
import numpy as np
np.diff(l[0].start(),l[0].end())
l[0].start()-l[0].end()
len('Rosalind')
[m.start for m in re.finditer('Rosalind', q)]
[m.start() for m in re.finditer('Rosalind', q)]
[]?
l = []
l?
l(5)
l = [[0, 1, 2], [3,4,5]]
l[0][1]
l[1][1]
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc.txt')
import re
s = open('rosalind_gc.txt').read()
    s = s.replace(' ', '').replace('\n', '')
s = open('rosalind_gc.txt').read()
s = s.replace(' ', '').replace('\n', '')

s
clear
RosInd = [m.start() for m in re.finditer('Rosalind', s)]
name = []
GCCon = []
for i in range(len(RosInd)):
    if (i==len(RosInd)):
        name[i] = s[RosInd[i]:RosInd[i]+13]
        GCCon[i] = s[RosInd[i]+13:]
    name[i] = s[RosInd[i]:RosInd[i]+13]
    GCCon[i] = s[RosInd[i]+13:RosInd[i+1]-1]
    
name[0]
p = []*5
p
len(p)
len(p) = 3
p.append('c')
p
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc.txt')
RosInd[0+1]
s[RosInd[0]+13:RosInd[1]]
s[RosInd[4]+13:]
len(RosInd)
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc.txt')
len([1])
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc.txt')
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc.txt')
GC2('rosalind_gc (1).txt')
q = 'TGTGTGAGATTAAGTTTCTGGTTAGCATGGAGGGTTGTTGGGGTCTATAAATCGTACAATATTCTCTATCTCCGAGCAGTACGTGCCCCGTTGCATCAGTCGGTGGACAAGGGAGTGACCAGACTCAGCAGCTTACGTCTCCACGATTACGTATCTGATCTCGGCACCTGCGTGTACGCACATTCAGATGGCTTCTTATTAAGGTGATCCTCAGGGAAAGGTTGTTCAGGCCCTACAAGGGTGAGTCTCAAGTTGCCACGATAGACCGGGACCTCGTGAGATCGTTGGTCATGATCGGGACCAATTTTCGATCTCTTTGGCCAAACGGCGCGTCATTTGTACACAAGGCCATCTGTTTACAGAAAGGTGTAGTATCCGGGGCCGCAACAGATTCTAGTCCAAGAAAGCTCCTCTAAAGCACACCTGCAGTGGAAGTAGTGAAATCCACAACTTCCGGGATATTCTATCCCCTGTCCTAGGCTTCTCTGTGTAAGCTAAACGAGGCCTTCCTGCCAGTAAGCTAAGAAAGTGTACATGCGTTCGGTTGCCGGAAACAAACGACTGTTTTCACGGACCGATGGTGATGGGGGGTGTTCGAATCTAAATATCACACCTGTCCAGCCTCGCACCATGTGATCGGGCCATTGCATCTTACTAGTCATAGCGACCGGTCCAATTAGTAAGGAGATACAGATGAAAGGACACTTGTAAGTCATTGTGGCGCACAACCCAGATGGTGAAAGAACGGCCATCATTATGTGTATACCGCGTGGTAAATATGGTTACTGAGGTAGGACATCAGTTCAGCCAGTAGGCGTAACGGGAATCGTG'
q
GCC = (q.count('G')+q.count('C'))/len(q)
GCC
GCC*100
GC2('rosalind_gc (1).txt')
q
s = open('rosalind_gc (1).txt').read()
len(s)
s = s.replace(' ', '').replace('\n', '')
len(s)
runfile('/home/kalashnikov/Code/Solving rosalind problems/1st.py', wdir='/home/kalashnikov/Code/Solving rosalind problems')
GC2('rosalind_gc (2).txt')
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
np.linspace?
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
head(x0)
x0
size(x0)
np.size(x0)
len(x0)
type(x0)
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
x0
round(x0)
np.around?
np.around(x0,decimals=4)
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
t
np.shape(t)
np.shape(x0)
x
np.shape(x0[:,0])
np.shape(x0[:,0]) == np.shape(t)
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
clear
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
plt.figure?
clear
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
scipy.signal?
scipy?
import scipy.signal
scipy.signal?
scipy.signal.periodogram?
scipy.signal.periodogram(x0[:,0])
plt.plot(scipy.signal.periodogram(x0[:,0]))
np.shape(scipy.signal.periodogram(x0[:,0]))
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
plt.plot(t, sig.periodogram(x0[:,0]))
plt.plot(251, sig.periodogram(x0[:,0]))
sig.periodogram?
plt.semilogy?
clear
f, Pxx_den = signal.periodogram(x, fs)plt.semilogy(f, Pxx_den)
f, Pxx_den = sig.periodogram(x0[:,0], 1.0)
plt.plot(f, Pxx_den)

f
Pxx_den
max(Pxx_den)
1/247
f, Pxx_den = sig.periodogram(x0[:,0], 0.5)
plt.plot(f, Pxx_den)

f, Pxx_den = sig.periodogram(x0[:,0], 5)
plt.plot(f, Pxx_den)

f, Pxx_den = sig.periodogram(x0[:,0], 5)
plt.semilogy(f, Pxx_den)



clear
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
np.shape(t)
t
np.shape(t)
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
np.shape(t)
t
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
t
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
t
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
np.linspace(0,1,1)
np.linspace(0,1,2)
np.linspace(0,1,3)
np.linspace(0,1,10)
np.linspace(0,1,5)
np.linspace(0,2,5)
np.linspace(0,2,5*2)
np.linspace(0,3,5*2)
np.linspace(0,4,5*2)
np.linspace(0,10,5*2)
a = 10
np.linspace(0,4,a*4)
np.linspace(0,2,a*2)
np.linspace(0,25,25)
np.shape(np.linspace(0,25,25*25))
np.linspace(0,25,25*25)
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')
np.len(t)
len(t)
runfile('/home/kalashnikov/Code/My first Poincare oscillator.py', wdir='/home/kalashnikov/Code')

## ---(Tue Mar 27 14:15:29 2018)---
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
x0
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
1>0
np.diff(x0[0,:])
np.diff(x0[0])
np.diff(x0)
np.shape(np.diff(x0))
np.shape(x0)
x0
&&?
&?
p = [][]
[[]]
p = [[]]
type(p)
p[0]
[,]
p = [,]
t
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
t
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
t
np.shape(t)
x0[0,:]
x0[0,0]
x0[0,]
x0
x0[:,0]
np.shape(x0[:,0])
t
t[1]
x0[:,0]
x0[1,0]
1<=1
1<=2
1<1
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
x0[:,0]
t
zeroCross
np.zeros(5)
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
zeroCross
x0[:,0]
np.diff(1,3)
np.diff(zeroCross)
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
np.diff(zeroCross)
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
def zero(x):
    zeroCross=[]
    for i in range(len(x[:,0]-1)):
        if (x[i,0]>0 and x[i+1,0]<=0):
            zeroCross.append((t[i]+t[i+1])/2) # we append to zeroCross the approx. time of 0-crossing
    return zeroCross

zero(x0)
zeroCross
zero(x1)
zero(x4)
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
def zero(x):
    zeroCross=[]
    for i in range(len(x[:,0])):
        if (x[i,0]>0 and x[i+1,0]<=0):
            zeroCross.append((t[i]+t[i+1])/2) # we append to zeroCross the approx. time of 0-crossing
    return zeroCross

zero(x4)
len(zero(x0))
len(zero(x1))
len(zero(x3))
len(zero(x4))
x4
np.shape(x4)
np.shape(x1)
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
np.where?
np.isin
np.isin?
np.sign(2)
np.sign(-1)
xx = x0[:,0]
xx
np.sign(xx)
np.sign(0)
np.sign(-1)
np.sign(0.1)
np.sign(0.000)
np.sign(0.0001)
np.sign(-0)
np.sign(-0.01)
np.diff(np.sign(xx))
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
xx
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
zeroCross
xx
t[zeroCross]
t
np.mean?
zeroCross+1
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
zeroCrossValues
x0[:,8]
x0[9,0]
x0[8,0]
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
zeroCrossVal
plt.plot(zeroCrossVal, zeroCross)
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
period
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
period
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
period
np.diff(period)
plt.plot(period)
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
plt.plot(period)
plt.plot(diff(period))
plt.plot(np.diff(period))
period
t
zeroCrossInd
len(period)
len(zeroCrossInd)
del all
del
del t
del?
clear all
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
np.diff(zeroCrossVal)
zeroCrossVal
zeroCrossInd
x0[2,0]
x0[3,0]
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
x0[3,0]
zeroCrossInd
zeroCrossVal
x0[:,0]
x0[1,0]
x0[2,0]
x0[3,0]
x0[22,0]
x0[23,0]
x0[237,0]
x0[238,0]
plt.plot(zeroCrossVal)
period
a = [0,2,100,1200,1100,1000,100,50,60,70]
np.diff(a)
a = [0,2,5,4,1]
np.diff(a)
np.diff?
np.diff(a)
np.diff(n=2)
np.diff(a,n=2)
np.diff(a)
a
b = np.diff(a)
np.sign(a)
np.sign(b)
np.diff(np.sign(np.diff(a)))
a
np.diff(a)
np.diff(np.sign(np.diff(a)))
a
b
np.diff(np.sign(np.diff(a)))
x0[:,0]
np.diff(x0[:,0])
np.sign(np.diff(x0[:,0]))
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
dif
np.diff(np.sign(dif))
x0[:,0]
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
x0[:,0]
dif
np.diff(np.sign(dif))
x0[:,0]
np.diff(x0[:,0])
np.sign(np.diff(x0[:,0]))
np.diff(np.sign(np.diff(x0[:,0])))
np.diff(np.sign(np.diff(x0[:,0])))>1.5
np.where(np.diff(np.sign(np.diff(x0[:,0])))>1.5)
np.diff(np.sign(np.diff(x0[:,0]))).shape
np.diff([1,2,5])
np.diff([1,2,3,4,5,4,3,2,1])
xxx=np.diff([1,2,3,4,5,4,3,2,1])
np.where(np.diff(np.sign(np.diff(xxx)))>1.5)
np.where(np.diff(np.sign(np.diff(xxx)))>1)
np.where(np.diff(np.sign(np.diff(xxx))))
xxx
np.diff(np.sign(np.diff(xxx)))
np.sign(np.diff(xxx))
np.where(np.diff(np.sign(xxx)))
np.where(np.diff(np.sign(xxx)))[0]
np.where?
np.where(np.diff(np.sign(xxx)))[0][0]
np.where(np.diff(np.sign(xxx)))[0][1]
np.where(np.diff(np.sign(xxx)))[0]
xxx
np.diff(np.sign(np.diff(x0[:,0])))
np.diff(np.sign(np.diff(x0[:,0])))!=0
int(np.diff(np.sign(np.diff(x0[:,0])))!=0)
np.diff(np.sign(np.diff(x0[:,0])))!=0
np.diff(np.sign(np.diff(x0[:,0])))[5]
x0[:,0]
x0[0:3,0]
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
maxs
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
maxT
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
maxVal
np.where?
np.where(maxT)
np.where(maxT)>0
np.where(maxT>0)
a = [1,2,3]
np.where(a>2)
type(a)
np.asarray(a)
np.where(np.asarray(a)>2)
np.where(np.asarray(a)>2)[0]
np.where(np.asarray(a)>2)[0][0]
maxT
maxVal
maxVal>0
np.where(np.asarray(maxVal)>=0)
np.where(np.asarray(maxVal)>=0)[0]
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
mins
maxs
maxs-mins
maxs[0]-mins[0]
maxs[1]-mins[1]
maxs[2]-mins[2]
maxs[3]-mins[3]
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
mins
maxs

## ---(Tue Mar 27 19:51:47 2018)---
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')

## ---(Wed Mar 28 12:48:42 2018)---
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
plt.plot(t,period)
plt.plot(period)
mins
maxs
zeroCrossVal
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
maxs
len(maxs)
maxs[-1:-3]
[0::2]
a = range(20)
a
type(a)
a = [1:100:1]
a = [1:100]
a = np.linspace(0,100,100)
a
a = np.linspace(0,10,10)
a
a = np.round(a)
a
a[-1]
a[0:3:2]
a[0:9:2]
a = np.linspace(1,10,10)
a
a[0:9:2]
a[-1:-3:2]
a[-1:-3:]
a[-1:]
a[:-1]
a[::-1]
a[0:2:-1]
a[0:10:-1]
a[0:9:-1]
a[1::-1]
a[5::-1]
a[5:3:-1]
a[5:1:-1]
np.mean(a[len(a)-1:len(a)-3])
a[len(a)-1:len(a)-3]
a[len(a)-1:len(a)-3:-1]
a[len(a)-1:len(a)-4:-1]
np.mean(a[len(a)-1:len(a)-4:-1])
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
fold
mins[-1]
maxs[-1]
relA
zeroCrossVal[-1]
relA*zeroCrossVal[-1]
zeroCrossInd
zeroCrossT
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
zeroCrossT
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
zeroCrossT
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
zeroCrossT
r = np.randn
r = np.randn(3)
import np.random as rand
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
import np.random as rand
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
extrT
maxs
extrVal
np?
import np.random as rand
import np.random* as rand
import np.random.* as rand
import np.random.randn as randn
np.random.randn?
np.random.randn(2)
np.random.randn(10)
def genRan(x):
    return np.random.randn(x)

plt.hist(genRan(10))
plt.hist(genRan(100))
plt.hist(genRan(1000))
plt.hist(genRan(10), bins=10)
plt.hist(genRan(100), bins=100)
plt.hist(genRan(1000), bins=1000)
plt.hist(genRan(1000), bins=100)
plt.hist(genRan(100000), bins=100)
plt.hist(genRan(1000000), bins=100)
plt.hist(genRan(1000000), bins=1000)
plt.hist(genRan(10000), bins=100)
plt.hist(genRan(100000), bins=100)
plt.hist(genRan(1000000), bins=100)
plt.hist(genRan(1000), bins=100)
plt.plot(genRan(1000))
plt.plot(genRan(10000))
x5 = np.array()
x5 = np.array(1)
x5
x5 = np.array(10)
x5
x5[0]
type(x5)
np.shape(x5)
np.array?
np.empty?
np.empty()
np.empty(10)
params
params[4]
params[3]
params[2]
params[2] = 2
a=1
a+=1
a
a=+1
a
a=+1
a
a=1
a=+1
a
runfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')
np.random.randn(1)
np.random.randn(1) + 1
np.asint(np.random.randn(1))
runfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')
a=[1,2]
int(a)
a = [1]
int(a)
runfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')
np.random.randn(1)
np.random.randn(1).tolist
np.random.randn(1).tolist()
np.random.randn(1).tolist()[0]
runfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')
x5
x5[:,0]
type(x5)
x5[0]
x[1]
x5[1]
x[3]
np.shape(x5)
runfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
x5
x5[:,:,0]
x5[::0]
x5[0]
x5[0].shape()
x5[0].shape
type(x5)
x5[1].shape
x5.shape
np.shape(x5)
x5[0]
x5[0][0]
x5[0][:,0]
runfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')
x5[0]
x5[1]
runfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')
np.mean(np.random.randn(100))
np.mean(np.random.randn(1000))
np.mean(np.random.randn(10000))
np.mean(np.random.randn(100000))
np.mean(np.random.randn(10000000))
np.mean(np.random.randn(1000000000))
np.mean(np.random.randn(1000000))
np.mean(np.random.randn(10000000))
runfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')
np.mean(np.around(np.random.randn(100),3))
np.mean(np.around(np.random.randn(100),2))
np.mean(np.around(np.random.randn(100),4))
np.mean(np.around(np.random.randn(100)))
np.mean(np.around(np.random.randn(1000)))
np.mean(np.around(np.random.randn(10000)))
np.mean(np.around(np.random.randn(10000000)))
np.mean(np.around(np.random.randn(1000000)))
np.std?
np.std(np.around(np.random.randn(1000000)))
plt.hist(genRan(100000), bins=100)
def genRan(x):
    return np.random.randn(x)

plt.hist(genRan(100000), bins=100)
np.std(genRan(100))
np.std(genRan(100000))
runfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')

## ---(Fri Mar 30 15:06:59 2018)---
odeP
odeP?
np.pi
import numpy as np
np.pi
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
x0
type(x0)
np.shape(x0)
np.shape(x5)
runfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')
np.shape(x5)
np.shape(x5[0])
type(x5)
type(x5[0])
mins
for i in range(2):
    print i
for i in range(2):
    print (i)
    
for i in range(1):
    print (i)
    
state = [[1,1]]
state[0]
params=[(0.1,1,(np.pi*2)/24,0)]
params[0]
a = {}
type(a)
a[0] = 'Period'
a
a = []
a = dict.fromkeys([1,2,3,4])
a
a = dict.fromkeys([1,'two',3,4])
a
a['two']
a[1]
a[1]='one'
a
from i in range(3):
for i in range(3)
a = []
a
readouts = ['period', 'extrVal', 'extrT', 'zeroCrossInd', 'zeroCrossVal', 'zeroCrossT', 'mins', 'maxs', 'fold', 'SyncIndex', 'Variance']
readouts
rd = readouts
rd
for i in range(3):
    a.append(dict.fromkeys(rd))
    
a
np.shape(a)
a[0]
a[1]
a[1]['fold'] = 1/2
a[1]['fold']
a[1]
a.isempty()
not a
if a:
    print ('A is true')
if a:
    print a
    print ('A is true')
if a:
    print (a)
    print ('A is true')
    
if not a:
    print (a)
    print ('A is true')
    
l = [1,2,3,4]
l1 = [1,2,3]
l2 = [1,2,3,4,5]
min(l1,l2,l3)
min(l1,l2)

## ---(Tue Apr 10 10:52:29 2018)---
import matplotlib.pyplot as plt
import numpy as np
runfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
def a:
def a():
    for i in p:
        print (i)
    return i

a
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
readouts = ['period', 'extrVal', 'extrT', 'zeroCrossInd', 'zeroCrossVal', 'zeroCrossT', 'mins', 'maxs', 'fold', 'SyncIndex', 'Variance']
dict.fromkeys(readouts)
readouts
analysisOfSolutions = []
analysisOfSolutions.append(dict.fromkeys(readouts))
analysisOfSolutions
analysisOfSolutions.append(dict.fromkeys(readouts))
analysisOfSolutions
analysisOfSolutions.shape()
len(analysisOfSolutions)
type(analysisOfSolutions)
type(analysisOfSolutions[0])
type(analysisOfSolutions[0][0])
type(analysisOfSolutions[1][0])
analysisOfSolutions[0]
analysisOfSolutions[0]['mins']
analysisOfSolutions[0]['mins']=1
analysisOfSolutions[0]['mins']
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
runfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')
analysisOfSolutions = []
analysisOfSolutions.append(dict.fromkeys(readouts))
analysisOfSolutions
runfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')
debugfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')
solutions = [] # Storing variable for the solutions. solutions[0] corresponds to the solutions of the 0-th oscillator
readouts = ['period', 'extrVal', 'extrT', 'zeroCrossInd', 'zeroCrossVal', 'zeroCrossT', 'mins', 'maxs', 'fold', 'SyncIndex', 'Variance']
analysisOfSolutions = [] # list of dictionaries, containing the values of readouts for each solution
for i in range(numOsc):
solutions.append(odeint(model, state[0], timepoints, args = (params[0])) #for each cycle turn, append the integrated values inside the solutions-list
runfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')
p
import matplotlib.pyplot as plt
import numpy as np
def odeP (model=model2, numOsc=1, state=[[1,1]], timepoints=np.linspace(0,100,100), params=[(0.1,1,(np.pi*2)/24,0)]):
def odeP (model=model2, numOsc=1, state=[[1,1]], timepoints=np.linspace(0,100,100), params=[(0.1,1,(np.pi*2)/24,0)]):
    solutions = [] # Storing variable for the solutions. solutions[0] corresponds to the solutions of the 0-th oscillator
    
    readouts = ['period', 'extrVal', 'extrT', 'zeroCrossInd', 'zeroCrossVal', 'zeroCrossT', 'mins', 'maxs', 'fold', 'SyncIndex', 'Variance']
    analysisOfSolutions = [] # list of dictionaries, containing the values of readouts for each solution
    for i in range(numOsc):
        solutions.append(odeint(model, state[0], timepoints, args = (params[0]))
        analysisOfSolutions.append(dict.fromkeys(readouts)) #
    return [solutions, analysisOfSolutions]

runfile('/home/kalashnikov/Code/untitled0.py', wdir='/home/kalashnikov/Code')
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
clear
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
clear
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
odeP()
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
x0
type(x)
type(x0)
l = np.arange(0,1,0.1)
np.mean(l)
type(np.mean(l))
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
odeP()
a,b = odeP()
a
b
type(b)
b[0]
b[1]
type(b[0])
b[0]['diff']
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
solutions = [] # Storing variable for the solutions. solutions[0] corresponds to the solutions of the 0-th oscillator
readouts = ['period', 'extrVal', 'extrT', 'zeroCrossInd', 'zeroCrossVal', 'zeroCrossT', 'mins', 'maxs', 'fold', 'SyncIndex', 'Variance']
analysisOfSolutions = [] # list of dictionaries, containing the values of readouts for each solution
numOsc = 2
for i in range(numOsc):
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
odeP()
a,b = odeP()
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
a,b = odeP()
a
a[0]
type(a)
type(a[0])
type(a[0][:,0])
a[0][:,0]
np.diff(a[0][:,0])
np.sign(np.diff(a[0][:,0]))
np.diff(np.sign(np.diff(a[0][:,0])))
diff = np.diff(np.sign(np.diff(a[0][:,0])))
extrVal = []
extrT = []
t = np.linspace(0,100,100)
for j in range(len(diff)):
    if diff[j]!=0:
        extrVal.append(np.mean(a[j:j+2,0]))
        extrT.append(np.mean(t[j:j+2]))
        
a[0:0+2,0]
a[0:2,0]
diff
a[0]
a
a[0][:,0]
a[0][:,0][0]
a[0][:,0][0:2]
a[0][:,0][0:1]
a[0][:,0][0:3]
a
len(a)
len(a[0])
a[:,0]
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
type(x0)
x0[0]
np.shape(x0)
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
x0
x0[0]
x0[:,0]
x0[:,0][0]
x0[:,0][1]
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
odeP()
a,b = odeP()
a
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
x
np.shape(x)
np.shape(x[0])
np.shape(x[1])
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
anls[0]
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
anls
anls[0]['extrT']
anls[0]['extrVal']
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
anls[1]['mins']
anls[1]['extrVal']
anls[1]['extrT']
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
a = [0,0,0]
a1 = [100,50,25]
np.mean(a,a1)
np.mean([a,a1])
[i for i in (min(a,a1)) np.mean(a[i])]
a2 = np.mean(a,a1)
zip(a,a1)
zip(a,a1)[0]
zip(a,a1)?
zip?
np.mean(np.array(a,a1),axis=0)
np.mean([np.array(a,a1)],axis=0)
np.mean(np.array(a,a1))
np.array(a,a1)
np.array([a,a1])
np.mean(np.array([a,a1]))
np.mean(np.array([a,a1]),axis=0)
type(x)
np.shape(x)
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
x
x[0]
x[3]
x[4]
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
x
x[0]
x[1]
np.shape(x)
np.mean(x)
np.mean(x, axis=0)
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
x
meanOsc
x[0]
x[1]
meanOsc
(0.9553+2.274)/2
meanOsc[0]
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
[4,4]*4
[[4,4]*4]
[[4,4]]*4
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
[[4,4]]*10
([[4,4]]*10)[0]
([[4,4]]*10)[1]
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
np.shape(x)
plt.plot(np.sin(np.linspace(0,100,500)))
plt.plot(np.sin(np.linspace(0,10,50)))
plt.plot(np.sin(np.linspace(0,1,5)))
plt.plot(np.sin(np.linspace(0,2,10)))
plt.plot(np.sin(np.linspace(0,2,15)))
plt.plot(np.sin(np.linspace(0,2,20)))
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
m = [meanOsc,meanOsc1,meanOsc2]
for i,j in zip(m,[10,100,1000]):
    plt.plot(t, i[:,0], 'o', label = 'mean values of '+str(j)+' oscillators')
for i,j in zip(m,[10,100,1000]):
    plt.plot(t, i[:,0], 'o', label = 'mean values of '+str(j)+' oscillators')
    plt.legend()
    
for i,j in zip(m,[10,100,1000]):
    plt.plot(t, i[:,0], '-', label = 'mean values of '+str(j)+' oscillators')
    plt.legend()
    plt.show()
    
for i,j in zip(m,[10,100,1000]):
    plt.plot(t, i[:,0], '-', label = 'mean values of '+str(j)+' oscillators')
    plt.legend()
    
plt.figure(figsize=(12,5))
for i,j in zip(m,[10,100,1000]):
    plt.plot(t, i[:,0], '-', label = 'mean values of '+str(j)+' oscillators')
    plt.legend()
    
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
np.shape(x)
np.shape(x1)
meanOsc=np.mean(x,axis=0)
plt.plot(t,meanOsc[:,0], 'o', label = 'mean values of 10 oscillators')

meanOsc1=np.mean(x1,axis=0)
plt.plot(t,meanOsc1[:,0], 'o', label = 'mean values of 100 oscillators')

meanOsc=np.mean(x,axis=0)
plt.plot(t,meanOsc[:,0], 'o', label = 'mean values of 10 oscillators')

meanOsc1=np.mean(x1,axis=0)
plt.plot(t,meanOsc1[:,0], 'o', label = 'mean values of 100 oscillators')

#meanOsc2=np.mean(x2,axis=0)
#plt.plot(t,meanOsc2[:,0], 'o', label = 'mean values of 1000 oscillators')

plt.legend()
plt.show()

np.shape(x)
var = np.var(x,axis=0)
np.shape(var)
var[:,0]
np.shape(var[:,0])
plt.figure(figsize=(12,5))
plt.plot(t,meanOsc[:,0], 'o', label = 'mean values of 10 oscillators')
plt.plot(t,meanOsc1[:,0], 'o', label = 'mean values of 100 oscillators')

plt.plot(t,np.var(x,0),'-',label='Variance of 10 oscillators')
plt.plot(t,np.var(x1,0),'-', label = 'Variance of 100 oscillators')

plt.legend()

np.var(x,0)
np.var(x,0)[0]
np.var(x,0)[:,0]
np.shape(x)
x[:,:,0]
x[::,0]
x[::0]
x[:][:][0]
x[:][:][1]
x[:][:][2]
x[:][:].shape
x[:][:].shape()
x[:][:].len()
x[:][:].len
np.shape(x[:][:])
np.shape(x[:][:][0])
np.shape(x[0][:][:])
np.shape(x[0][:][0])
plt.plot(t,np.var(x,0)[0],'-', label = 'Variance of 10 oscillators')
plt.plot(t,np.var(x,0)[:,0],'-', label = 'Variance of 10 oscillators')
plt.plot(t,np.var(x1,0)[:,0],'-', label = 'Variance of 10 oscillators')
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
x
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
x
x[:,0]
np.shape(x)
x[0]
np.var(x,axis=0)
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
np.shape(x)
x[0]
a = [[1,2],[3,4]]
a
np.shape(a)
a + [5,6]
a = a + [[5,6]]
a
np.shape(a)
b = [a,a,a]
b
np.shape(b)
b = [a]
b
b = [a,a]
np.var(b,0)
b
b[0]
b[:,0]
b[0][:,0]
b[0,:]
b[0][0]
b[::-1]
x[0]
x[1]
x[:,0]
x[0,:]]
x[0,:]
xOnlyX = []
x[0]
x[0][:,0]
for i in x:
    xOnlyX.append(i[:,0])
    
xOnlyX
xOnlyX[0]
np.shape(xOnlyX)
np.var(onlyX,0)
onlyX = xOnlyX
np.var(onlyX,0)
plt.plot(t,np.var(onlyX,0))
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
np.var(onlyX,0)
t
meanOsc
np.var(onlyX,0)
len(np.var(onlyX,0))
len(t)
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
plt.plot(t,np.var(onlyX,0),'-',label='Variance of 10 oscillators')
plt.plot(t,np.var(onlyX1,0),'-', label = 'Variance of 100 oscillators')

plt.legend()

runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
plt.figure(figsize=(12,5))
plt.plot(t,meanOsc[:,0], 'o', label = 'mean values of 10 oscillators')
plt.plot(t,meanOsc1[:,0], 'o', label = 'mean values of 100 oscillators')

plt.plot(t,np.var(onlyX,0),'-',label='Variance of 10 oscillators')
plt.plot(t,np.var(onlyX1,0),'-', label = 'Variance of 100 oscillators')
plt.plot(t,np.var(onlyX2,0),'-', label = 'Variance of 1000 oscillators')

plt.legend()

plt.figure(figsize=(12,5))
plt.plot(t,np.var(onlyX,0),'-',label='Variance of 10 oscillators')
plt.plot(t,np.var(onlyX1,0),'-', label = 'Variance of 100 oscillators')
plt.plot(t,np.var(onlyX2,0),'-', label = 'Variance of 1000 oscillators')

plt.legend()

np.var(onlyX,0)
def running_mean(x, N):
    cumsum = numpy.cumsum(numpy.insert(x, 0, 0)) 
    return (cumsum[N:] - cumsum[:-N]) / float(N)

v0 = np.var(onlyX,0)
plt.plot(t,v0)
v2 = np.var(onlyX2,0)
plt.plot(t,v2)
running_mean(v2,3)
def running_mean(x, N):
    cumsum = np.cumsum(np.insert(x, 0, 0)) 
    return (cumsum[N:] - cumsum[:-N]) / float(N)

running_mean(v2,3)
plt.plot(t,running_mean(v2,3))
w = [0,1,2,3,4,5,6,7,8,9,10]
w[-1]
w[0:-1]
w[0:-2]
plt.plot(t[0:-2],running_mean(v2,3))
plt.plot(t[0:-2],running_mean(v2,4))
plt.plot(t[0:-3],running_mean(v2,4))
plt.plot(t[0:-2],running_mean(v2,3))
plt.plot(t[0:-3],running_mean(v2,4))
plt.plot(t[0:-4],running_mean(v2,5))
plt.plot(t[0:-5],running_mean(v2,6))

running_mean(v2,3)
running_mean(v2,4)
running_mean(v2,10)
running_mean(v2,100)
running_mean(v2,2)
plt.plot(t[0:-2],running_mean(v2,3))
plt.plot(t[0:-10],running_mean(v2,11))
rv2 = running_mean(v2,11)
rv2.size
plt.plot(t[0:-10],rv2)
plt.plot(t[0:-100],running_mean(v2,101))
plt.plot(t[0:-150],running_mean(v2,151))
plt.plot(t[0:-50],running_mean(v2,51))
clear
plt.plot(t[0:-2],running_mean(v2,3))
plt.plot(t[0:-13],running_mean(v2,12))
plt.plot(t[0:-50],running_mean(v2,51))
plt.plot(t[0:-100],running_mean(v2,101))


plt.plot(t[0:-2],running_mean(v2,3))
plt.plot(t[0:-13],running_mean(v2,14))
plt.plot(t[0:-50],running_mean(v2,51))
plt.plot(t[0:-100],running_mean(v2,101))


plt.plot(t[0:-49],running_mean(np.var(onlyX,0),50),'-',label='Variance of 10 oscillators')
plt.plot(t[0:-49],running_mean(np.var(onlyX1,0),50),'-', label = 'Variance of 100 oscillators')
plt.plot(t[0:-49],running_mean(np.var(onlyX2,0),50),'-', label = 'Variance of 1000 oscillators')


plt.plot(t[0:-149],running_mean(np.var(onlyX,0),150),'-',label='Variance of 10 oscillators')
plt.plot(t[0:-149],running_mean(np.var(onlyX1,0),150),'-', label = 'Variance of 100 oscillators')
plt.plot(t[0:-149],running_mean(np.var(onlyX2,0),150),'-', label = 'Variance of 1000 oscillators')

plt.plot(t[0:-149],running_mean(np.var(onlyX,0),150),'-',label='Variance of 10 oscillators')
plt.plot(t[0:-149],running_mean(np.var(onlyX1,0),150),'-', label = 'Variance of 100 oscillators')
plt.plot(t[0:-149],running_mean(np.var(onlyX2,0),150),'-', label = 'Variance of 1000 oscillators')
plt.legend()

plt.plot(t[0:-249],running_mean(np.var(onlyX,0),250),'-',label='Variance of 10 oscillators')
plt.plot(t[0:-249],running_mean(np.var(onlyX1,0),250),'-', label = 'Variance of 100 oscillators')
plt.plot(t[0:-249],running_mean(np.var(onlyX2,0),250),'-', label = 'Variance of 1000 oscillators')
plt.legend()

plt.plot(t[0:-349],running_mean(np.var(onlyX,0),350),'-',label='Variance of 10 oscillators')
plt.plot(t[0:-349],running_mean(np.var(onlyX1,0),350),'-', label = 'Variance of 100 oscillators')
plt.plot(t[0:-349],running_mean(np.var(onlyX2,0),350),'-', label = 'Variance of 1000 oscillators')
plt.legend()


plt.plot(t[0:-549],running_mean(np.var(onlyX,0),550),'-',label='Variance of 10 oscillators')
plt.plot(t[0:-549],running_mean(np.var(onlyX1,0),550),'-', label = 'Variance of 100 oscillators')
plt.plot(t[0:-549],running_mean(np.var(onlyX2,0),550),'-', label = 'Variance of 1000 oscillators')
plt.legend()

plt.plot(t[0:-949],running_mean(np.var(onlyX,0),950),'-',label='Variance of 10 oscillators')
plt.plot(t[0:-949],running_mean(np.var(onlyX1,0),950),'-', label = 'Variance of 100 oscillators')
plt.plot(t[0:-949],running_mean(np.var(onlyX2,0),950),'-', label = 'Variance of 1000 oscillators')
plt.legend()


plt.plot(t[0:-1549],running_mean(np.var(onlyX,0),1550),'-',label='Variance of 10 oscillators')
plt.plot(t[0:-1549],running_mean(np.var(onlyX1,0),1550),'-', label = 'Variance of 100 oscillators')
plt.plot(t[0:-1549],running_mean(np.var(onlyX2,0),1550),'-', label = 'Variance of 1000 oscillators')
plt.legend()

plt.plot(t[0:-9],running_mean(np.var(onlyX,0),10),'-',label='Variance of 10 oscillators')
plt.plot(t[0:-9],running_mean(np.var(onlyX1,0),10),'-', label = 'Variance of 100 oscillators')
plt.plot(t[0:-9],running_mean(np.var(onlyX2,0),10),'-', label = 'Variance of 1000 oscillators')
plt.legend()

plt.plot(t[0:-9],running_mean(np.var(onlyX,0),10),'-',label='Variance of 10 oscillators')
plt.plot(t[0:-9],running_mean(running_mean(np.var(onlyX,0),10),10),'-',label='Variance of 10 oscillators')
plt.plot(t[0:-18],running_mean(running_mean(np.var(onlyX,0),10),10),'-',label='Variance of 10 oscillators')
e = 0
e+=1
e
e=-1
e
def running_mean2(x, N,N2=0):
    if N2==0:
        cumsum = np.cumsum(np.insert(x, 0, 0)) 
        return (cumsum[N:] - cumsum[:-N]) / float(N)
    else:
        cumsum = np.cumsum(np.insert(x, 0, 0)) 
        return running_mean(((cumsum[N:] - cumsum[:-N]) / float(N)),N,N2-1)
    
running_mean2(v0,10)
running_mean2(v0,10,1)
def running_mean2(x, N,N2=0):
    if N2==0:
        cumsum = np.cumsum(np.insert(x, 0, 0)) 
        return (cumsum[N:] - cumsum[:-N]) / float(N)
    else:
        cumsum = np.cumsum(np.insert(x, 0, 0)) 
        return running_mean2(((cumsum[N:] - cumsum[:-N]) / float(N)),N,N2-1)
    
running_mean2(v0,10)
running_mean2(v0,10,1)
plt.plot(running_mean(v0,10,1))
plt.plot(running_mean2(v0,10,1))
plt.plot(running_mean2(v0,10))
plt.plot(running_mean2(v0,10,5))
plt.plot(running_mean2(v0,10,100))
plt.plot(running_mean2(v0,10,1000))
plt.plot(running_mean2(v0,10,150))
plt.plot(running_mean2(v0,10,200))
plt.plot(running_mean2(v0,10,300))
plt.plot(running_mean2(v0,10,2))
plt.plot(running_mean2(v0,10,100))
plt.plot(running_mean2(v0,100))
plt.plot(running_mean2(v0,100,2))
plt.plot(running_mean2(v0,100,1))
len(running_mean2(v0,100,1))
plt.plot(t[0:-199],running_mean(np.var(onlyX,0),100,2),'-',label='Variance of 10 oscillators')
plt.plot(t[0:-199],running_mean2(np.var(onlyX,0),100,2),'-',label='Variance of 10 oscillators')
plt.plot(t[0:-297],running_mean2(np.var(onlyX,0),100,2),'-',label='Variance of 10 oscillators')

plt.plot(t[0:-297],running_mean2(np.var(onlyX,0),100,2),'-',label='Variance of 10 oscillators')
plt.plot(t[0:-297],running_mean2(np.var(onlyX1,0),100,2),'-', label = 'Variance of 100 oscillators')
plt.plot(t[0:-297],running_mean2(np.var(onlyX2,0),100,2),'-', label = 'Variance of 1000 oscillators')
plt.legend()

import scipy.signal.savgol_filter as savgol
import scipy.signal.savgol_filter() as savgol
from scipy.signal import savgol_filter
savgol = savgol_filter
savgol(v0)
savgol(v0,5,3)
len(savgol(v0,5,3))
plt.plot(savgol(v0,5,3))
plt.plot(savgol(v0,10,3))
plt.plot(savgol(v0,9,3))
plt.plot(savgol(v0,9,5))
plt.plot(savgol(v0,111,3))
plt.plot(savgol(v0,111,100))
plt.plot(savgol(v0,111,15))
plt.plot(savgol(v0,111,10))
plt.plot(savgol(v0,111,5))
plt.plot(savgol(v0,111,6))
plt.plot(savgol(v0,111,7))
plt.plot(savgol(v0,111,8))
plt.plot(savgol(v0,111,9))
plt.plot(savgol(v0,111,10))
plt.plot(savgol(v0,1110,5))
plt.plot(savgol(v0,999,5))
del savgol

## ---(Wed Apr 11 13:12:33 2018)---
np.random.rand?
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
clear
np.random.randn?
rand = np.random.randn
plt.hist(rand(50),bins=50)
rand(3)
rand(50)
plt.hist(rand(100))
plt.hist(rand(10000))
plt.hist(rand(10000),bins=10)
plt.hist(rand(10000),bins=40)
plt.hist(rand(10000),bins=100)
plt.hist(rand(100000),bins=100)
plt.hist(rand(1000000),bins=100)
plt.hist(rand(1000000),bins=1000)
plt.hist(rand(100000000),bins=1000)
plt.hist(rand(100000),bins=100)
plt.hist(rand(100000)*2,bins=100)
plt.hist(rand(100000)**2,bins=100)
plt.hist(rand(100000)*2,bins=100)
plt.hist(rand(100000)*2+1,bins=100)
plt.hist(rand(100000)*25,bins=100)
plt.hist(rand(100000)+2,bins=100)
rand(1)
rand(0)
float(rand(1))
a = rand(1)
a
int(a)
float(a)
runfile('/home/kalashnikov/Code/PoincareOsc.py', wdir='/home/kalashnikov/Code')
x0
t
x0_start = odeint(model2, state02, t[0:10], args=(params))
x0_end = odeint(model2, state02, t[20:], args=(params))
len(x0)
len(x0_start)
len(x0_end)
x0
x0_start
x0_end
x0_start==x0_end
from math import isclose
math.isclose?
math.isclose
math?
import cmath
cmath?
del cmath
import math
math?
math.isclose?
math.isclose(x0_start,x0_end)
for i in range(len(x0_start)):
    math.isclose(x0_start[i],x0_end[i])
    
x0_start[0]
x0_start[1]
x0_start[1][0]
for i in range(len(x0_start)):
    math.isclose(x0_start[i][0],x0_end[i][0])
    
w = []
for i in range(len(x0_start)):
    w.append(math.isclose(x0_start[i][0],x0_end[i][0]))
    
w
for i in range(len(x0_start)):
    w.append(math.isclose(x0_start[i][0],x0_end[i][0],abs_tol=0.001))
    
w
w = []
for i in range(len(x0_start)):
    w.append(math.isclose(x0_start[i][0],x0_end[i][0],abs_tol=0.001))
    
w
del w
del a,i,x4,x3,x2
x0
x0_realend = x0[20:]
x0_realend
x0_realend[0]
x0_realend[0].tolist()
x0_end = odeint(model2,x0_realend[0].tolist(),t[20:],args=(params))
for i in range(len(x0_realend)):
    w.append(math.isclose(x0_realend[i][0],x0_end[i][0],abs_tol=0.001))
    
w=[]
for i in range(len(x0_realend)):
    w.append(math.isclose(x0_realend[i][0],x0_end[i][0],abs_tol=0.001))
    
w
x0_realend
x0_end
odeint?
array?
a = np.array()
a = np.array(1)
a
a = np.empty(0)
a
x[0]
x0
x0[0]
x0[-1].tolist()
rand(0)
rand(1)
rand(1).int
rand(1).int()
rand(1).toint()
int(rand(1))
float(rand(1))
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
ode_rand(1,[4,4],params)
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
ode_rand(1,[4,4],params)
del a
a = np.empty(0)
a
b = np.zeros(1)
b
a+b
(a+b).shape()
(a+b).shape
size(b)
np.size(b)
np.size(a)
np.size(a+b)
np.size(a++b)
np.size(+b)
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
ode_rand(1,[4,4],params)
a = [1,2,3]
a = np.array(a)
a
b = [4,5,6]
b = np.array(b)
a
b
a+b
c = np.append(a)
a
b
c = np.concatenate(a,b)
c = np.concatenate((a,b))
c
del c
c = np.empty(0)
c
c = np.concatenate((a,c))
c
c = np.concatenate((a,c))
c
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
ode_rand(1,[4,4],params)
c
del c
c = np.empty(0,0)
c = np.empty(1)
c
c = np.empty(2)
c
c = np.zeros(2,2)
c = np.empty([2,2])
c
np.empty?
c = np.empty((2,2))
c
c = np.empty((0))
c
np.size(c)
x0
s = []
s.append(x0)
s
s.size
size(s)
len(s)
np.shape(s)
a
b
c = np.append(a,b)
c
x0
x0_start
c = np.append(x0_start, x0_end)
c
c = np.append(x0_start, x0_end, axis=0)
c
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
ode_rand(1,[4,4],params)
odeint(model2,state0,t,args=(params))
t
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
odeint(model2,state0,t,args=(params))
q = odeint(model2,state0,t,args=(params))
plt.plot(q[:,0])
ode_rand(1,[4,4],params)
np.append?
a
b
c = np.empty(0)
c
np.append(a,c)
np.append(c,a)
ab=np.append(a,b,axis=0)
ab
ab=np.append(a,b)
ab
ab=np.append(a,b,axis=1)
ab=np.hstack((a,b))
ab
q = np.array([[]])
q
np.shape(x0)
q = np.array([[]*10])
q
q = np.array([[],[]])
q
a1 = [1,2]
b1 = [3,4]
np.concatenate(a1,b1)
c1 = [[1,2],[3,4]]
c1
np.shape(c1)
np.array(c1)
np.array([],[]))
np.array([],[])
q = [[],[]]
np.array(q)
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
ode_rand(1,[4,4],params)
odeint(model2,state0,t,args=(params))
solutions = np.array([[],[]])
solutions = np.append(odeint(model2,state0,t,args=(params)) )
solutions = np.append(odeint(model2,state0,t,args=(params)))
solutions = np.array([[],[]])
q = odeint(model2,state0,t,args=(params))
q
solutions = np.append(solutions, q)
solutions
solutions = np.append(solutions, q, axis=0)
solutions = np.append(q,solutions)
solutions
np.shape(solutions)
np.shape(x0)
np.zeros(30,2)
np.zeros((30,2))
z=np.zeros((30,2))
solutions = np.empty(shape=[0,2])
solutions
s = solutions
s = np.append(s, np.ones(4,2))
s = np.append(s, np.ones((4,2)))
s
np.ones((4,2))
s = np.append(s, np.ones((4,2)), axis=0)
s
s = np.empty(shape=[0,2])
s
s = np.concatenate(s,s)
s = np.concatenate(s,np.zeros((3,2)))
s = np.empty(shape=[0,2])
s
np.append(s,x0)
np.append(s,x0, axis=1)
np.append(s,x0, axis=0)
s = np.append(s,x0, axis=0)
s
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
ode_rand(1,[4,4],params)
ode_rand(1,[4,4],params)[-1]
ode_rand(1,[4,4],params)[-1].tolist()
ode_rand(2,[4,4],params)
ode_rand(4,[4,4],params)
x = ode_rand(4,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(100,[4,4],params)
plt.plot(x[:,0])
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
x = ode_rand(1,[4,4],params)
x
t
plt.plot(x[:,0])
x = ode_rand(1,[4,4],params)
plt.plot(x[:,0])
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
x = ode_rand(1,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(100,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(1000,[4,4],params)
plt.plot(x[:,0])
x0
x = ode_rand(1000,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(4,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(4,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(4,[4,4],params)
plt.plot(x[:,0])
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
x = ode_rand(4,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(4,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(40,[4,4],params)
plt.plot(x[:,0])
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
x = ode_rand(40,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(3,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(5,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(7,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(10,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(20,[4,4],params)
plt.plot(x[:,0])
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
x = ode_rand(20,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(100,[4,4],params)
plt.plot(x[:,0])
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
x = ode_rand(100,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(10000,[4,4],params)
plt.plot(x[:,0])
x = ode_rand(1000,[4,4],params)
plt.plot(x[:,0])
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
x = ode_rand(1000,[4,4],params,0.01)
plt.plot(x[:,0])
x = ode_rand(1000,[4,4],params,0.1)
plt.plot(x[:,0])
x = ode_rand(1000,[4,4],params,0.2)
plt.plot(x[:,0])
x = ode_rand(1000,[4,4],params,0.5)
plt.plot(x[:,0])
x = ode_rand(1000,[4,4],params,1)
plt.plot(x[:,0])
x = ode_rand(1000,[4,4],params,3)
plt.plot(x[:,0])
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
plt.figure(figsize=(14,5))

plt.plot(sol[:,0], label='E from 0.01*(st.norm.distr.)')
plt.plot(sol2[:,0], label='E from 0.05*(st.norm.distr.)')
plt.plot(sol2[:,0], label='E from 0.1*(st.norm.distr.)')
plt.plot(sol2[:,0], label='E from 0.2*(st.norm.distr.)')

plt.legend()
plt.show()

runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
plt.plot(sol[:,0], label='E from 0.01*(st.norm.distr.)')
plt.plot(sol2[:,0], label='E from 0.01*(st.norm.distr.)')
plt.plot(sol3[:,0], label='E from 0.01*(st.norm.distr.)')
plt.plot(sol4[:,0], label='E from 0.01*(st.norm.distr.)')
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
plt.figure(figsize=(17,8))

#plt.plot(sol[:,0], label='E from 0.01*(st.norm.distr.)')
plt.plot(sol2[:,0], label='E from 0.05*(st.norm.distr.)')
plt.plot(sol3[:,0], label='E from 0.1*(st.norm.distr.)')
#plt.plot(sol4[:,0], label='E from 0.2*(st.norm.distr.)')
plt.plot(sol5[:,0], label='E from 0.5*(st.norm.distr.)')


plt.legend()

#Running average
# x - data, N - window size, N2 - number of runs (if N2=0 - 1 run, if N2=1 - 2 runs etc.)
def running_mean(x, N,N2=0):
    if N2==0:
        cumsum = np.cumsum(np.insert(x, 0, 0)) 
        return (cumsum[N:] - cumsum[:-N]) / float(N)
    else:
        cumsum = np.cumsum(np.insert(x, 0, 0)) 
        return running_mean(((cumsum[N:] - cumsum[:-N]) / float(N)),N,N2-1)
    
plt.plot(running_mean(sol5,5))
plt.figure(figsize=(17,8))
plt.plot(running_mean(sol5,5))

plt.figure(figsize=(17,8))
plt.plot(running_mean(sol5,10))

plt.figure(figsize=(17,8))
plt.plot(running_mean(sol5,50))

plt.figure(figsize=(17,8))
plt.plot(running_mean(sol5,50,3))

plt.figure(figsize=(17,8))
plt.plot(running_mean(sol5,100,2))

plt.figure(figsize=(17,8))
plt.plot(running_mean(sol5,100))

plt.figure(figsize=(17,8))
plt.plot(running_mean(sol5,150))

plt.figure(figsize=(17,8))
plt.plot(running_mean(sol5,150,1))

plt.figure(figsize=(17,8))

#plt.plot(sol[:,0], label='E from 0.01*(st.norm.distr.)')
plt.plot(sol2[:,0], label='E from 0.05*(st.norm.distr.)')
plt.plot(sol3[:,0], label='E from 0.1*(st.norm.distr.)')
#plt.plot(sol4[:,0], label='E from 0.2*(st.norm.distr.)')
plt.plot(running_mean(sol5[:,0],50), label='E from 0.5*(st.norm.distr.)')


plt.legend()

plt.figure(figsize=(17,8))

#plt.plot(sol[:,0], label='E from 0.01*(st.norm.distr.)')
plt.plot(sol2[:,0], label='E from 0.05*(st.norm.distr.)')
plt.plot(sol3[:,0], label='E from 0.1*(st.norm.distr.)')
#plt.plot(sol4[:,0], label='E from 0.2*(st.norm.distr.)')
plt.plot(running_mean(sol5[:,0],100), label='E from 0.5*(st.norm.distr.)')


plt.legend()

plt.figure(figsize=(17,8))

#plt.plot(sol[:,0], label='E from 0.01*(st.norm.distr.)')
plt.plot(sol2[:,0], label='E from 0.05*(st.norm.distr.)')
plt.plot(sol3[:,0], label='E from 0.1*(st.norm.distr.)')
#plt.plot(sol4[:,0], label='E from 0.2*(st.norm.distr.)')
plt.plot(running_mean(sol5[:,0],100,1), label='E from 0.5*(st.norm.distr.)')


plt.legend()

runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')

## ---(Thu Apr 12 12:12:00 2018)---
runfile('/home/kalashnikov/Code/Stochastic_method.py', wdir='/home/kalashnikov/Code')
sol6 = ode_rand(500,np.linspace(0,0.5,5),[4,4],params, 0.05)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(500,np.linspace(0,1,10),[4,4],params,0.05)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(500,np.linspace(0,1,5),[4,4],params,0.05)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(500,np.linspace(0,1,3),[4,4],params,0.05)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(500,np.linspace(0,1,1),[4,4],params,0.05)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(500,np.linspace(0,1,2),[4,4],params,0.05)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(100,np.linspace(0,1,2),[4,4],params,0.05)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(100,np.linspace(0,0.5,2),[4,4],params,0.05)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(1000,np.linspace(0,0.5,2),[4,4],params,0.05)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(1000,np.linspace(0,0.1,2),[4,4],params,0.05)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(1000,np.linspace(0,0.1,2),[4,4],params,0.1)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(1000,np.linspace(0,0.1,2),[4,4],params,0.5)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(500,np.linspace(0,0.01,2),[4,4],params,0.5)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(1500,np.linspace(0,0.01,2),[4,4],params,0.5)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(15000,np.linspace(0,0.01,10),[4,4],params,0.5)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])
plt.xlim(-20,80000)

plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])
plt.xlim(-120,80000)

plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])
plt.xlim(-1200,50000)

sol6 = ode_rand(15000,np.linspace(0,0.05,10),[4,4],params,0.5)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(1500,np.linspace(0,0.05,10),[4,4],params,0.5)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(1500,np.linspace(0,0.05,10),[4,4],params,1)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(1500,np.linspace(0,0.02,10),[4,4],params,1)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(15000,np.linspace(0,0.03,10),[4,4],params,1)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])

sol6 = ode_rand(15000,np.linspace(0,1,100),[4,4],params,1)
plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])


plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])
plt.xlim(-1000,100000)


plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])
plt.xlim(-1000,10000)


plt.figure(figsize=(19,8))
plt.plot(sol6[:,0])
plt.xlim(-1000,2000)

clear
model2?
model2 ([[]],t,0.5,1,0.27,0.5)
model2 ([[0,0]],t,0.5,1,0.27,0.5)
model2 ([0,0],t,0.5,1,0.27,0.5)
model2 ([1,1],t,0.5,1,0.27,0.5)
model2 ([4,4],t,0.5,1,0.27,0.5)
runfile('/home/kalashnikov/Code/CoupledPoincare.py', wdir='/home/kalashnikov/Code')
[4,4]*2
[[4,4]]*2
runfile('/home/kalashnikov/Code/CoupledPoincare.py', wdir='/home/kalashnikov/Code')
a = [[4,4]]*2
a
a[0]
a[0][0]
runfile('/home/kalashnikov/Code/CoupledPoincare.py', wdir='/home/kalashnikov/Code')
x1
n = 4
for i in range(n):
    
x = []
y = []
for i in range(n):
    x[i] = vector[i*2]
vector = [1,2,3,4,5,6,7,8,9,10]
for i in range(n):
    x[i] = vector[i*2]
    y[i] = vector[i*2 + 1]
    
a = np.array(2)
a
a[0]
a = np.array([1,2,3])
a
a.tolist()
x,y = np.zeros(n).tolist()
y = np.zeros(n).tolist()
y
numOsc = n
x= np.zeros(numOsc).tolist() # Maybe one can handle it using just arrays or just lists, I am just lazy enough not to check it
        y= np.zeros(numOsc).tolist()
        for i in range(numOsc):
            x[i] = vector[i*2]
            y[i] = vector[i*2+1]
x= np.zeros(numOsc).tolist() # Maybe one can handle it using just arrays or just lists, I am just lazy enough not to check it
y= np.zeros(numOsc).tolist()
for i in range(numOsc):
    x[i] = vector[i*2]
    y[i] = vector[i*2+1]
    
x
y
odeint?
x1 = odeint(model2, state0,t,args = (params))
plt.plot(x1[:,0])
plt.plot(x1[:,0])
plt.plot(x2[:,0])

np.shape(x1)
plt.plot(x1[:,0])
plt.plot(x2[:,3])

plt.plot(x1[:,0])
plt.plot(x2[:,3)+1)
plt.plot(x1[:,0])
plt.plot(x2[:,3]+1)

plt.plot(x1[:,0])
plt.plot(x1[:,3]+1)

plt.plot(x1[:,0])
plt.plot(x1[:,3])

x1
x1[1:10]
plt.plot(x1[:,0])
plt.plot(x1[:,2])

x1 = odeint(model2, state0, t, args = ((0.1,1,(np.pi*2)/24, 0.5, 0)))
plt.plot(x1[:,0])

x1 = odeint(model2, state0, t, args = ((0.1,1,(np.pi*2)/24, 0.5, 0)))
plt.plot(x1[:,0])
plt.plot(x1[:,2])

x1 = odeint(model2, state0, t, args = ((0.1,1,(np.pi*2)/24, 0.5, 0)))
plt.figure(figsize=(17,7))
plt.plot(x1[:,0])
plt.plot(x1[:,2])

x1 = odeint(model2, state0, t, args = ((0.1,1,(np.pi*2)/24, 0.5, 0)))
plt.figure(figsize=(17,7))
plt.plot(x1[:,0], label = 'x coord of 1st osc')
plt.plot(x1[:,2], label = 'x coord of 2nd osc')

x1 = odeint(model2, state0, t, args = ((0.1,1,(np.pi*2)/24, 0.5, 0)))
plt.figure(figsize=(17,7))
plt.plot(x1[:,0], label = 'x coord of 1st osc')
plt.plot(x1[:,2], label = 'x coord of 2nd osc')
plt.lagend()

x1 = odeint(model2, state0, t, args = ((0.1,1,(np.pi*2)/24, 0.5, 0)))
plt.figure(figsize=(17,7))
plt.plot(x1[:,0], label = 'x coord of 1st osc')
plt.plot(x1[:,2], label = 'x coord of 2nd osc')
plt.legend()

x1 = odeint(model2, state0, t, args = ((0.1,1,(np.pi*2)/24, 0.5, 0)))
plt.figure(figsize=(15,6))
plt.plot(x1[:,0], label = 'x coord of 1st osc')
plt.plot(x1[:,2], label = 'x coord of 2nd osc')
plt.legend()

x1 = odeint(model2, state0, t, args = ((0.1,1,(np.pi*2)/24, 0.5, 0.1)))
plt.figure(figsize=(15,6))
plt.plot(x1[:,0], label = 'x coord of 1st osc')
plt.plot(x1[:,2], label = 'x coord of 2nd osc')
plt.legend()

x1 = odeint(model2, state0, t, args = ((0.1,1,(np.pi*2)/24, 0.5, 0.01)))
plt.figure(figsize=(15,6))
plt.plot(x1[:,0], label = 'x coord of 1st osc')
plt.plot(x1[:,2], label = 'x coord of 2nd osc')
plt.legend()

x1 = odeint(model2, state0, t, args = ((0.1,1,(np.pi*2)/24, 0.5, 0.05)))
plt.figure(figsize=(15,6))
plt.plot(x1[:,0], label = 'x coord of 1st osc')
plt.plot(x1[:,2], label = 'x coord of 2nd osc')
plt.legend()

runfile('/home/kalashnikov/Code/CoupledPoincare.py', wdir='/home/kalashnikov/Code')
plt.plot(np.mean([x1[:,0],x1[:,2]],axis=0))
runfile('/home/kalashnikov/Code/CoupledPoincare.py', wdir='/home/kalashnikov/Code')
xy=[]
for i in range(10):
    xy.append(vector[i])
    
xy

## ---(Fri Apr 13 13:16:22 2018)---
runfile('/home/kalashnikov/Code/CoupledPoincare.py', wdir='/home/kalashnikov/Code')
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
np.shape?
np.куshape?
np.reshape
np.reshape?
np.arange(6)
np.arange(6).reshape(2,3)
np.arange(6).reshape(3,2)
np.arange(6).reshape(:,2)
np.arange(6).reshape(3,2)
np.arange(6).reshape(3,2)[2]
np.arange(6).reshape(-1)
np.arange(6)
np.arange(6).reshape(3,2).reshape(-1)
a = np.arange(6).reshape(3,2)
a
a.ravel
a.ravel()
np.array([a,a])
a2 = np.array([a,a])
type(a2)
a2[0]
a2[1]
a2[1][0]
np.ravel(a2)
np.shape(a2)
np.shape(a2.ravel())
oscillator(1,2,[0,1,2,3],0.5,1,0.27,0.5,0)
oscillator(1,2,[0,1,2,3],2,0.5,1,0.27,0.5,0)
oscillator(1,2,[0,1,2,3],1,0.5,1,0.27,0.5,0)
oscillator(1,2,[0,1,2,3],0,0.5,1,0.27,0.5,0)
oscillator(x,y,t,i=0, alpha=0.5,A = 1,omega=0.27,twist=0.5,K=0)
oscillator(np.zeros(5),np.zeros(5),y,t,i=0, alpha=0.5,A = 1,omega=0.27,twist=0.5,K=0)
oscillator(np.zeros(5),np.zeros(5),t,i=0, alpha=0.5,A = 1,omega=0.27,twist=0.5,K=0)
oscillator(np.zeros(5),np.ones(5),t,i=0, alpha=0.5,A = 1,omega=0.27,twist=0.5,K=0)
oscillator(np.zeros(0),np.ones(0),t,i=0, alpha=0.5,A = 1,omega=0.27,twist=0.5,K=0)
oscillator(np.zeros(1),np.ones(1),t,i=0, alpha=0.5,A = 1,omega=0.27,twist=0.5,K=0)
state0
np.array(state0)
np.array(state0).reshape(-1)
np.array(state0).reshape(-1,2)
np.array(state0).reshape(2,-1)
np.array(state0).reshape(-,21)
np.array(state0).reshape(-1,2)
mat = np.array(state0).reshape(-1,2)
mat
mat[:,0]
mat.shape()
mat.shape
mat.shape[0]
np.zeros((n,2))
state0 = [1,1,2,2,4,4,6,6,8,8]
mat = np.array(state0).reshape(-1,2)
mat
mat.shape
mat[2]
mat[2,]
mat[2,1]
mat
mat[2][1] = 5
mat
mat[2,]
mat[2,1]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
[0.1]*10
[1]*2
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
rand
np.random.randn(1)
np.random.randn(2)
np.random.randn(2)[0]
np.random.randn(10).tolist()
10 + np.random.randn(1)[0]
[10 + np.random.randn(1)[0]]*10
for i in range(10):
    w[i] = 10+np.random.randn(1)[0]
    
for i in range(10):
    w[i] = 10+np.random.randn(1)[0]
    
w = []
for i in range(10):
    w[i] = 10+np.random.randn(1)[0]
    
w = []*10
for i in range(10):
    w[i] = 10+np.random.randn(1)[0]
    
w = []*10
w
w = [0]*1-
w = [0]*10
2
w
w = [0]*10
for i in range(10):
    w[i] = 10+np.random.randn(1)[0]
    
w
plt.hist(w)
w = [0]*1000
for i in range(1000):
    w[i] = 10+np.random.randn(1)[0]
    
plt.hist(w)
plt.hist(w, bins=100)
plt.hist(w, bins=50)
w = [0]*100000
for i in range(100000):
    w[i] = 10+np.random.randn(1)[0]
    
plt.hist(w, bins=50)
plt.hist(w, bins=100)
plt.hist(w, bins=1000)
plt.hist(w, bins=100)
[10+i for i in np.random.randn(10)]
omeg = [10+i for i in np.random.randn(10)]
type(omeg)
(np.pi*2)/24
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.figure(figsize=(20,8))
for i in range(n):
    plt.plot(x1[1500:, 2*i], label = 'x coord of {}st osc'.format(i))
plt.ylim(-2,5)
plt.legend()

plt.figure(figsize=(20,8))
for i in range(n):
    plt.plot(x1[1800:, 2*i], label = 'x coord of {}st osc'.format(i))
plt.ylim(-2,5)
plt.legend()

plt.figure(figsize=(20,8))
for i in range(n):
    plt.plot(x1[1890:, 2*i], label = 'x coord of {}st osc'.format(i))
plt.ylim(-2,5)
plt.legend()

plt.figure(figsize=(20,8))
for i in range(n):
    plt.plot(x1[1920:, 2*i], label = 'x coord of {}st osc'.format(i))
plt.ylim(-2,5)
plt.legend()

plt.figure(figsize=(20,8))
for i in range(n):
    plt.plot(x1[1940:, 2*i], label = 'x coord of {}st osc'.format(i))
plt.ylim(-2,5)
plt.legend()

plt.figure(figsize=(20,8))
for i in range(n):
    plt.plot(x1[:100, 2*i], label = 'x coord of {}st osc'.format(i))
plt.ylim(-2,5)
plt.legend()

runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
x1[:,0]
np.shape(x1[:,0])
np.mean(x1, axis=0)
np.mean(x1, axis=1)
np.mean(x1, axis=0)
np.mean(x1, axis=1)
np.mean(x1, axis=2)
plt.plot(np.mean(x1, axis=1))
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.figure(figsize=(20,8))
for i in range(n):
    plt.plot(x1[750:1250, 2*i], label = 'x coord of {}st osc'.format(i))
plt.plot(np.mean(x1, axis=1), 'o', label = 'mean')
plt.ylim(-2,5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))
for i in range(n):
    plt.plot(x1[750:1250, 2*i], label = 'x coord of {}st osc'.format(i))
plt.plot(np.mean(x1[750:1250], axis=1), 'o', label = 'mean')
plt.ylim(-2,5)
plt.legend()
plt.show()    

plt.figure(figsize=(20,8))
plt.plot(np.mean(x1[750:1250], axis=1), 'o', label = 'mean')
plt.ylim(-2,5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot(np.mean(x1[0:1250], axis=1), 'o', label = 'mean')
plt.ylim(-2,5)
plt.legend()
plt.show()

runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.figure(figsize=(20,8))
for i in range(n):
    plt.plot(x1[6000:8000, 2*i], label = 'x coord of {}st osc'.format(i))
plt.plot(np.mean(x1[6000:8000], axis=1), 'o', label = 'mean')
plt.ylim(-2,5)
plt.legend()
plt.show()

plt.plot(np.var(x1,axis=1))
plt.plot(np.var(x1,axis=0))
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
np.shape(onlyX)
onlyX[0]
onlyX[1]
onlyX[2]
onlyX[3]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
np.shape(x1)
x1[0]
x1[:,0]
x1[:,1]
x1[:,2]
np.var(x1)
np.var(x1[:,0])
np.var(x1, 0)
np.var(x1, 1)
np.shape(np.var(x1, 1))
plt.plot(np.var(x1, 1))
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1 = odeint(oscillator_system, state0, t, args = ([0.1]*10,[1]*10,omeg,[0.1]*10,[0.05]*10))
x2 = odeint(oscillator_system, state0, t, args = ([0.1]*10,[1]*10,omeg,[0.1]*10,[0.08]*10))
x3 = odeint(oscillator_system, state0, t, args = ([0.1]*10,[1]*10,omeg,[0.1]*10,[0.01]*10))
x4 = odeint(oscillator_system, state0, t, args = ([0.1]*10,[1]*10,omeg,[0.1]*10,[0.1]*10))
x5 = odeint(oscillator_system, state0, t, args = ([0.1]*10,[1]*10,omeg,[0.1]*10,[0.2]*10))
for i in [x1,x2,x3,x4,x5]:
    plt.plot(np.var(i,axis=1), label = 'variance of {}th simulation'.format(i))
plt.legend()

for i in [x1,x2,x3,x4,x5]:
    plt.plot(np.var(i,axis=1), label = 'variance of th simulation')
plt.legend()

for i in [x1,x3,x5]:
    plt.plot(np.var(i,axis=1), label = 'variance of th simulation')
plt.legend()

for i in [x1,x3,x5]:
    plt.plot(np.var(i[200:600],axis=1), label = 'variance of th simulation')
plt.legend()
    


for i in [x3,x4,x5]:
    plt.plot(np.var(i[200:600],axis=1), label = 'variance of th simulation')
plt.legend()

for i in [x3,x4,x5]:
    plt.plot(np.var(i[0:200],axis=1), label = 'variance of th simulation')
plt.legend()

for i in [x3,x4,x5]:
    plt.plot(np.var(i[0:300],axis=1), label = 'variance of th simulation')
plt.legend()

clear
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
x
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
x.shape
np.shape(x)
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
np.shape(x)
anls
anls[0]
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
anls[0]
anls['mins']
anls[0]['mins']
anls[0]['maxs']
anls[0]['zeroCross']
anls[0]['zeroCrossTime']
anls[0]['zeroCrossT']
anls[0]['extrT']
phases = anls[0]['extrT']+anls[0]['zeroCrossT']
anls[0]['extrT']
anls[0]['zeroCrossT']
phases = anls[0]['extrT']+anls[0]['zeroCrossT'].tolist()
phases
phases.sort()
phases
plt.plot(t, x[0][:,0], label = 'oscillator')
plt.plot(phases, [0]*len(phases), label = '0-crossings and extrema')
plt.legend()

plt.plot(t, x[0][:,0], label = 'oscillator')
plt.plot(phases, [0]*len(phases), 'o', label = '0-crossings and extrema')
plt.legend()

plt.figure (figsize = (20,12))
plt.plot(t, x[0][:,0], label = 'oscillator')
plt.plot(phases, [0]*len(phases), 'o', label = '0-crossings and extrema')
plt.legend()

runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
anls[0]['phases']
anls[0]
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
anls[0]
anls[0]['phases']
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
anls[0]['phases']
runfile('/home/kalashnikov/Code/PoincareOsc_only_method.py', wdir='/home/kalashnikov/Code')
anls[0]['phases']
anls[1]['phases']
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1[0]
x1[1]
x1[0]
x1[0][0]
x1[0][1]
x1[0][2]
x1[1]
x1[2]
x1[3]
x1[4]
x1[0]
x1[1]
x1[:,0]
x1[:,1]
np.shape(x1)
x1[:,0]
np.where(np.diff(np.sign(x1[:,i*2])))[0]
np.diff(np.sign(x1[:,i*2]))
temp = np.diff(np.sign(x1[:,i*2]))
temp = np.where(np.diff(np.sign(x1[:,i*2])))[0]
type(x1)
for i in range(10):
    zeroCrossInd[i] = np.where(np.diff(np.sign(solutions[:,i*2])))[0]
    
for i in range(10):
    zeroCrossInd[i] = np.where(np.diff(np.sign(x1[:,i*2])))[0]
    
zeroCrossInd = []
for i in range(10):
    zeroCrossInd[i] = np.where(np.diff(np.sign(x1[:,i*2])))[0]
    
zeroCrossInd = []
for i in range(10):
    zeroCrossInd.append (np.where(np.diff(np.sign(x1[:,i*2])))[0])
    
zeroCrossInd
zeroCrossInd[0]
zeroCrossInd[1]
zeroCrossInd[2]
zeroCrossInd
zeroCrossInd[0]
x1[:,0][zeroCrossInd[0]]
x1[:,0][zeroCrossInd[0][0]]
x1[:,0][zeroCrossInd[0][1]]
x1[:,0][1]
x1[:,0]
x1[:,0][zeroCrossInd,0]
x1[:,0][zeroCrossInd[0]]
x1[:,0][zeroCrossInd[0]+1]
(x1[:,0][zeroCrossInd[0]]+x1[:,0][zeroCrossInd[0]+1])/2
(0.04170186+-0.17232156)/2
((0.04170186+-0.17232156)/2)*100
t[zeroCrossInd[0]]
x1[:,0]
np.diff(x1[:,0])
np.diff(np.sign(np.diff(x1[:,0])))
temp = np.diff(np.sign(np.diff(x1[:,0])))
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
analysis(x1)
zeroCrossInd
zeroCrossInd[0]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
analysis(x1)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
analysis(x1)
x1[:,0][1]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
analysis(x1)
anls = analysis(x1)
np.shape(anls)
np.type(anls)
type(anls)
anls.keys()
anls['zeroCrossT']
anls['zeroCrossT'][0]
np.shape(anls['zeroCrossT'])
np.shape(anls['zeroCrossVal'])
np.shape(anls['period'])
anls['period'][0]
anls['period'][1]
anls['period'][2]
anls['period'][3]
anls['period'][4]
anls['period'][10]
anls['period'][9]
type(anls['extrT'])
type(anls['zeroCrossT'])
anls['extrT'][0]
anls['extrT']
len(anls['extrT'])
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
x1[1]
np.mean(x1[1])
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1[1]
[n for n*2 in x1[1]]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
analysis(x1)
clear
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
anls = analysis(x1)
anls['zeroCrossT'][0]
anls['extrT'][0]
anls['extrT']
np.diff(np.sign(np.diff(x1[:,0])))
len(np.diff(np.sign(np.diff(x1[:,0]))))
[[]]*2
a = [[]]*2
len(a)
len(a[0])
a[0].append(1)
a
a = [[]]*2
a[0]
a[0] = 0
a
a = []*10
a
a[1] = 1
a = [[]]*10
a
a[0] = [1,2,3]
a
a[0] = [1]
a
a[0] = 1
a
for i in range(3):
    a[1].append(i)
    
a
for i in range(3):
    a[2].append(i)
    
a
for i in range(3):
    a[0].append(i)
    
[np.mean(x1[:,0][j:j+2]) for j in range(len(diff)) if diff[j]!=0]
diff = [np.diff(np.sign(np.diff(x1[:,i*2]))) for i in range(n)]
diff
[np.mean(x1[:,0][j:j+2]) for j in range(len(diff)) if diff[j]!=0]
a
a = [[0]]*10
a
a[0]
a[0][0]
a[0].append(1)
a
a[0].append('1')
a[0]
a
a[0].append([0])
a
type(a[0])
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
anls2 = analysis(x1)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
anls2 = analysis(x1)
anls2.keys()
np.diff(anls2['extrT'][0])
np.diff(anls2['extrT'][1])
np.diff(anls2['extrT'][2])
np.diff(anls2['extrT'][3])
np.diff(anls2['extrT'])
anls2['extrT']
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
anls2['extrT']
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
anls2['extrT']
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
b = [np.mean(x1[:,i*2] for i in range(n)]]
[np.mean(x1[:,i*2]) for i in range(n)]
[np.mean(x1[:,i*2], axis=1) for i in range(n)]
[np.mean(x1[:,i*2], axis=0) for i in range(n)]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
anls2 = analysis(x1)
anls2['zeroCrossT']
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
anls3 = analysis(x1)
anls3
anls3['zeroCrossT']
anls2['zeroCrossT']
anls2['extrT']
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
anls2['phases']
anls2 = analysis(x1)
anls2['phases']
anls2['phases'][0]
anls2['phases'][1]
anls2['phases'][2]
np.diff([anls2['phases'][1],anls2['phases'][2]])
anls2['phases'][0]
anls2['zeroCrossT'][0]
anls2['extrT'][0]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
anls2 = analysis(x1)
anls2['extrT'][0]
anls2['phases'][0]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
anls2 = analysis(x1)
anls2['phases'][0]
plt.plot(x1[:,0], label='oscillator')
plt.plot(anls2['phases'][0], label = 'extrema and 0crossings')

plt.plot(x1[:,0], label='oscillator')
plt.plot(anls2['phases'][0],[0]*len(anls2['phases'][0]),'o', label = 'extrema and 0crossings')
plt.legend()

runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
anls2 = analysis(x1)
plt.plot(x1[:,0], label='oscillator')
plt.plot(anls2['phases'][0],[0]*len(anls2['phases'][0]),'o', label = 'extrema and 0crossings')
plt.legend()

plt.plot(t, x1[:,0], label='oscillator')
plt.plot(anls2['phases'][0],[0]*len(anls2['phases'][0]),'o', label = 'extrema and 0crossings')
plt.legend()

runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
anls2 = analysis(x1)
plt.plot(t, x1[:,0], label='oscillator')
plt.plot(anls2['phases'][0],[0]*len(anls2['phases'][0]),'o', label = 'extrema and 0crossings')
plt.legend()

anls2['phases'][0]
np.var(anls2['phases'],axis=0)
np.var(anls2['phases'],axis=1)
np.var(anls2['phases'],axis=0)
anls2['phases']
del anls3
ph = anls2['phases']
ph[0]
ph[1]
for i in range(10):
    print(len(ph[i]))
    
np.mean(ph)
np.mean(ph[0])
ph
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
als['phases']
ph = als['phases']
ph
np.mean(ph)
np.mean(ph, axis=0)
ph[5:8]
ph[5:9]
np.mean(ph[5:9])
np.mean(ph[5:9],axis=0)
ph[:,0]
ph
np.array(ph)
np.mean(np.array(ph))
par = np.array(ph)
par
par[0]
par[1]
type(par)
par[:,0]
for i in par:
    i = np.array(i)
    
par
par[0]
par[0] = np.array(par[0])
par[0]
for i in range(10)
for i in range(10):
    par[i] = np.array(par[i])
    
par
par[:,0]
np.shape(par)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
ph
np.mean(ph)
np.mean(ph, axis=0)
np.mean(ph, axis=1)
np.var(ph, axis=1)
v = np.var(ph, axis=1)
ph
plt.plot(ph[0], v)
v
v = np.var(ph, axis=0)
v
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
v = np.var(ph, axis=0)
ph
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
v = np.var(ph, axis=0)
v
plt.plot(ph[0],v)
ph
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
m = min([len(i) for i in ph])
m
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
minlen
ph2 = [i[0:minlen-1] for i in ph]
ph2
np.var(minph, axis=0)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
ph[0]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
ph[0]
ph[1]
diff(ph[0:1])
np.diff(ph[0:1])
ph
ph[0]
ph[1]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
ph[0]
ph[1]
ph[2]
len(x1)
n
np.diff(ph)
np.diff(ph[:])
for i in ph:
    print (len(i))
    
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
np.diff(zc)
zc[0]
zc[1]
zc
min(zc)
min?
min(zc, key=len)
len(min(zc, key=len))
zc+ext
a = zc+ext
zc
np.diff(zc[:,0])
zc[:,0]
zc[0]
zc[:,0]
zc[,0]
zc[0,:]
type(zc)
np.array(zc)
np.array(zc)[:,0]
np.diff(zc, axis=0)
type(zc)
np.shape(np.diff(zc, axis=0))
d = np.diff(zc, axis=0)
d[0]
d[:,0]
np.shape(d)
d
d[1][2]
np.zeros(3,2)
np.zeros((3,2))
np.diff(zc[0])
np.diff(ext[0])
p = np.zeros((3,2))
p.append('1')
p.npappend('1')
np.shape(zc)
zc[0]
zc
ext[0]
ext[0]+zc[0]
ext[0]+zc[0,0:3]
zc
zc[0]
zc[0][1]
minlen(zc)
minlen?

def mlen(x):
    return len(min(x,key=len))

mlen(zc)
mlen(ext)
mlen(ext+zc)
zc
zc[0][1]
zc[0][2]
zc[0][3]
zc[0][0]
zc[1][0]
zcdif = np.diff(zc,axis=0)
phases = np.zeros((n,mlen(zc)+mlen(ext)))

for i in range(np.shape(zcdif[0])):
    for j in range(np.shape(zcdif[1])):
        if zcdif[i][j]<=12:
            phases[i][j]=zc[i][j]
        else:
            phases[i][j]=zc[i][j+1]
            
zcdif = np.diff(zc,axis=0)
phases = np.zeros((n,mlen(zc)+mlen(ext)))

for i in range(np.shape(zcdif)[0]):
    for j in range(np.shape(zcdif[1])):
        if zcdif[i][j]<=12:
            phases[i][j]=zc[i][j]
        else:
            phases[i][j]=zc[i][j+1]
            
zcdif = np.diff(zc,axis=0)
phases = np.zeros((n,mlen(zc)+mlen(ext)))

for i in range(np.shape(zcdif)[0]):
    for j in range(np.shape(zcdif)[1]):
        if zcdif[i][j]<=12:
            phases[i][j]=zc[i][j]
        else:
            phases[i][j]=zc[i][j+1]
            
phases
runfile('/home/kalashnikov/Code/n_coupled_oscillators TESTING.py', wdir='/home/kalashnikov/Code')
zc
zc[0]
zc[0:1]
zc[:2]
mlen(zc)
runfile('/home/kalashnikov/Code/n_coupled_oscillators TESTING.py', wdir='/home/kalashnikov/Code')
np.diff(zc[:,mlen(zc)])
np.diff(zc[:,0:mlen(zc)])
np.diff(zc[:][0:mlen(zc)])
mlen(zc)
zc[0][0:82]
zc[0][0:83]
zc[0][0:84]
zc[0][0:85]
zc[0][0:100]
zc[0][0:82]
zc[0][0:81]
zc[0]
zc[0][0]
zc[0][0:3]
zc[0][0:80]
zc[0][0:79]
zc1 = zc[:][0:78]
zc1 = zc[:][0:30]
zc1 = zc[:,0:30]
zc1 = np.zeros((np.shape(zc)))

for i in zc:
    zc1[0] = zc[0][0:mlen(zc)]
    
zc1 = zc

for i in zc:
    zc1[0] = zc[0][0:mlen(zc)]
    
zc1[0]
zc1 = zc

for i in range(len(zc)):
    zc1[i] = zc[i][0:mlen(zc)]
    
x1
len(x1)
type(x1)
x1[0]
x1[:,0]
clear
np.shape(x1)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
x1[:,0]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1[:,0]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
clear
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
hilbert(x1[:,0])
cmath?
import cmath
cmath?
clear
sigma?
runfile('/home/kalashnikov/Code/n_coupled_oscillators generating pictures.py', wdir='/home/kalashnikov/Code')
sigma=2
omeg
sigma=100
omeg
runfile('/home/kalashnikov/Code/n_coupled_oscillators generating pictures.py', wdir='/home/kalashnikov/Code')
sigma=1000
omeg
plt.xlabel?
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
clear
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
CLEAR
clear
x1
x1[0]
x1[:,0]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
clear
x1
x1[:,0]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
clear
x1
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
np.mean(x1, axis=1)
x1[:,0]
x1[:,2]
[x1[:,i*2] for i in range(n)] 
xc=[x1[:,i*2] for i in range(n)]
type(xc)
xc[0]
xc[1]
x1[:,0]+x1[:,2]
np.concatenate(x1[:,0],x1[:,2])
np.concatenate((x1[:,0],x1[:,2]))
xc1=np.concatenate((x1[:,0],x1[:,2]))
type(xc1)
xc1[0]
xc1
xc1[1]
xc1[:,0]
xc1[5]
del xc1
clear
x1
xc = [x[:,i*2] for i in range(n)]
clear
x1
xc = [x1[:,i*2] for i in range(n)]
np.mean(xc,axis=0)
xc
xc = [x1[:,i*2 +1] for i in range(n)]
xc
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
n = 100 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n

omeg = [(np.pi*2)/(24 + sigma*i) for i in np.random.randn(n)]
params = ([0.1]*n,[1]*n,omeg,[0.0]*n,[0.0]*n)
x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))


plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1,axis=1), label = 'sigma=0.5')
plt.plot (t, np.mean(x2,axis=1), label = 'sigma=1')
plt.plot (t, np.mean(x3,axis=1), label = 'sigma=1.5')
plt.plot (t, np.mean(x4,axis=1), label = 'sigma=2')
plt.xlabel
plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

n = 100 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n

params = ([0.1]*n,[1]*n,omeg,[0.0]*n,[0.0]*n)
x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))


plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1,axis=1), label = 'sigma=0.5')
plt.plot (t, np.mean(x2,axis=1), label = 'sigma=1')
plt.plot (t, np.mean(x3,axis=1), label = 'sigma=1.5')
plt.plot (t, np.mean(x4,axis=1), label = 'sigma=2')
plt.xlabel
plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1,axis=1), label = 'sigma=0.5')
plt.plot (t, np.mean(x2,axis=1), label = 'sigma=1')
plt.plot (t, np.mean(x3,axis=1), label = 'sigma=1.5')
plt.plot (t, np.mean(x4,axis=1), label = 'sigma=2')
plt.xlabel ('Mean of 100 oscillators')
plt.ylabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1,axis=1), label = 'sigma=0.5')
plt.plot (t, np.mean(x2,axis=1), label = 'sigma=1')
plt.plot (t, np.mean(x3,axis=1), label = 'sigma=1.5')
plt.plot (t, np.mean(x4,axis=1), label = 'sigma=2')
plt.ylabel ('Mean of 100 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

q = [x1,x2,x3]

## ---(Mon Apr 23 14:23:17 2018)---
from scipy.integrate import odeint
#from scipy.signal import hilbert
import numpy as np
import matplotlib.pyplot as plt

def oscillator(x, y, t, i, alpha, A, omega, twist, K): 
    # It takes x and y (as well as parameters) as vectors, then throws out dx/dt and dy/dt for every respective value
    x1 = x[i]
    y1 = y[i]

    alpha1 = alpha[i]
    A1 = A[i]
    omega1 = omega[i]
    twist1=twist[i]
    K1 = K[i]

    dx1dt = x1*alpha1*(A1-np.sqrt(x1**2 + y1**2)) - y1*(omega1 + twist1*(A1 - np.sqrt(x1**2 + y1**2))) + K1*(np.mean(x))
    dy1dt = y1*alpha1*(A1-np.sqrt(x1**2 + y1**2)) + x1*(omega1 + twist1*(A1 - np.sqrt(x1**2 + y1**2)))

    return dx1dt, dy1dt


# Solver of ODEs
def oscillator_system(state_vector, t, alpha, A, omega, twist, K):

    # It takes initial conditions as a list in form [x1,y1,x2,y2,x3,y3,x4,y4,...], 
    # where x1,y1 are initial conditions for the 1st oscillator
    # And converts it into array with 2 columns
    state_mat = np.array(state_vector).reshape(-1, 2)

    # Then we take only the 1st and only the 2nd column and put them into separate variables
    x = state_mat[:, 0]
    y = state_mat[:, 1]

    #n being the number of rows in state_map; in other words - number of sets of initial conditions, number of oscillators
    n = state_mat.shape[0]
    # Let's produce an array of the same shape as state_map
    dzdt = np.zeros((n, 2))

    #For every i-th row of state_map let's put there dx1/dt, dy1/dt 
    for i in range(n):
        dzdt[i, ] = oscillator(x, y, t, i, alpha, A, omega, twist, K)

    return dzdt.reshape(-1).tolist()



def analysis (solutions):
    zeroCrossInd = []
    zeroCrossVal = []
    zeroCrossT = []
    period = []
    extrVal = [[] for _ in range(n)] # Let's create n different empty lists
    extrT = [[] for _ in range(n)]
    phases=[]

    for i in range(n):
        zeroCrossInd.append(np.where(np.diff(np.sign(solutions[:,i*2])))[0])
        # Going through only even columns of solutions array (which contain the x-coordinates)
        # The crossing happens between indices in zeroCrossInd and next one. E.g., zeroCrossInd[0][0] (the 0th index for the 1st oscillator) is 5, meaning that 0 is somewhere between 5th and 6th timepoint.

        # the values themselves, should be really close to 0
        zeroCrossVal.append((solutions[:,i*2][zeroCrossInd[i]] + solutions[:,i*2][zeroCrossInd[i]+1])/2)


        #the approximate times of actual crossings
        zeroCrossT.append( (t[zeroCrossInd[i]]+t[zeroCrossInd[i]+1])/2 ) # takes the time in between two x-values of opposing signs

        period.append( np.diff(zeroCrossT[i]) )

        # Looking for local maxima, minima
        # When result of np.diff() changes the sign - it's when the max of min occured 
        # diff changes it's meaning after every iteration
        diff = np.diff(np.sign(np.diff(solutions[:,i*2])))
        for j in range(len(diff)):
            if diff[j]!=0:
                extrVal[i].append( (np.mean(solutions[:,i*2][j:j+2])) )
                extrT[i].append( (np.mean(t[j:j+2])) )

        # Phases are just all the time-points of zero-crossings, minima and maxima
        phases.append(zeroCrossT[i].tolist()+extrT[i]) 
        phases[i].sort()

    return { "zeroCrossInd":zeroCrossInd, "zeroCrossVal":zeroCrossVal, 
            "zeroCrossT":zeroCrossT, "period":period, 
            "extrVal":extrVal, "extrT":extrT, "phases":phases}





oscillator?
oscillator_system?
analysis?
n = 100 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n

params = ([0.1]*n,[1]*n,omeg,[0.0]*n,[0.0]*n)
x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

x1x=[x1[:,i*2] for i in range(n)] # Only x-coordinate
x2x=[x2[:,i*2] for i in range(n)] # Only x-coordinate
x3x=[x3[:,i*2] for i in range(n)] # Only x-coordinate
x4x=[x4[:,i*2] for i in range(n)] # Only x-coordinate

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0), label = 'sigma=2')
plt.ylabel ('Mean of 100 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

n = 100 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n

x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

x1x=[x1[:,i*2] for i in range(n)] # Only x-coordinate
x2x=[x2[:,i*2] for i in range(n)] # Only x-coordinate
x3x=[x3[:,i*2] for i in range(n)] # Only x-coordinate
x4x=[x4[:,i*2] for i in range(n)] # Only x-coordinate

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0), label = 'sigma=2')
plt.ylabel ('Mean of 100 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0), label = 'sigma=2')
plt.ylabel ('Mean of x-coordinate of 100 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

x1[0]
x1[:,0]
len(x1)
np.shape(x1)
n=4 # Number of oscillators
t = np.linspace(0, 30, 30)
state0 = [2,2]*n # Initial conditions

omeg = [(np.pi*2)/(24+i) for i in np.random.randn(n)]
params = ([0.1]*n,[1]*n,omeg,[0.1]*n,[0.01]*n) # alpha (amplitude-relaxation rate), amplitude, omega (angular speed), twist, K (coupling strength)

# Solving ODEs
x1 = odeint(oscillator_system, state0, t, args = (params))

x1
x1[:,0]
x1x=[x1[:,i*2] for i in range(n)] # Only x-coordinate
np.var(x1x, axis=0)
x1x
n=4 # Number of oscillators
t = np.linspace(0, 5, 5)
state0 = [2,2]*n # Initial conditions

omeg = [(np.pi*2)/(24+i) for i in np.random.randn(n)]
params = ([0.1]*n,[1]*n,omeg,[0.1]*n,[0.01]*n) # alpha (amplitude-relaxation rate), amplitude, omega (angular speed), twist, K (coupling strength)

# Solving ODEs
x1 = odeint(oscillator_system, state0, t, args = (params))
x1x=[x1[:,i*2] for i in range(n)] # Only x-coordinate

x1x
np.var(x1x, axis=0)
clear
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
np.polar?
import cmath
cmath?
cmath.?
del cmath
cmath?
def cart2pol(x, y):
    theta = np.arctan2(y, x)
    rho = np.hypot(x, y)
    return theta, rho

x1
cart2pol(x1[:,0],x1[:,1])
x1[:,0]
x1[:,1]
cart2pol(x1[:,0],x1[:,1])
theta,rho = cart2pol(x1[:,0],x1[:,1])
theta
rho
x1x
x1y
plt.plot(x1x,x1y)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.plot(x1x,x1y)
n=2 # Number of oscillators
t = np.linspace(0, 100, 1000)
state0 = [2,2]*n # Initial conditions

omeg = [(np.pi*2)/(24+i) for i in np.random.randn(n)]
params = ([0.1]*n,[1]*n,omeg,[0.1]*n,[0.01]*n) # alpha (amplitude-relaxation rate), amplitude, omega (angular speed), twist, K (coupling strength)

# Solving ODEs
x1 = odeint(oscillator_system, state0, t, args = (params))
x1x=[x1[:,i*2] for i in range(n)] # Only x-coordinate
x1y = [x1[:,(i*2)+1] for i in range(n)] # Only y-coordinate

# Analysis of ODEs
als = analysis(x1)

plt.plot(x1x,x1y)
clear
x1x
np.shape(x1x)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1x
plt.plot(x1x[0],x1y[0])
x1
x11pol = cart2pol(x1[:,0],x1[:,1])
x11pol
plt.plot(x11pol[0],x11pol[1])
cart2pol(12,5)
np.rad2deg(0.3947)
np.rad2deg(x11pol[0])
x1
[cart2pol(x1[:,i*2],x1[:,i*2 +1]) for i in range(n)]
[cart2pol(np.rad2deg(x1[:,i*2]),x1[:,i*2 +1]) for i in range(n)]
[cart2pol(x1[:,i*2]),x1[:,i*2 +1]) for i in range(n)]
[cart2pol(x1[:,i*2],x1[:,i*2 +1]) for i in range(n)]
q = [cart2pol(x1[:,i*2],x1[:,i*2 +1]) for i in range(n)]
q[0]
q[1]
q[0][0]
np.ra2deg(q[0][0])
np.rad2deg(q[0][0])
np.rad2deg(q[i][0] for i in range(n))
[np.rad2deg(q[i][0]) for i in range(n)]
x1pol
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1pol
x1pol[0]
x1pol[0][0][0]
x1pol[0][0][0] = 1
type(x1pol)
type(x1pol[0])
type(x1pol[0][1])
type(x1pol[0][1][0])
type(x1pol[0][1][0][0])
type(x1pol[0][1])
type(x1pol[0])
x1pol[0][1]=1
cart2pol(2)
cart2pol(2,3)
type(cart2pol(2,3))
def cart2pol(x, y):
    theta = np.rad2deg(np.arctan2(y, x)) # in degrees
    rho = np.hypot(x, y)
    return theta, rho

cart2pol(2,3)
cart2pol(2,4)
cart2pol(2,5)
cart2pol(2,10)
cart2pol(2,100)
cart2pol(1.2,100)
cart2pol(1,100)
cart2pol(0,100)
np.deg2rad(cart2pol(0,100)[0])
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1pol
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
hilbert(x1)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
hilbert(x1)
x1
hilbert(x1)[0]
x1a = hilbert(x1)
x1a[:,0]
x1a[:,0].angle()
np.angle(x1a[:,0])
x1pol
np.angle(x1a)
x1
x1x
x1x[0]
hilbert(x1x)
hilbert(x1x[0])
clear
x1x[0]
hilbert(x1x[0])
x1[:,0]
hilbert(x1[:,0])
hilbert(x1)
hilbert(x1)[:,0]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
hilbert(x1)
hilbert(x1[:,0])
x1pol
x1
x1pol[0]
x1pol[0][0]
x1pol[1]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
x1pol
plt.plot(x1x[0],x1y[0])
x1
x1x
x1x[0]
x1y[0]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
plt.plot(x1x[0],x1y[0])
x1pol[0]
x1pol[0][0]
x1pol[0][0][0]
plt.plot(t, x1pol[0][0])
plt.figure(figsize=(20,8))
plt.plot(t, x1pol[0][0])

plt.figure(figsize=(20,8))
plt.plot(t, x1pol[0][0])
plt.plot(t,x1pol[1][0])

runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.figure(figsize=(20,8))
plt.plot(t, x1pol[0][0])
plt.plot(t,x1pol[1][0])

runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.figure(figsize=(20,8))
plt.plot(t, x1pol[0][0])
plt.plot(t,x1pol[1][0])

x1pol[0][0]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1pol[0][0]
x1pol
x1pol[0][]
x1pol[0][0]
plt.plot(t,x1pol[0][0])
x1p=x1pol[0][0]
x1p
x1p[0]
for i in x1p:
    if i<0:
        i=-i
        
x1p
[-i for i in x1p if i<0]
for i in x1p:
    if i<0:
        i=-1
    else:
        i=i
        
x1p
for i in range(len(x1p)):
    if x1p[i]<0:
        x1p[i] = -x1p[i]
        
x1p
plt.plot(t,x1p)
x1p2 = x1pol[0][0]
x1p2
x1pol = [cart2pol(x1[:,i*2],x1[:,i*2 +1]) for i in range(n)]
x1pol
x1p
x1p2 = x1pol[0][0]
x1p2
abs(x1p2)
plt.plot(t,abs(x1p2))
x1pol = [cart2pol(x1[:,i*2],x1[:,i*2 +1]) for i in range(n)]
x1pol = abs([cart2pol(x1[:,i*2],x1[:,i*2 +1]) for i in range(n)])
x1pol = [abs(cart2pol(x1[:,i*2],x1[:,i*2 +1])) for i in range(n)]
abs((1,2))
abs((1))
abs((1,))
abs((np.array(10)))
abs((np.array(10,2,2)))
abs((np.array(10,2)))
abs((np.zeros(2,3)))
x1[0]
abs(x1[0])
x1[:,0]
abs(x1[:,0])
x1pol
for i in range(n):
    x1pol[i][0]=abs(x1pol[i][0])
    
x1pol[0]
x1pol[0][0]
type(x1pol[0][0])
abs(x1pol[0][0])
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1pol
type(x1pol)
type(x1pol[0])
type(x1pol[0][0])
for i in range(n):
    x1pol[i][0] = abs(x1pol[i][0])
    
x1pol
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1pol
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1pol
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1pol
x1pol[:][0]
x1pol[0:1][0]
x1pol[01][0]
x1pol[1][0]
x1pol[1][0] + x1pol[0][0]
[x1pol[1][0],x1pol[0][0]]
np.var([x1pol[1][0],x1pol[0][0]])
np.var([x1pol[1][0],x1pol[0][0]], axis=0)
plt.plot(t,np.var([x1pol[1][0],x1pol[0][0]], axis=0))
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.plot(t,np.var([x1pol[1][0],x1pol[0][0]], axis=0))
[x1pol[1][0],x1pol[0][0]]
plt.plot(t, x1pol[0][0])
plt.plot(t, x1pol[1][0])

runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.plot(t, x1pol[0][0])
plt.plot(t, x1pol[1][0])

plt.plot(t,np.var([x1pol[1][0],x1pol[0][0]], axis=0))
np.var([x1pol[1][0],x1pol[0][0]], axis=0)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.plot(t,np.var([x1pol[1][0],x1pol[0][0]], axis=0))
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.plot(t,np.var([x1pol[1][0],x1pol[0][0]], axis=0))
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.plot(t,np.var([x1pol[1][0],x1pol[0][0]], axis=0))
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.plot(t,np.var([x1pol[1][0],x1pol[0][0]], axis=0))
np.var([x1pol[1][0],x1pol[0][0]], axis=0)
plt.plot(t, x1pol[0][0])
plt.plot(t, x1pol[1][0])

plt.plot(t, x1pol[0][0], 'o')
plt.plot(t, x1pol[1][0], 'o')

np.var?
x1pol
np.array(x1pol)
np.array(x1pol)[0]
np.array(x1pol)[0][0]
type(np.array(x1pol)[0])
type(np.array(x1pol))
type(np.array(x1pol[0]))
type(np.array(x1pol[0][0]))
type(np.array(x1pol[0][0][0]))
x1pol[0][0][0]
np.array(x1pol)
type(np.array(x1pol))
type(np.array(x1pol)[0])
type(np.array(x1pol)[0][0])
type(np.array(x1pol)[0][0][0])
type(np.array(x1pol)[0][0][0][0])
np.var(np.array(x1pol),axis=0)
plt.plot(t, np.var(np.array(x1pol),axis=0))
plt.plot(t, np.var(np.array([x1pol[0][0],x1pol[1][0]]),axis=0))
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.plot(t, np.var(np.array([x1pol[0][0],x1pol[1][0]]),axis=0))
x1pol[0][0]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1pol[0][0]
x1pol[1][0]
np.var([x1pol[0][0],x1pol[1][0]],axis=0)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
np.var([x1pol[0][0],x1pol[1][0]],axis=0)
x1pol[1][0]
x1pol[0][0]
plt.plot(t,np.var([x1pol[0][0],x1pol[1][0]],axis=0))
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.plot(t,np.var([x1pol[0][0],x1pol[1][0]],axis=0))
x1pol[0][0]
x1pol[1][0]
np.var([x1pol[0][0],x1pol[1][0]],axis=0)
var = np.var([x1pol[0][0],x1pol[1][0]],axis=0)
first = x1pol[1][0]
first = x1pol[0][0]
sec = x1pol[1][0]
first
sec
var
plt.plot(t,var)
plt.plot(t,var, 'o')
first
sec
plt.plot(t,first, 'o')
plt.plot(t,first, 'o')
plt.plot(t, sec, 'o')

runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
first = x1pol[0][0]
sec = x1pol[1][0]
var = np.var([x1pol[0][0],x1pol[1][0]],axis=0)
plt.plot(t,first, 'o')
plt.plot(t, sec, 'o')

plt.plot(t,var)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
var = np.var([x1pol[0][0],x1pol[1][0]],axis=0)
plt.plot(t,var)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
var = np.var([x1pol[0][0],x1pol[1][0]],axis=0)
plt.plot(t,var)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
var = np.var([x1pol[0][0],x1pol[1][0]],axis=0)
plt.plot(t,var)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
var = np.var([x1pol[0][0],x1pol[1][0]],axis=0)
var2 = running_mean(var,10)
plt.plot(t,var2)
plt.plot(t[0:2991],var2)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
var = np.var([x1pol[0][0],x1pol[1][0]],axis=0)
var2 = running_mean(var,3)
plt.plot(t[0:27],var2)
plt.plot(t[0:28],var2)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.plot(t,var)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.plot(t,var)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.plot(t,var)
plt.plot(t,var)
plt.ylim(-2,20)

plt.plot(t,var)
plt.ylim(6000,8000)

plt.plot(t,var)
plt.ylim(6000,8000)
plt.xlim(100,300)

plt.plot(t,var)
plt.ylim(6000,8000)
plt.xlim(150,200)

plt.plot(t,var)
plt.xlim(150,200)

np.diff(np.sign(np.diff(var)))
extrVal=[]
extrT=[]
diff = np.diff(np.sign(np.diff(var)))
for j in range(len(diff)):
    if diff[j]!=0:
        extrVal.append( (np.mean(var[j:j+2])) )
        extrT.append( (np.mean(t[j:j+2])) )
        
plt.plot(extrT,extrVal)
extrVal
len(extrVal)
max?
heapq?
import Collections
import ollections
import collections
collections?
collection.heapq?
collection.Heapq
del collections
len(extrVal)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
extrVal
plt.plot(extrT[0:30],extrVal[0:30])
extrVal2[0:10]
extrVal[0:10]
[extrVal[i*2] for i in range(int(len(extrVal)/2))]
extrVal2 = [extrVal[i*2] for i in range(int(len(extrVal)/2))]
plt.plot(extrVal2)
extrVal2 = [extrVal[i*2 + 1] for i in range(int(len(extrVal)/2))]
plt.plot(extrVal2)
extrVal
extrVal2 = [extrVal[i*2] for i in range(int(len(extrVal)/2))]
extrT2 = [extrT[i*2] for i in range(int(len(extrVal)/2))]
plt.plot(extrT2,extrVal2)
plt.plot(extrT2,extrVal2,'o')
x1
x1pol
clear
x1pol[0][0]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
x1pol
x1pol[0]
x1pol[0][0]
thetas = [x1pol[i][0] for i in range(n)]
thetas
thetas[0]
np.var(thetas,axis=0) == var
np.var(thetas,axis=0)
var
len(var)
len(thetas)
len(thetas[0])
sep?
separate?
seperate?
separete?
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
len(x1)
np.shape(x1)
np.shape(x1)[1]
np.shape(x1)[1]/2
int(np.shape(x1)[1]/2)
def sep(solution):
    solution_x = [solution[:,i*2] for i in range(int(np.shape(solution)[1]/2))]
    solution_y = [solution[:,i*2+1] for i in range(int(np.shape(solution)[1]/2))]
    return [solution_x,solution_y]

sep(x1)
x1x,x1y=sep(x1)
x1x
x1y
sep(x1)[0]
sep(x1)[1]
np.shape(sep(x1))
x1
x1pol
thetas1
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
thetas1
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
x1pol
thetas1
var1
def qwe(x):
    return 2*x, x

qwe(2)
type(qwe(2))
qwe(2)[0]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
del qwe
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
phvar(x1)
phvar(x1)[0]
phvar(x1)[1]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
phvar(x1)
x1
extrVal2
extrVal
var1
plt.plot(t,var1)
thetas1
clear
plt.plot(t,var1)
var1
extrVal
diff
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1
var1
len(var1)
plt.plot(t,var1)
plt.figure(figsize=(20,8))
plt.plot(t,var1, label='variance')
plt.plot(extrT2,extrVal2, 'o', label='envelope')
plt.legend()

plt.figure(figsize=(20,8))
plt.plot(t,var1, label='variance')
plt.plot(extrT2,extrVal2, 'o', label='even values from extremas')
plt.plot(extrT,extrVal, 'o', label = 'all values from extrema')
plt.legend()

plt.figure(figsize=(20,8))
plt.plot(t,var1, label='variance')
plt.plot(extrT2,extrVal2, 'o', label='even values from extremas')
plt.plot(extrT,extrVal, '+', label = 'all values from extrema')
plt.legend()

var1
plt.figure(figsize=(20,8))
plt.plot(t,var1, label='variance')
plt.plot(extrT2,extrVal2, 'o', label='even values from extremas')
plt.plot(extrT,extrVal, '+', label = 'all values from extrema')
plt.legend()

var1[290:330]
diff[290:]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.figure(figsize=(20,8))
plt.plot(t,var1, label='variance')
plt.plot(extrT2,extrVal2, 'o', label='even values from extremas')
plt.plot(extrT,extrVal, '+', label = 'all values from extrema')
plt.legend()

plt.figure(figsize=(20,8))
plt.plot(t,var1, label='variance')
plt.plot(extrT2,extrVal2, '-', label='even values from extremas')
plt.plot(extrT,extrVal, 'o', label = 'all values from extrema')
plt.legend()

phvar(x1)
phvar(x1)[0] == [extrT2,extrVal2]
sol2pol(x1) == x1pol
sol2pol(x1)
sol2pol(x1)[0]
sol2pol(x1)[0]==x1pol[0]
a.all?
np.all?
np.all(sol2pol(x1),x1pol)
np.all([sol2pol(x1),x1pol])
np.all([phvar(x1),[extrT2,extrVal2]])
extrT2
extrT2[3]
phvar(x1)[3]
phvar(x1)[0][3]
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
q = phvar(x1)
x1x
x1x=sep(x1)[0]
x1x
x1x==sep(x1)[0]
np.all([x1x,sep(x1)[0]])
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x1x
x1
x1x[0]
x1[0:1]
x1[0:2]
clear
n = 10 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n

params = ([0.1]*n,[1]*n,omeg,[0.0]*n,[0.0]*n)
x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

x1x=[x1[:,i*2] for i in range(n)] # Only x-coordinate
x2x=[x2[:,i*2] for i in range(n)] # Only x-coordinate
x3x=[x3[:,i*2] for i in range(n)] # Only x-coordinate
x4x=[x4[:,i*2] for i in range(n)] # Only x-coordinate

plt.figure(figsize=(20,8))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
n = 10 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n

params = ([0.1]*n,[1]*n,omeg,[0.0]*n,[0.0]*n)
x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

x1x=[x1[:,i*2] for i in range(n)] # Only x-coordinate
x2x=[x2[:,i*2] for i in range(n)] # Only x-coordinate
x3x=[x3[:,i*2] for i in range(n)] # Only x-coordinate
x4x=[x4[:,i*2] for i in range(n)] # Only x-coordinate

plt.figure(figsize=(20,8))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

n = 10 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n

params = ([0.1]*n,[1]*n,omeg,[0.0]*n,[0.0]*n)
x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

x1x=[x1[:,i*2] for i in range(n)] # Only x-coordinate
x2x=[x2[:,i*2] for i in range(n)] # Only x-coordinate
x3x=[x3[:,i*2] for i in range(n)] # Only x-coordinate
x4x=[x4[:,i*2] for i in range(n)] # Only x-coordinate

plt.figure(figsize=(20,8))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.var(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.var(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.var(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

n = 100 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n

params = ([0.1]*n,[1]*n,omeg,[0.0]*n,[0.0]*n)
x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

x1x=[x1[:,i*2] for i in range(n)] # Only x-coordinate
x2x=[x2[:,i*2] for i in range(n)] # Only x-coordinate
x3x=[x3[:,i*2] for i in range(n)] # Only x-coordinate
x4x=[x4[:,i*2] for i in range(n)] # Only x-coordinate

plt.figure(figsize=(20,8))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.var(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.var(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.var(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

n = 100 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n

params = ([0.1]*n,[1]*n,omeg,[0.0]*n,[0.0]*n)
x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

x1x=[x1[:,i*2] for i in range(n)] # Only x-coordinate
x2x=[x2[:,i*2] for i in range(n)] # Only x-coordinate
x3x=[x3[:,i*2] for i in range(n)] # Only x-coordinate
x4x=[x4[:,i*2] for i in range(n)] # Only x-coordinate

plt.figure(figsize=(20,8))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.var(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.var(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.var(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 100 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, running_mean(np.var(x1x,axis=0),50,2), label = 'sigma=0.5')
plt.plot (t, running_mean(np.var(x2x,axis=0),50,2), label = 'sigma=1')
plt.plot (t, running_mean(np.var(x3x,axis=0),50,2), label = 'sigma=1.5')
plt.plot (t, running_mean(np.var(x4x,axis=0),50,2), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[0:4853], running_mean(np.var(x1x,axis=0),50,2), label = 'sigma=0.5')
plt.plot (t[0:4853], running_mean(np.var(x2x,axis=0),50,2), label = 'sigma=1')
plt.plot (t[0:4853], running_mean(np.var(x3x,axis=0),50,2), label = 'sigma=1.5')
plt.plot (t[0:4853], running_mean(np.var(x4x,axis=0),50,2), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[0:4853], running_mean(np.var(x1x,axis=0),50,3), label = 'sigma=0.5')
plt.plot (t[0:4853], running_mean(np.var(x2x,axis=0),50,3), label = 'sigma=1')
plt.plot (t[0:4853], running_mean(np.var(x3x,axis=0),50,3), label = 'sigma=1.5')
plt.plot (t[0:4853], running_mean(np.var(x4x,axis=0),50,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[0:4804], running_mean(np.var(x1x,axis=0),50,3), label = 'sigma=0.5')
plt.plot (t[0:4804], running_mean(np.var(x2x,axis=0),50,3), label = 'sigma=1')
plt.plot (t[0:4804], running_mean(np.var(x3x,axis=0),50,3), label = 'sigma=1.5')
plt.plot (t[0:4804], running_mean(np.var(x4x,axis=0),50,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[0:4804], running_mean(np.var(x1x,axis=0),70,3), label = 'sigma=0.5')
plt.plot (t[0:4804], running_mean(np.var(x2x,axis=0),70,3), label = 'sigma=1')
plt.plot (t[0:4804], running_mean(np.var(x3x,axis=0),70,3), label = 'sigma=1.5')
plt.plot (t[0:4804], running_mean(np.var(x4x,axis=0),70,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[0:4724], running_mean(np.var(x1x,axis=0),70,3), label = 'sigma=0.5')
plt.plot (t[0:4724], running_mean(np.var(x2x,axis=0),70,3), label = 'sigma=1')
plt.plot (t[0:4724], running_mean(np.var(x3x,axis=0),70,3), label = 'sigma=1.5')
plt.plot (t[0:4724], running_mean(np.var(x4x,axis=0),70,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

n = 10 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n

params = ([0.1]*n,[1]*n,omeg,[0.0]*n,[0.0]*n)
x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

x1x=[x1[:,i*2] for i in range(n)] # Only x-coordinate
x2x=[x2[:,i*2] for i in range(n)] # Only x-coordinate
x3x=[x3[:,i*2] for i in range(n)] # Only x-coordinate
x4x=[x4[:,i*2] for i in range(n)] # Only x-coordinate

plt.figure(figsize=(20,8))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.var(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.var(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.var(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 100 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

n = 10 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n

params = ([0.1]*n,[1]*n,omeg,[0.0]*n,[0.0]*n)
x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

plt.figure(figsize=(20,8))

plt.plot (t, np.var(sep(x1)[0],axis=0), label = 'sigma=0.5')
plt.plot (t, np.var(sep(x2)[0],axis=0), label = 'sigma=1')
plt.plot (t, np.var(sep(x3)[0],axis=0), label = 'sigma=1.5')
plt.plot (t, np.var(sep(x4)[0],axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 100 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

x1
np.shape(x1)
phvar(x1)
q = phvar(x1)
n = 10 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n


x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))


plt.figure(figsize=(20,8))

plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0], label = 'sigma=1')
plt.plot (t, phvar(x3)[0], label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0], label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

n = 10 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n


x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))



plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0], label = 'sigma=1')
plt.plot (t, phvar(x3)[0], label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0], label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

n = 10 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n


x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))


plt.figure(figsize=(20,8))
plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0], label = 'sigma=1')
plt.plot (t, phvar(x3)[0], label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0], label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

n = 10 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n


x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))


plt.figure(figsize=(20,8))
plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0], label = 'sigma=1')
plt.plot (t, phvar(x3)[0], label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0], label = 'sigma=2')

plt.ylabel ('Variance of phase of 10 oscillators')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (phvar(x1)[1][0], phvar(x1)[1][1], label = 'sigma=0.5')
plt.plot (phvar(x2)[1][0], phvar(x2)[1][1], label = 'sigma=1')
plt.plot (phvar(x3)[1][0], phvar(x3)[1][1], label = 'sigma=1.5')
plt.plot (phvar(x4)[1][0], phvar(x4)[1][1], label = 'sigma=2')

plt.ylabel ('Variance of phase of 10 oscillators')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t, running_mean(phvar(x1)[0],100), label = 'sigma=0.5')
plt.plot (t, running_mean(phvar(x2)[0],100), label = 'sigma=1')
plt.plot (t, running_mean(phvar(x3)[0],100), label = 'sigma=1.5')
plt.plot (t, running_mean(phvar(x4)[0],100), label = 'sigma=2')

plt.ylabel ('Variance of phase of 10 oscillators')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

running_mean(phvar(x1)[0],100)plt.figure(figsize=(20,8))
     ...: plt.plot (t[0:4901], running_mean(phvar(x1)[0],100), label = 'sigma=0.5')
     ...: plt.plot (t[0:4901], running_mean(phvar(x2)[0],100), label = 'sigma=1')
     ...: plt.plot (t[0:4901], running_mean(phvar(x3)[0],100), label = 'sigma=1.5')
     ...: plt.plot (t[0:4901], running_mean(phvar(x4)[0],100), label = 'sigma=2')
     ...: 
     ...: plt.ylabel ('Variance of phase of 10 oscillators')
     ...: plt.xlabel ('time, hours')
     ...: 
     ...: plt.legend()
     ...: plt.show()
plt.figure(figsize=(20,8))
plt.plot (t[0:4901], running_mean(phvar(x1)[0],100), label = 'sigma=0.5')
plt.plot (t[0:4901], running_mean(phvar(x2)[0],100), label = 'sigma=1')
plt.plot (t[0:4901], running_mean(phvar(x3)[0],100), label = 'sigma=1.5')
plt.plot (t[0:4901], running_mean(phvar(x4)[0],100), label = 'sigma=2')

plt.ylabel ('Variance of phase of 10 oscillators')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t[0:4703], running_mean(phvar(x1)[0],100,2), label = 'sigma=0.5')
plt.plot (t[0:4703], running_mean(phvar(x2)[0],100,2), label = 'sigma=1')
plt.plot (t[0:4703], running_mean(phvar(x3)[0],100,2), label = 'sigma=1.5')
plt.plot (t[0:4703], running_mean(phvar(x4)[0],100,2), label = 'sigma=2')

plt.ylabel ('Variance of phase of 10 oscillators')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

n = 100 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n


x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))


plt.figure(figsize=(20,8))

plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0], label = 'sigma=1')
plt.plot (t, phvar(x3)[0], label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0], label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()


plt.figure(figsize=(20,8))

plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0], label = 'sigma=1')
plt.plot (t, phvar(x3)[0], label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0], label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')
plt.legend()
plt.show()


plt.figure(figsize=(20,8))

plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0], label = 'sigma=1')
plt.plot (t, phvar(x3)[0], label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0], label = 'sigma=2')

plt.ylabel ('Variance of phase of 10 oscillators')
plt.xlabel ('time, hours')
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0], label = 'sigma=1')
plt.plot (t, phvar(x3)[0], label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0], label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 100 oscillators')
plt.xlabel ('time, hours')


plt.legend()
plt.show()

t = np.linspace(0, 500, 5000)


n = 10 # Number of oscillators
state0 = [2,2]*n
x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

n = 100 # Number of oscillators
state0 = [2,2]*n
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

n = 1000 # Number of oscillators
state0 = [2,2]*n
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]


plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = '10 oscillators')
plt.plot (t, np.mean(x2x,axis=0), label = '100 oscillators')
plt.plot (t, np.mean(x3x,axis=0), label = '1000 oscillators')

plt.ylabel ('Mean of different number of oscillators under 1 sigma variance of omega')
plt.xlabel ('time, hours')


plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.var(x1x,axis=0), label = '10 oscillators')
plt.plot (t, np.var(x2x,axis=0), label = '100 oscillators')
plt.plot (t, np.var(x3x,axis=0), label = '1000 oscillators')

plt.ylabel ('Variance of x-coordinate of different number of oscillators under 1 sigma variance of omega')
plt.xlabel ('time, hours')


plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, phvar(x1)[0], label = '10 oscillators')
plt.plot (t, phvar(x2)[0], label = '100 oscillators')
plt.plot (t, phvar(x3)[0], label = '1000 oscillators')

plt.ylabel ('Variance of x-coordinate of different number of oscillators under 1 sigma variance of omega')
plt.xlabel ('time, hours')


plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, phvar(x1)[0], label = '10 oscillators')
plt.plot (t, phvar(x2)[0], label = '100 oscillators')
plt.plot (t, phvar(x3)[0], label = '1000 oscillators')

plt.ylabel ('Var(phase) of different number of oscillators under sigma=1')
plt.xlabel ('time, hours')


plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (phvar(x1)[1][0], phvar(x1)[1][1], label = '10 oscillators')
plt.plot (phvar(x2)[1][0], phvar(x2)[1][1], label = '100 oscillators')
plt.plot (phvar(x3)[1][0], phvar(x3)[1][1], label = '1000 oscillators')

plt.ylabel ('Var(phase) of different number of oscillators under sigma=1')
plt.xlabel ('time, hours')


plt.legend()
plt.show()

phvar(x1)
phvar(x1)[0]
run=[]
for i in [x1,x2,x3]:
    run.append(run_mean(phvar(i)[0],72,2))
    
run=[]
for i in [x1,x2,x3]:
    run.append(running_mean(phvar(i)[0],72,2))
    
run
for i in run:
    plt.plot(t, i)

for i in run:
    plt.plot(t[0:4787], i)
    
n = 10 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n

x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

clear
n = 10 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n

x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

n = 100 # Number of oscillators
t = np.linspace(0, 500, 5000)
state0 = [2,2]*n

x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 100 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 100 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.legend()
plt.show()

n = 1000 # Number of oscillators
t = np.linspace(0, 370, 3700)
state0 = [2,2]*n

x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.legend()
plt.show()

def quad (x,a,b,c):
    return (a*(x**2) + b*x + c)

from scipy.optimize import curve_fit
plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.legend()
plt.show()

x1x
from scipy import hilbert
from scipy.signal import hilbert
plt.plot(t,np.mean(x1x,axis=0), label='mean of x1')
plt.plot(t, np.abs(hilbert(np.mean(x1x,axis=0))), label = 'envelope of mean of x1')
plt.ledend()

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0), label = 'sigma=2')
plt.plot(t, np.abs(hilbert(np.mean(x1x,axis=0))), label = 'envelope of mean of x1')
plt.plot(t, np.abs(hilbert(np.mean(x2x,axis=0))), label = 'envelope of mean of x1')
plt.plot(t, np.abs(hilbert(np.mean(x3x,axis=0))), label = 'envelope of mean of x1')
plt.plot(t, np.abs(hilbert(np.mean(x4x,axis=0))), label = 'envelope of mean of x1')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0), label = 'sigma=2')
plt.plot(t[10:], np.abs(hilbert(np.mean(x1x,axis=0)))[10:], label = 'envelope of mean of x1')
plt.plot(t, np.abs(hilbert(np.mean(x2x,axis=0))), label = 'envelope of mean of x1')
plt.plot(t, np.abs(hilbert(np.mean(x3x,axis=0))), label = 'envelope of mean of x1')
plt.plot(t, np.abs(hilbert(np.mean(x4x,axis=0))), label = 'envelope of mean of x1')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot(t[100:], np.abs(hilbert(np.mean(x1x,axis=0)))[100:], label = 'envelope of mean of x1')
plt.plot(t, np.abs(hilbert(np.mean(x2x,axis=0))), label = 'envelope of mean of x1')
plt.plot(t, np.abs(hilbert(np.mean(x3x,axis=0))), label = 'envelope of mean of x1')
plt.plot(t, np.abs(hilbert(np.mean(x4x,axis=0))), label = 'envelope of mean of x1')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot(t[10:], np.abs(hilbert(np.mean(x1x,axis=0)))[10:], label = 'envelope of mean of x1')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot(t[5:], np.abs(hilbert(np.mean(x1x,axis=0)))[5:], label = 'envelope of mean of x1')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot(t[2:], np.abs(hilbert(np.mean(x1x,axis=0)))[2:], label = 'envelope of mean of x1')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot(t[1:], np.abs(hilbert(np.mean(x1x,axis=0)))[1:], label = 'envelope of mean of x1')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.legend()
plt.show()

def env(x):
    return np.abs(hilbert(x))

plt.figure(figsize=(20,8))

plt.plot (t, env(np.mean(x1x,axis=0)), label = 'sigma=0.5')
plt.plot (t, env(np.mean(x2x,axis=0)), label = 'sigma=1')
plt.plot (t, env(np.mean(x3x,axis=0)), label = 'sigma=1.5')
plt.plot (t, env(np.mean(x4x,axis=0)), label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, env(np.mean(x1x,axis=0))[1:], label = 'sigma=0.5')
plt.plot (t, env(np.mean(x2x,axis=0))[1:], label = 'sigma=1')
plt.plot (t, env(np.mean(x3x,axis=0))[1:], label = 'sigma=1.5')
plt.plot (t, env(np.mean(x4x,axis=0))[1:], label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[1:], env(np.mean(x1x,axis=0))[1:], label = 'sigma=0.5')
plt.plot (t[1:], env(np.mean(x2x,axis=0))[1:], label = 'sigma=1')
plt.plot (t[1:], env(np.mean(x3x,axis=0))[1:], label = 'sigma=1.5')
plt.plot (t[1:], env(np.mean(x4x,axis=0))[1:], label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.legend()
plt.show()

plt.plot(t,x1x)
plt.plot(t,np.mean(x1x,axis=0))
m = np.mean(x1x,axis=0)
np.diff(np.sign(np.diff(m)))
diff_m=np.diff(np.sign(np.diff(m)))
def extr(x):
    diff = np.diff(np.sign(np.diff(x)))
    extrT=[]
    extrVal=[]
    for i in range(len(diff)):
        if diff[i]!=0:
            extrVal.append(np.mean(x[i:i+2]))
            extrT.append(np.mean(t[i:i+2]))
    return [extrT,extrVal]

extr(m)
plt.plot(t,m, label='mean')
plt.plot(extr(m)[0], extr(m)[1], label='extrema')
plt.legend()
plt.show()

plt.plot(t,m, label='mean')
plt.plot(extr(m)[0], extr(m)[1], 'o', label='extrema')
plt.legend()
plt.show()

for i in range(int(len(extr(m)[0])/2)):
    print extr(m)[1][i*2 +1]
maxa=[]
for i in range(int(len(extr(m)[0])/2)):
    maxa.append(extr(m)[1][i*2 +1])
    
maxa[0:10]
extr(m)[1][0:10]
maxa=[]
maxT=[]
for i in range(int(len(extr(m)[0])/2)):
    maxa.append(extr(m)[1][i*2 +1])
    maxT.append(extr(m)[0][i*2+1])
    
plt.plot(maxt, maxa)
plt.plot(t,m)

plt.plot(maxT, maxa)
plt.plot(t,m)

plt.plot(maxT, maxa, 'o')
plt.plot(t,m)

plt.yscale?
a = [ pow(10,i) for i in range(10) ]
a
plt.plot(a)
plt.yscale('log')

plt.plot(a)
plt.plot(a)
plt.yscale('log')
plt.xscale('log')

plt.plot(t,m, label='mean')
plt.plot(extr(m)[0], extr(m)[1], 'o', label='extrema')
plt.legend()
plt.show()

def minmax(x):
    maxVal=[]
    maxT=[]
    for i in range(int(len(extr(x)[0])/2)):
        maxVal.append(extr(x)[1][i*2 +1])
        maxT.append(extr(x)[0][i*2+1])
    return [maxT, maxVal]

minmax(extr(x))
minmax(m)
minmax(m)[0:10]
minmax(m)[0:3]
minmax(m)[1][1]
def maxs(list_extr):
    maxsV=[]
    maxsT=[]
    for i in range(int(len(list_extr)/2)):
        maxsV.append(list_extr[1][i*2 + 1])
        maxsT.append(list_extr[0][i*2 + 1])
    return [maxsT,maxsV]

maxs(extr(m))
extr(m)
def maxs(list_extr):
    maxsV=[]
    maxsT=[]
    for i in range(int(len(list_extr[0])/2)):
        maxsV.append(list_extr[1][i*2 + 1])
        maxsT.append(list_extr[0][i*2 + 1])
    return [maxsT,maxsV]

maxs(extr(m))
def me(x):
    return maxs(extr(x))

plt.plot(t,m)
plt.plot(me[0],me[1], 'o')

plt.plot(t,m)
plt.plot(me(m)[0],me(m)[1], 'o')

mean?
mean=np.mean()
mean=np.mean
plt.plot(t,mean(x1))
plt.plot(t,mean(x2))

def mean(x):
    return np.mean(x,axis=0)

plt.plot(t, mean(x1))
plt.plot(t, mean(x2))

plt.plot(t, mean(x1x))
plt.plot(t, mean(x2x))

plt.plot(t, mean(x1x))
plt.plot(t, mean(x2x))
plt.plot(t,mean(x3x))
plt.plot(t,mean(x4x))

plt.plot(t, mean(x1x))
plt.plot(t, mean(x2x))
plt.plot(t,mean(x3x))
plt.plot(t,mean(x4x))
plt.yscale('log')

plt.plot(t, me(mean(x1x)))
plt.plot(t, me(mean(x2x)))
plt.plot(t,me(mean(x3x)))
plt.plot(t,me(mean(x4x)))
#plt.yscale('log')

def me2(x):
    return me(np.mean(x, axis=0))

x1x
me2(x1x)
plt.plot(me2(x1x)[0], me2(x1x)[1])
plt.plot(me2(x2x)[0], me2(x2x)[1])
plt.plot(me2(x3x)[0],me2(x3x)[1])
plt.plot(me2(x4x)[0],me2(x4x)[1])
#plt.yscale('log')

plt.plot(me2(x1x)[0], me2(x1x)[1], 'o')
plt.plot(me2(x2x)[0], me2(x2x)[1], 'o')
plt.plot(me2(x3x)[0],me2(x3x)[1], 'o')
plt.plot(me2(x4x)[0],me2(x4x)[1], 'o')
#plt.yscale('log')

plt.plot(me2(x1x)[0], me2(x1x)[1], 'o')
plt.plot(me2(x2x)[0], me2(x2x)[1], 'o')
plt.plot(me2(x3x)[0],me2(x3x)[1], 'o')
plt.plot(me2(x4x)[0],me2(x4x)[1], 'o')
plt.yscale('log')

plt.plot(me2(x1x)[0], me2(x1x)[1] )
plt.plot(me2(x2x)[0], me2(x2x)[1] )
plt.plot(me2(x3x)[0],me2(x3x)[1])
plt.plot(me2(x4x)[0],me2(x4x)[1])
plt.yscale('log')

func?
def lin(x, a, b):
    return (a*x + b)

def quad(x, a, b, c):
    return (a*(x**2) + b*x + c)

popt, pcov = curve_fit(lin,me2(x1x)[0],me2(x1x)[1])
plt.plot(me2(x1x)[0],me(x1x)[1], label='data')
plt.plot(me2(x1x)[0], lin(me2(x1x)[0],*popt), 'r-', label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt))
plt.legend()

plt.plot(me2(x1x)[0],me2(x1x)[1], label='data')
plt.plot(me2(x1x)[0], lin(me2(x1x)[0],*popt), 'r-', label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt))
plt.legend()

popt
t
plt.plot(lin(t,popt))
plt.plot(lin(t,popt[0],popt[1]))
plt.plot(t, lin(t,popt[0],popt[1]))
plt.plot(t, lin(t,popt[0],popt[1]), label='fit')
plt.plot(me2(x1x)[0],me2(x1x)[1],label='data')
plt.legend()

np.polyfit(t, np.mean(x1x, axis=0),1)
q=np.polyfit(t, np.mean(x1x, axis=0),1)
plt.plot(q)
plt.plot(t,q)
plt.figure(figsize=(20,8))
plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0], label = 'sigma=1')
plt.plot (t, phvar(x3)[0], label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0], label = 'sigma=2')

plt.ylabel ('Variance of phase of 10 oscillators')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.var(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.var(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.var(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 10 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.var(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.var(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.var(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.var(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.var(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.var(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(18,8))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.var(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.var(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.var(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(18,8))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.var(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.var(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.var(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')

#plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, run_mean(np.var(x1x,axis=0),72,2), label = 'sigma=0.5')
plt.plot (t, run_mean(np.var(x2x,axis=0),72,2), label = 'sigma=1')
plt.plot (t, run_mean(np.var(x3x,axis=0),72,2), label = 'sigma=1.5')
plt.plot (t, run_mean(np.var(x4x,axis=0),72,2), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3)')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

def run_mean(x, N,N2=0):
    if N2==0:
        cumsum = np.cumsum(np.insert(x, 0, 0)) 
        return (cumsum[N:] - cumsum[:-N]) / float(N)
    else:
        cumsum = np.cumsum(np.insert(x, 0, 0)) 
        return run_mean(((cumsum[N:] - cumsum[:-N]) / float(N)),N,N2-1)
    
plt.figure(figsize=(20,8))

plt.plot (t, run_mean(np.var(x1x,axis=0),72,2), label = 'sigma=0.5')
plt.plot (t, run_mean(np.var(x2x,axis=0),72,2), label = 'sigma=1')
plt.plot (t, run_mean(np.var(x3x,axis=0),72,2), label = 'sigma=1.5')
plt.plot (t, run_mean(np.var(x4x,axis=0),72,2), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3)')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3487], run_mean(np.var(x1x,axis=0),72,2), label = 'sigma=0.5')
plt.plot (t[:3487], run_mean(np.var(x2x,axis=0),72,2), label = 'sigma=1')
plt.plot (t[:3487], run_mean(np.var(x3x,axis=0),72,2), label = 'sigma=1.5')
plt.plot (t[:3487], run_mean(np.var(x4x,axis=0),72,2), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3)')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3487], run_mean(np.var(x1x,axis=0),72,2), label = 'sigma=0.5')
plt.plot (t[:3487], run_mean(np.var(x2x,axis=0),72,2), label = 'sigma=1')
plt.plot (t[:3487], run_mean(np.var(x3x,axis=0),72,2), label = 'sigma=1.5')
plt.plot (t[:3487], run_mean(np.var(x4x,axis=0),72,2), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3487], run_mean(np.var(x1x,axis=0),72,2), label = 'sigma=0.5')
plt.plot (t[:3487], run_mean(np.var(x2x,axis=0),72,2), label = 'sigma=1')
plt.plot (t[:3487], run_mean(np.var(x3x,axis=0),72,2), label = 'sigma=1.5')
plt.plot (t[:3487], run_mean(np.var(x4x,axis=0),72,2), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3)')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3487], run_mean(np.var(x1x,axis=0),24,2), label = 'sigma=0.5')
plt.plot (t[:3487], run_mean(np.var(x2x,axis=0),24,2), label = 'sigma=1')
plt.plot (t[:3487], run_mean(np.var(x3x,axis=0),24,2), label = 'sigma=1.5')
plt.plot (t[:3487], run_mean(np.var(x4x,axis=0),24,2), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3631], run_mean(np.var(x1x,axis=0),24,2), label = 'sigma=0.5')
plt.plot (t[:3631], run_mean(np.var(x2x,axis=0),24,2), label = 'sigma=1')
plt.plot (t[:3631], run_mean(np.var(x3x,axis=0),24,2), label = 'sigma=1.5')
plt.plot (t[:3631], run_mean(np.var(x4x,axis=0),24,2), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3631], run_mean(np.var(x1x,axis=0),72,3), label = 'sigma=0.5')
plt.plot (t[:3631], run_mean(np.var(x2x,axis=0),72,3), label = 'sigma=1')
plt.plot (t[:3631], run_mean(np.var(x3x,axis=0),72,3), label = 'sigma=1.5')
plt.plot (t[:3631], run_mean(np.var(x4x,axis=0),72,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3416], run_mean(np.var(x1x,axis=0),72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(np.var(x2x,axis=0),72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(np.var(x3x,axis=0),72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(np.var(x4x,axis=0),72,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3416], run_mean(np.var(x1x,axis=0),72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(np.var(x2x,axis=0),72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(np.var(x3x,axis=0),72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(np.var(x4x,axis=0),72,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0], label = 'sigma=1')
plt.plot (t, phvar(x3)[0], label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0], label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t, run_mean(phvar(x1)[0],72,2), label = 'sigma=0.5')
plt.plot (t, run_mean(phvar(x2)[0],72,2), label = 'sigma=1')
plt.plot (t, run_mean(phvar(x3)[0],72,2), label = 'sigma=1.5')
plt.plot (t, run_mean(phvar(x4)[0],72,2), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t[:3487], run_mean(phvar(x1)[0],72,2), label = 'sigma=0.5')
plt.plot (t[:3487], run_mean(phvar(x2)[0],72,2), label = 'sigma=1')
plt.plot (t[:3487], run_mean(phvar(x3)[0],72,2), label = 'sigma=1.5')
plt.plot (t[:3487], run_mean(phvar(x4)[0],72,2), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t[:3487], run_mean(phvar(x1)[0],72,2), label = 'sigma=0.5')
plt.plot (t[:3487], run_mean(phvar(x2)[0],72,2), label = 'sigma=1')
plt.plot (t[:3487], run_mean(phvar(x3)[0],72,2), label = 'sigma=1.5')
plt.plot (t[:3487], run_mean(phvar(x4)[0],72,2), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,3)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

phvar(x1)[0]
phvar(x1)[0][0:10]
phvar(x1)[0][0:20]
phvar(x1)[0][0:100]
phvar(x1)[0][0:200]
phvar(x1)[0][200]
phvar(x1)[0][300]
phvar(x1)[0][500]
phvar(x1)[0][1000]
phvar(x1)[0][3000]
phvar(x1)[0][3500]
phvar(x1)[0][3501]
phvar(x1)[0][3701]
phvar(x1)[0][3700]
phvar(x1)[0][3600]
sol_pol = sol2pol(x1)
thetas = [sol_pol[i][0] for i in range(n)]
thetas


thetas[0]
thetas[0][3000]
np.var([thetas[0][3000],thetas[1][3000]])
thetas[1][3000]
np.var([thetas[0][3000],thetas[1][3000]], axis=0)
np.var([thetas[0][3000],thetas[1][3000]], axis=1)
np.var([thetas[0][3000],thetas[1][3000]])
np.var(thetas[0][3000])
clear
plt.figure(figsize=(20,8))
plt.plot (t[:3487], run_mean(phvar(x1)[0],72,2), label = 'sigma=0.5')
plt.plot (t[:3487], run_mean(phvar(x2)[0],72,2), label = 'sigma=1')
plt.plot (t[:3487], run_mean(phvar(x3)[0],72,2), label = 'sigma=1.5')
plt.plot (t[:3487], run_mean(phvar(x4)[0],72,2), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,3)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t[:3487], run_mean(phvar(x1)[0],72,3), label = 'sigma=0.5')
plt.plot (t[:3487], run_mean(phvar(x2)[0],72,3), label = 'sigma=1')
plt.plot (t[:3487], run_mean(phvar(x3)[0],72,3), label = 'sigma=1.5')
plt.plot (t[:3487], run_mean(phvar(x4)[0],72,3), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,3)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t[:3416], run_mean(phvar(x1)[0],72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(phvar(x2)[0],72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(phvar(x3)[0],72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(phvar(x4)[0],72,3), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,3)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t[:3416], run_mean(phvar(x1)[0],72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(phvar(x2)[0],72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(phvar(x3)[0],72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(phvar(x4)[0],72,3), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t[:3416], run_mean(phvar(x1)[0],72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(phvar(x2)[0],72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(phvar(x3)[0],72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(phvar(x4)[0],72,3), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

f=open("/home/kalashnikov/Code/Picsss/1000 oscillators with sigma 0.5.txt","w+")
f.write(x1)
f.close()

np.save("/home/kalashnikov/Code/Picsss/1000 oscillators with sigma 0.5",x1)
x1
np.load("/home/kalashnikov/Code/Picsss/1000 oscillators with sigma 0.5")
np.load("/home/kalashnikov/Code/Picsss/1000 oscillators with sigma 0.5.npy")
np.load("/home/kalashnikov/Code/Picsss/1000 oscillators with sigma 0.5.npy") == x1
np.all([np.load("/home/kalashnikov/Code/Picsss/1000 oscillators with sigma 0.5.npy"),x1])
np.save("/home/kalashnikov/Code/Picsss/1000 oscillators with sigma 1",x2)
np.save("/home/kalashnikov/Code/Picsss/1000 oscillators with sigma 1.5",x3)
np.save("/home/kalashnikov/Code/Picsss/1000 oscillators with sigma 2",x4)
plt.plot(t,np.mean(x1x,axis=0))
plt.yscale('log')

plt.plot(t,np.mean(x1x,axis=0))
plt.plot(t,env(np.mean(x1x,axis=0)))
plt.plot(t,env(np.mean(x1x,axis=0))[1:-2])
plt.plot(t[1:3698],env(np.mean(x1x,axis=0))[1:-2])
plt.plot(t[1:3698],env(np.mean(x1x,axis=0))[1:-5])
plt.plot(t[1:3695],env(np.mean(x1x,axis=0))[1:-5])
plt.plot(t,np.mean(x1x,axis=0))
plt.plot(extr(np.mean(x1x,axis=0))[0],extr(np.mean(x1x,axis=0))[1])

plt.plot(t,np.mean(x1x,axis=0), '--')
plt.plot(extr(np.mean(x1x,axis=0))[0],extr(np.mean(x1x,axis=0))[1],'o')

plt.plot(t,np.mean(x1x,axis=0), '--', label="mean")
plt.plot(extr(np.mean(x1x,axis=0))[0],extr(np.mean(x1x,axis=0))[1],'o', label="extrema")
plt.plot(me(np.mean(x1x,axis=0))[0], me(np.mean(x1x,axis=0))[1], "+", label="maxima")
plt.legend()

plt.plot(t,np.mean(x1x,axis=0), label="sigma 0.5")
plt.plot(t,np.mean(x2x,axis=0), label="sigma 1.0")
plt.plot(t,np.mean(x3x,axis=0), label="sigma 1.5")
plt.plot(t,np.mean(x4x,axis=0), label="sigma 2.0")

plt.plot(me(np.mean(x1x,axis=0))[0], me(np.mean(x1x,axis=0))[1], "+", label="maxima sigma 0.5")
plt.plot(me(np.mean(x2x,axis=0))[0], me(np.mean(x2x,axis=0))[1], "+", label="maxima sigma 1.0")
plt.plot(me(np.mean(x3x,axis=0))[0], me(np.mean(x3x,axis=0))[1], "+", label="maxima sigma 1.5")
plt.plot(me(np.mean(x4x,axis=0))[0], me(np.mean(x4x,axis=0))[1], "+", label="maxima sigma 2.0")

plt.legend()

plt.figure(figsize=(20,8))
plt.plot(t,np.mean(x1x,axis=0), label="sigma 0.5")
plt.plot(t,np.mean(x2x,axis=0), label="sigma 1.0")
plt.plot(t,np.mean(x3x,axis=0), label="sigma 1.5")
plt.plot(t,np.mean(x4x,axis=0), label="sigma 2.0")

plt.plot(me(np.mean(x1x,axis=0))[0], me(np.mean(x1x,axis=0))[1], "+", label="maxima sigma 0.5")
plt.plot(me(np.mean(x2x,axis=0))[0], me(np.mean(x2x,axis=0))[1], "+", label="maxima sigma 1.0")
plt.plot(me(np.mean(x3x,axis=0))[0], me(np.mean(x3x,axis=0))[1], "+", label="maxima sigma 1.5")
plt.plot(me(np.mean(x4x,axis=0))[0], me(np.mean(x4x,axis=0))[1], "+", label="maxima sigma 2.0")

plt.legend()

plt.figure(figsize=(20,8))
#plt.plot(t,np.mean(x1x,axis=0), label="sigma 0.5")
#plt.plot(t,np.mean(x2x,axis=0), label="sigma 1.0")
#plt.plot(t,np.mean(x3x,axis=0), label="sigma 1.5")
#plt.plot(t,np.mean(x4x,axis=0), label="sigma 2.0")

plt.plot(me(np.mean(x1x,axis=0))[0], me(np.mean(x1x,axis=0))[1], "+", label="maxima sigma 0.5")
plt.plot(me(np.mean(x2x,axis=0))[0], me(np.mean(x2x,axis=0))[1], "+", label="maxima sigma 1.0")
plt.plot(me(np.mean(x3x,axis=0))[0], me(np.mean(x3x,axis=0))[1], "+", label="maxima sigma 1.5")
plt.plot(me(np.mean(x4x,axis=0))[0], me(np.mean(x4x,axis=0))[1], "+", label="maxima sigma 2.0")

plt.legend()

plt.figure(figsize=(20,8))
#plt.plot(t,np.mean(x1x,axis=0), label="sigma 0.5")
#plt.plot(t,np.mean(x2x,axis=0), label="sigma 1.0")
#plt.plot(t,np.mean(x3x,axis=0), label="sigma 1.5")
#plt.plot(t,np.mean(x4x,axis=0), label="sigma 2.0")

plt.plot(me(np.mean(x1x,axis=0))[0], me(np.mean(x1x,axis=0))[1], label="maxima sigma 0.5")
plt.plot(me(np.mean(x2x,axis=0))[0], me(np.mean(x2x,axis=0))[1], label="maxima sigma 1.0")
plt.plot(me(np.mean(x3x,axis=0))[0], me(np.mean(x3x,axis=0))[1], label="maxima sigma 1.5")
plt.plot(me(np.mean(x4x,axis=0))[0], me(np.mean(x4x,axis=0))[1], label="maxima sigma 2.0")

plt.legend()

me(np.mean(x4x))[0]
me(np.mean(x4x))
me(np.mean(x4x,axis=0))
me(np.mean(x4x,axis=0))[0]
me(np.mean(x4x,axis=0))[1]
plt.figure(figsize=(20,8))
#plt.plot(t,np.mean(x1x,axis=0), label="sigma 0.5")
#plt.plot(t,np.mean(x2x,axis=0), label="sigma 1.0")
#plt.plot(t,np.mean(x3x,axis=0), label="sigma 1.5")
#plt.plot(t,np.mean(x4x,axis=0), label="sigma 2.0")

plt.plot(me(np.mean(x1x,axis=0))[0], me(np.mean(x1x,axis=0))[1], label="maxima sigma 0.5")
plt.plot(me(np.mean(x2x,axis=0))[0], me(np.mean(x2x,axis=0))[1], label="maxima sigma 1.0")
plt.plot(me(np.mean(x3x,axis=0))[0], me(np.mean(x3x,axis=0))[1], label="maxima sigma 1.5")
plt.plot(me(np.mean(x4x,axis=0))[0], me(np.mean(x4x,axis=0))[1], label="maxima sigma 2.0")

plt.legend()

plt.figure(figsize=(20,8))
#plt.plot(t,np.mean(x1x,axis=0), label="sigma 0.5")
#plt.plot(t,np.mean(x2x,axis=0), label="sigma 1.0")
#plt.plot(t,np.mean(x3x,axis=0), label="sigma 1.5")
#plt.plot(t,np.mean(x4x,axis=0), label="sigma 2.0")

plt.plot(me(np.mean(x1x,axis=0))[0], me(np.mean(x1x,axis=0))[1], 'o', label="maxima sigma 0.5")
plt.plot(me(np.mean(x2x,axis=0))[0], me(np.mean(x2x,axis=0))[1], label="maxima sigma 1.0")
plt.plot(me(np.mean(x3x,axis=0))[0], me(np.mean(x3x,axis=0))[1], label="maxima sigma 1.5")
plt.plot(me(np.mean(x4x,axis=0))[0], me(np.mean(x4x,axis=0))[1], label="maxima sigma 2.0")

plt.legend()

plt.figure(figsize=(20,8))
#plt.plot(t,np.mean(x1x,axis=0), label="sigma 0.5")
#plt.plot(t,np.mean(x2x,axis=0), label="sigma 1.0")
#plt.plot(t,np.mean(x3x,axis=0), label="sigma 1.5")
#plt.plot(t,np.mean(x4x,axis=0), label="sigma 2.0")

plt.plot(me(np.mean(x1x,axis=0))[0], me(np.mean(x1x,axis=0))[1], 'o-', label="maxima sigma 0.5")
plt.plot(me(np.mean(x2x,axis=0))[0], me(np.mean(x2x,axis=0))[1], label="maxima sigma 1.0")
plt.plot(me(np.mean(x3x,axis=0))[0], me(np.mean(x3x,axis=0))[1], label="maxima sigma 1.5")
plt.plot(me(np.mean(x4x,axis=0))[0], me(np.mean(x4x,axis=0))[1], label="maxima sigma 2.0")

plt.legend()

popt1,pcov = map(curve_fit,[3,2,1],[3,4,5])
popt1,pcov = map(curve_fit,lin,[3,2,1],[3,4,5])
popt1= map(curve_fit,lin,[3,2,1],[3,4,5])
popt1,pcov1 = curve_fit(lin,me(np.mean(x1x,axis=0))[0],me(np.mean(x1x,axis=0))[0])
popt
me(np.mean(x1x,axis=0))
popt1,pcov1 = curve_fit(lin,me(np.mean(x1x,axis=0))[0],me(np.mean(x1x,axis=0))[0])
popt1
x=range(10)
plt.plot(x,popt1[0]*x+popt1[1])
popt1[1]
plt.plot(me(np.mean(x1x,axis=0))[0], lin(me(np.mean(x1x,axis=0))[0],*popt))
plt.plot(me(np.mean(x1x,axis=0))[0], me(np.mean(x1x,axis=0))[1], label="maxima sigma 0.5")
plt.plot(me(np.mean(x1x,axis=0))[0], me(np.mean(x1x,axis=0))[1], 'o', label="maxima sigma 0.5")
xdata1 = me(np.mean(x1x, axis=0))[0]
ydata1 = me(np.mean(x1x, axis=0))[1]

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)

popt1
pcov1
xdata1 = me(np.mean(x1x, axis=0))[0]
ydata1 = me(np.mean(x1x, axis=0))[1]

xdata2 = me(np.mean(x2x, axis=0))[0]
ydata2 = me(np.mean(x2x, axis=0))[1]

xdata3 = me(np.mean(x3x, axis=0))[0]
ydata3 = me(np.mean(x3x, axis=0))[1]

xdata4 = me(np.mean(x4x, axis=0))[0]
ydata4 = me(np.mean(x4x, axis=0))[1]


popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2,ydata2)
popt3,pcov3 = curve_fit(lin,xdata3,ydata3)
popt4,pcov4 = curve_fit(lin,xdata4,ydata4)

plt.plot(xdata1, lin(xdata1,*popt1))
lin(1,3,4)
lin(2,3,4)
plt.plot(xdata1,ydata1, label='data')
plt.plot(xdata1, lin(xdata1,*popt), 'r-', label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt))
plt.legend()

xdata1
lin(xdata1,lin(xdata1,popt1[0],popt1[1]))
lin(xdata1,2,3)
lin?
lin(xdata1,popt1[0],popt1[1])
lin(xdata1,2,3)
lin(xdata1[0],2,3)
xdata100 = np.linspace(1,1000,6)
xdata1000
xdata100
lin(xdata100,2,3)
xdata1
xdata1[-]
xdata1[-1]
lin(xdata1,1,2)
lin(np.array(xdata1),1,2)
xdata1 = me(np.mean(x1x, axis=0))[0]
ydata1 = me(np.mean(x1x, axis=0))[1]

xdata2 = me(np.mean(x2x, axis=0))[0]
ydata2 = me(np.mean(x2x, axis=0))[1]

xdata3 = me(np.mean(x3x, axis=0))[0]
ydata3 = me(np.mean(x3x, axis=0))[1]

xdata4 = me(np.mean(x4x, axis=0))[0]
ydata4 = me(np.mean(x4x, axis=0))[1]

for i in [xdata1,xdata2,xdata3,xdata4,ydata1,ydata2,ydata3,ydata4]:
    i = np.array(i)



popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2,ydata2)
popt3,pcov3 = curve_fit(lin,xdata3,ydata3)
popt4,pcov4 = curve_fit(lin,xdata4,ydata4)

xdata1
np.array(xdata1)
xdata1
xdata1 = np.array(xdata1)
xdata1
for i in [xdata1,xdata2,xdata3,xdata4,ydata1,ydata2,ydata3,ydata4]:
    i = np.array(i)
    
xdata2
for i in range(10):
    i = np.array(i)
    
i
q = range(10)
for i in q:
    i = np.array(i)
    
q
q[0]
q[1]
type(q)
q = [1,2,3]
for i in q:
    i = np.array(i)
    
q
xdata1 = np.array(me(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me(np.mean(x1x, axis=0))[1])

plt.plot(xdata1,ydata1, label = 'data')
plt.plot(xdata1, lin(xdata1, *popt1), 'fit')

plt.plot(xdata1,ydata1, label = 'data')
plt.plot(xdata1, lin(xdata1, popt1[0],popt1[1]), label = 'fit')
plt.legend()

plt.plot(xdata1,ydata1, label = 'data')
plt.plot(xdata1, lin(xdata1, popt1*), label = 'fit')
plt.legend()
plt.plot(xdata1,ydata1, label = 'data')
plt.plot(xdata1, lin(xdata1, *popt1), label = 'fit')
plt.legend()

qq = [1]
qq
type(qq)
seq = [1,2,3,4,5]
map(list,seq)
list(map(list,seq))
print (map(list,seq))
for i in seq:
    i = list(i)
    
list(1)
seq
seq = [[1,2],[3,4],[5,6]]
print (map(list,seq))
list(map(list,seq))
list(map(np.array,seq))
xydata = [xdata1,ydata1,xdata2,ydata2,xdata3,ydata3,xdata4,ydata4]
xydata
list(map(np.array,xydata))
list(map(np.array,xydata))[0]
xdata3
xdata1 = np.array(me(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me(np.mean(x4x, axis=0))[1])
#xydata = [xdata1,ydata1,xdata2,ydata2,xdata3,ydata3,xdata4,ydata4]  


popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2,ydata2)
popt3,pcov3 = curve_fit(lin,xdata3,ydata3)
popt4,pcov4 = curve_fit(lin,xdata4,ydata4)


plt.plot(xdata1,ydata1, label = 'data1')
plt.plot(xdata1, lin(xdata1, *popt1), label = 'fit1')

plt.plot(xdata2,ydata2, label = 'data2')
plt.plot(xdata2, lin(xdata2, *popt2), label = 'fit2')

plt.plot(xdata3,ydata3, label = 'data3')
plt.plot(xdata3, lin(xdata3, *popt3), label = 'fit3')

plt.plot(xdata4,ydata4, label = 'data4')
plt.plot(xdata4, lin(xdata4, *popt4), label = 'fit4')

plt.plot(xdata1,ydata1, label = 'data1')
plt.plot(xdata1, lin(xdata1, *popt1), label = 'fit1')

plt.plot(xdata2,ydata2, label = 'data2')
plt.plot(xdata2, lin(xdata2, *popt2), label = 'fit2')

plt.plot(xdata3,ydata3, label = 'data3')
plt.plot(xdata3, lin(xdata3, *popt3), label = 'fit3')

plt.plot(xdata4,ydata4, label = 'data4')
plt.plot(xdata4, lin(xdata4, *popt4), label = 'fit4')


plt.legend()

xdata1
xdata2
plt.plot(xdata2)
plt.plot(xdata2,ydata2)
ydata2
ydata3
plt.plot(xdata3,ydata3)
plt.plot(xdata4,ydata4)
ydata
ydata4
plt.plot(xdata4,ydata4, 'o')
plt.plot(xdata3,ydata3, 'o')
popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:5],ydata4[0:5])


plt.plot(xdata1,ydata1, label = 'data1')
plt.plot(xdata1, lin(xdata1, *popt1), label = 'fit1')

plt.plot(xdata2,ydata2, label = 'data2')
plt.plot(xdata2, lin(xdata2, *popt2), label = 'fit2')

plt.plot(xdata3,ydata3, label = 'data3')
plt.plot(xdata3, lin(xdata3, *popt3), label = 'fit3')

plt.plot(xdata4,ydata4, label = 'data4')
plt.plot(xdata4, lin(xdata4, *popt4), label = 'fit4')


plt.legend()

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:5],ydata4[0:5])


plt.plot(xdata1,ydata1, label = 'data1')
plt.plot(xdata1, lin(xdata1, *popt1), label = 'fit1')

plt.plot(xdata2,ydata2, label = 'data2')
plt.plot(xdata2, lin(xdata2, *popt2), label = 'fit2')

plt.plot(xdata3,ydata3, label = 'data3')
plt.plot(xdata3, lin(xdata3, *popt3), label = 'fit3')

plt.plot(xdata4,ydata4, label = 'data4')
plt.plot(xdata4, lin(xdata4, *popt4), label = 'fit4')

plt.xlim(0,150)
plt.legend()

plt.plot(xdata1,ydata1, label = 'data1')
plt.plot(xdata1, lin(xdata1, *popt1), label = 'fit1')

plt.plot(xdata2,ydata2, label = 'data2')
plt.plot(xdata2, lin(xdata2, *popt2), label = 'fit2')

#plt.plot(xdata3,ydata3, label = 'data3')
#plt.plot(xdata3, lin(xdata3, *popt3), label = 'fit3')

#plt.plot(xdata4,ydata4, label = 'data4')
#plt.plot(xdata4, lin(xdata4, *popt4), label = 'fit4')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim()
plt.legend()

plt.plot(xdata1,ydata1,'-o', label = 'data1')
plt.plot(xdata1, lin(xdata1,'--' *popt1), label = 'fit1')

plt.plot(xdata2,ydata2, label = 'data2')
plt.plot(xdata2, lin(xdata2, *popt2), label = 'fit2')

#plt.plot(xdata3,ydata3, label = 'data3')
#plt.plot(xdata3, lin(xdata3, *popt3), label = 'fit3')

#plt.plot(xdata4,ydata4, label = 'data4')
#plt.plot(xdata4, lin(xdata4, *popt4), label = 'fit4')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim()
plt.legend()

plt.plot(xdata1,ydata1,'-o', label = 'data1')
plt.plot(xdata1, lin(xdata1,'--', *popt1), label = 'fit1')

plt.plot(xdata2,ydata2, label = 'data2')
plt.plot(xdata2, lin(xdata2, *popt2), label = 'fit2')

#plt.plot(xdata3,ydata3, label = 'data3')
#plt.plot(xdata3, lin(xdata3, *popt3), label = 'fit3')

#plt.plot(xdata4,ydata4, label = 'data4')
#plt.plot(xdata4, lin(xdata4, *popt4), label = 'fit4')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim()
plt.legend()

plt.plot(xdata1,ydata1,'-o', label = 'data1')
plt.plot(xdata1, lin(xdata1, *popt1), '--', label = 'fit1')

plt.plot(xdata2,ydata2, label = 'data2')
plt.plot(xdata2, lin(xdata2, *popt2), label = 'fit2')

#plt.plot(xdata3,ydata3, label = 'data3')
#plt.plot(xdata3, lin(xdata3, *popt3), label = 'fit3')

#plt.plot(xdata4,ydata4, label = 'data4')
#plt.plot(xdata4, lin(xdata4, *popt4), label = 'fit4')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim()
plt.legend()

plt.figure(figsize=(20,8))
plt.plot(xdata1,ydata1, 'o', label = 'data1')
plt.plot(xdata1, lin(xdata1, *popt1), '--', label = 'fit1')

plt.plot(xdata2,ydata2, label = 'data2')
plt.plot(xdata2, lin(xdata2, *popt2), '--', label = 'fit2')

#plt.plot(xdata3,ydata3, label = 'data3')
#plt.plot(xdata3, lin(xdata3, *popt3),'--', label = 'fit3')

#plt.plot(xdata4,ydata4, label = 'data4')
#plt.plot(xdata4, lin(xdata4, *popt4), '--', label = 'fit4')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,250)
plt.legend()

plt.figure(figsize=(14,5))
plt.plot(xdata1,ydata1, 'o', label = 'data1')
plt.plot(xdata1, lin(xdata1, *popt1), '--', label = 'fit1')

plt.plot(xdata2,ydata2, label = 'data2')
plt.plot(xdata2, lin(xdata2, *popt2), '--', label = 'fit2')

plt.plot(xdata3,ydata3, label = 'data3')
plt.plot(xdata3, lin(xdata3, *popt3),'--', label = 'fit3')

plt.plot(xdata4,ydata4, label = 'data4')
plt.plot(xdata4, lin(xdata4, *popt4), '--', label = 'fit4')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,250)
plt.legend()

plt.figure(figsize=(12,5))
plt.plot(xdata1,ydata1, 'o', label = 'data1')
plt.plot(xdata1, lin(xdata1, *popt1), '--', label = 'fit1')

plt.plot(xdata2,ydata2, label = 'data2')
plt.plot(xdata2, lin(xdata2, *popt2), '--', label = 'fit2')

plt.plot(xdata3,ydata3, label = 'data3')
plt.plot(xdata3, lin(xdata3, *popt3),'--', label = 'fit3')

plt.plot(xdata4,ydata4, label = 'data4')
plt.plot(xdata4, lin(xdata4, *popt4), '--', label = 'fit4')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,250)
plt.legend()

plt.figure(figsize=(12,5))
plt.plot(xdata1,ydata1, 'o', label = 'data1')
plt.plot(xdata1, lin(xdata1, *popt1), '--', label = 'fit1')

plt.plot(xdata2,ydata2, 'o', label = 'data2')
plt.plot(xdata2, lin(xdata2, *popt2), '--', label = 'fit2')

plt.plot(xdata3,ydata3, 'o', label = 'data3')
plt.plot(xdata3, lin(xdata3, *popt3),'--', label = 'fit3')

plt.plot(xdata4,ydata4, 'o', label = 'data4')
plt.plot(xdata4, lin(xdata4, *popt4), '--', label = 'fit4')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,250)
plt.legend()

plt.figure(figsize=(12,5))
plt.plot(xdata1,ydata1, 'ro', label = 'data1')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 'fit1')

plt.plot(xdata2,ydata2, 'mo', label = 'data2')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 'fit2')

plt.plot(xdata3,ydata3, 'bo', label = 'data3')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 'fit3')

plt.plot(xdata4,ydata4, 'ko', label = 'data4')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 'fit4')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,250)
plt.legend()

plt.figure(figsize=(12,5))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit1')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit1')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit1')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit1')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,250)
plt.legend()

plt.figure(figsize=(12,5))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,250)
plt.legend()

plt.figure(figsize=(12,7))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,250)
plt.legend()

plt.figure(figsize=(12,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,250)
plt.legend()

plt.figure(figsize=(12,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,250)
plt.legend()

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,250)
plt.legend()

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,250)
plt.ylim(-1.7,1.3)
plt.legend()

plt.plot(xdata1,ydata1)
plt.yscale('log')

plt.plot(xdata2,ydata2)
plt.yscale('log')

plt.plot(xdata3,ydata3)
plt.yscale('log')

plt.plot(xdata4,ydata4)
plt.yscale('log')

np.polyfit(xdata1,ydata1,2)
p = poly1d(z)
p = np.poly1d(z)
p = np.poly1d
p([1,2,3,4])
print(p([1,2,3,4]))
p2 = np.polyfit(xdata1,ydata1,2)
p(p2)
p(p2)(0.5)
p(p2)([1,2,3])
del p
data3poly2 = np.polyfit(xdata3,ydata3,2)
data3poly2
t
plt.plot(t,np.poly1d(data3poly2)(t))
plt.plot(t,np.poly1d(data3poly2)(t), label='deg 2 fit for data3')
plt.plot(xdata3,ydata3, label = 'data 3')
plt.legend()

plt.figure(figsize=(20,8))

plt.plot (t[:3416], run_mean(np.var(x1x,axis=0),72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(np.var(x2x,axis=0),72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(np.var(x3x,axis=0),72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(np.var(x4x,axis=0),72,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3416], run_mean(np.var(x1x,axis=0),72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(np.var(x2x,axis=0),72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(np.var(x3x,axis=0),72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(np.var(x4x,axis=0),72,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')
plt.yscale('log')
plt.legend()
plt.show()

plt.plot (t[:3416], run_mean(np.var(x1x,axis=0),72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(np.var(x2x,axis=0),72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(np.var(x3x,axis=0),72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(np.var(x4x,axis=0),72,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')
plt.yscale('log')
plt.legend()
plt.show()

plt.plot (t[:3416], run_mean(np.var(x1x,axis=0),72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(np.var(x2x,axis=0),72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(np.var(x3x,axis=0),72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(np.var(x4x,axis=0),72,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.legend()
plt.show()

plt.plot (t[:3416], run_mean(np.var(x1x,axis=0),72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(np.var(x2x,axis=0),72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(np.var(x3x,axis=0),72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(np.var(x4x,axis=0),72,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')
plt.yscale('log')
plt.xscale('log')
plt.legend()
plt.show()

plt.plot (t[:3416], run_mean(np.var(x1x,axis=0),72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(np.var(x2x,axis=0),72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(np.var(x3x,axis=0),72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(np.var(x4x,axis=0),72,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')
plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t[:3416], run_mean(phvar(x1)[0],72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(phvar(x2)[0],72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(phvar(x3)[0],72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(phvar(x4)[0],72,3), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata,ydata1)
xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)

popt1,pcov1 = curve_fit(quad,xdata,ydata1)
popt2,pcov2 = curve_fit(quad,xdata,ydata2)
popt3,pcov3 = curve_fit(quad,xdata,ydata3)
popt4,pcov4 = curve_fit(quad,xdata,ydata4)

popt1
plt.plot (xdata, ydata1, label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1), label = 'fit')

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)

popt1,pcov1 = curve_fit(quad,xdata,ydata1)
popt2,pcov2 = curve_fit(quad,xdata,ydata2)
popt3,pcov3 = curve_fit(quad,xdata,ydata3)
popt4,pcov4 = curve_fit(quad,xdata,ydata4)




plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1), label = 'fit')

plt.plot (xdata, ydata2, label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt1), label = 'fit')

plt.plot (xdata, ydata3, label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt1), label = 'fit')

plt.plot (xdata, ydata4, label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt1), label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1), label = 'fit')

plt.plot (xdata, ydata2, label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2), label = 'fit')

plt.plot (xdata, ydata3, label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3), label = 'fit')

plt.plot (xdata, ydata4, label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4), label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-' label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.legend()
plt.show()
plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.legend()
plt.show()


def expon(x, a, b, c):
    return a * np.exp(-b * x) + c

plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)
def cub(x,a,b,c,d):
    return (a*(x**3) + b*(x**2) + c*x + d)
plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)
def cub(x,a,b,c,d):
    return (a*(x**3) + b*(x**2) + c*x + d)
plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)
def cub(x,a,b,c,d):
    return (a*(x**3) + b*(x**2) + c*x + d)
plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.yscale('log')
plt.xlim(-20,150)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)
def cub(x,a,b,c,d):
    return (a*(x**3) + b*(x**2) + c*x + d)
plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.yscale('log')
plt.xlim(20,120)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xlim(20,120)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.xlim(-20,200)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.xlim(0,200)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.xlim(-5,200)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.xlim(-5,150)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.xlim(-5,150)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

plt.figure(figsize=(11,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.xlim(-5,150)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.xlim(-5,150)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xlim(-5,150)
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)

popt1,pcov1 = curve_fit(quad,xdata,ydata1)
popt2,pcov2 = curve_fit(quad,xdata,ydata2)
popt3,pcov3 = curve_fit(quad,xdata,ydata3)
popt4,pcov4 = curve_fit(quad,xdata,ydata4)




plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.legend()
plt.show()

commit = 'Redone mean(), var(x-coord), var(phase) for 1000 osc + added smoothing; fitted to line, quadratic, exponential; saved'
plt.figure(figsize=(20,8))
plt.plot (t[:3416], run_mean(phvar(x1)[0],72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(phvar(x2)[0],72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(phvar(x3)[0],72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(phvar(x4)[0],72,3), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

del commit
del q
plt.figure(figsize=(20,8))
plt.plot (t[:3416], run_mean(phvar(x1)[0],72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(phvar(x2)[0],72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(phvar(x3)[0],72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(phvar(x4)[0],72,3), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')
plt.yscale('log')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t[:3416], run_mean(phvar(x1)[0],72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(phvar(x2)[0],72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(phvar(x3)[0],72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(phvar(x4)[0],72,3), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')
plt.yscale('log')
plt.xscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(15,8))
plt.plot (t[:3416], run_mean(phvar(x1)[0],72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(phvar(x2)[0],72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(phvar(x3)[0],72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(phvar(x4)[0],72,3), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')
plt.yscale('log')
plt.xscale('log')
plt.xlim(-20,200)
plt.legend()
plt.show()

plt.figure(figsize=(15,8))
plt.plot (t[:3416], run_mean(phvar(x1)[0],72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(phvar(x2)[0],72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(phvar(x3)[0],72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(phvar(x4)[0],72,3), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')
plt.yscale('log')
plt.xscale('log')
#plt.xlim(-20,200)
plt.legend()
plt.show()

plt.figure(figsize=(15,8))
plt.plot (t[:3416], run_mean(phvar(x1)[0],72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(phvar(x2)[0],72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(phvar(x3)[0],72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(phvar(x4)[0],72,3), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')
plt.yscale('log')

plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(phvar(x1)[0],72,3)
ydata2=run_mean(phvar(x2)[0],72,3)
ydata3=run_mean(phvar(x3)[0],72,3)
ydata4=run_mean(phvar(x4)[0],72,3)

popt1,pcov1 = curve_fit(lin,xdata,ydata1)
popt2,pcov2 = curve_fit(lin,xdata,ydata2)
popt3,pcov3 = curve_fit(lin,xdata,ydata3)
popt4,pcov4 = curve_fit(lin,xdata,ydata4)

plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to linear function')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to linear function')
plt.xlabel ('time, hours')
plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to linear function')
plt.xlabel ('time, hours')
plt.yscale('log')
plt.xscale('log')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to linear function')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to linear function')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata,ydata1)
popt2,pcov2 = curve_fit(quad,xdata,ydata2)
popt3,pcov3 = curve_fit(quad,xdata,ydata3)
popt4,pcov4 = curve_fit(quad,xdata,ydata4)


plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()
################

popt1,pcov1 = curve_fit(quad,xdata,ydata1)
popt2,pcov2 = curve_fit(quad,xdata,ydata2)
popt3,pcov3 = curve_fit(quad,xdata,ydata3)
popt4,pcov4 = curve_fit(quad,xdata,ydata4)


plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()
################

plt.figure(figsize=(14,7))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

plt.figure(figsize=(14,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

plt.figure(figsize=(14,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.xscale('log')

plt.legend()
plt.show()

plt.figure(figsize=(14,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.yscale('log')
plt.xscale('log')

plt.legend()
plt.show()

plt.figure(figsize=(14,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt1,pcov1 = curve_fit(lin,xdata,ydata1)
popt1,pcov1 = curve_fit(quad,xdata,ydata1)
popt1,pcov1 = curve_fit(expon,xdata,ydata1)
state_vector = [1,1,2,2,3,3,4,4]
state_mat = np.array(state_vector).reshape(-1, 2)

state_mat
x00 = state_mat[:, 0]
y00 = state_mat[:, 1]
n00 = state_mat.shape[0]
dzdt = np.zeros((n00, 2))

x00
y00
n00
dzdt
n000=2
x000 = odeint(oscillator_system, [2,2,4,4], t, args = (([0.1]*n000,[1]*n000,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n000)],[0.0]*n000,[0.0]*n000)))

x000
np.shape(x000)
n000=2
x000 = odeint(oscillator_system, [2,2,4,4], t[0:100], args = (([0.1]*n000,[1]*n000,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n000)],[0.0]*n000,[0.0]*n000)))

x000
np.shape(x000)
clear
def oscillator(x, y, t, i, alpha, A, omega, twist, K, E): 
    # It takes x and y (as well as parameters) as vectors, then throws out dx/dt and dy/dt for every respective value
    x1 = x[i]
    y1 = y[i]

    alpha1 = alpha[i]
    A1 = A[i]
    omega1 = omega[i]
    twist1=twist[i]
    K1 = K[i]
    E1 = E[i]

    dx1dt = x1*alpha1*(A1-np.sqrt(x1**2 + y1**2)) - y1*(omega1 + twist1*(A1 - np.sqrt(x1**2 + y1**2))) + K1*(np.mean(x)) + E1
    dy1dt = y1*alpha1*(A1-np.sqrt(x1**2 + y1**2)) + x1*(omega1 + twist1*(A1 - np.sqrt(x1**2 + y1**2)))

    return dx1dt, dy1dt


# Solver of ODEs
def oscillator_system(state_vector, t, alpha, A, omega, twist, K, E):

    # It takes initial conditions as a list in form [x1,y1,x2,y2,x3,y3,x4,y4,...], 
    # where x1,y1 are initial conditions for the 1st oscillator
    # And converts it into array with 2 columns
    state_mat = np.array(state_vector).reshape(-1, 2)

    # Then we take only the 1st and only the 2nd column and put them into separate variables
    x = state_mat[:, 0]
    y = state_mat[:, 1]

    #n being the number of rows in state_map; in other words - number of sets of initial conditions, number of oscillators
    n = state_mat.shape[0]
    # Let's produce an array of the same shape as state_map
    dzdt = np.zeros((n, 2))

    #For every i-th row of state_map let's put there dx1/dt, dy1/dt 
    for i in range(n):
        dzdt[i, ] = oscillator(x, y, t, i, alpha, A, omega, twist, K, E)

    return dzdt.reshape(-1).tolist()


## ---(Mon Apr 30 15:51:38 2018)---
ran = np.random.randn
ran = numpy.random.randn
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
ran = np.random.randn
e = ran(10)
e
type(e)
e[0]
def oscillator(x, y, t, i, alpha, A, omega, twist, K, E): 
    # It takes x and y (as well as parameters) as vectors, then throws out dx/dt and dy/dt for every respective value
    x1 = x[i]
    y1 = y[i]

    alpha1 = alpha[i]
    A1 = A[i]
    omega1 = omega[i]
    twist1=twist[i]
    K1 = K[i]
    E1 = E[i]

    dx1dt = x1*alpha1*(A1-np.sqrt(x1**2 + y1**2)) - y1*(omega1 + twist1*(A1 - np.sqrt(x1**2 + y1**2))) + K1*(np.mean(x)) + E1
    dy1dt = y1*alpha1*(A1-np.sqrt(x1**2 + y1**2)) + x1*(omega1 + twist1*(A1 - np.sqrt(x1**2 + y1**2)))

    return dx1dt, dy1dt


# Solver of ODEs
def oscillator_system(state_vector, t, alpha, A, omega, twist, K, E):

    # It takes initial conditions as a list in form [x1,y1,x2,y2,x3,y3,x4,y4,...], 
    # where x1,y1 are initial conditions for the 1st oscillator
    # And converts it into array with 2 columns
    state_mat = np.array(state_vector).reshape(-1, 2)

    # Then we take only the 1st and only the 2nd column and put them into separate variables
    x = state_mat[:, 0]
    y = state_mat[:, 1]

    #n being the number of rows in state_map; in other words - number of sets of initial conditions, number of oscillators
    n = state_mat.shape[0]
    # Let's produce an array of the same shape as state_map
    dzdt = np.zeros((n, 2))

    #For every i-th row of state_map let's put there dx1/dt, dy1/dt 
    for i in range(n):
        dzdt[i, ] = oscillator(x, y, t, i, alpha, A, omega, twist, K, E)

    return dzdt.reshape(-1).tolist()

def ode_rand(iterations=1, timepoints, state0, params, randMulti):    
    solutions = []
    for i in range(iterations):
        E = randMulti*float(np.random.randn(n))
        solutions.append(odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/24],[0.0]*n,[0.0]*n, E))))
    return solutions
def ode_rand(iterations, timepoints, state0, params, randMulti):    
    solutions = []
    for i in range(iterations):
        E = randMulti*float(np.random.randn(n))
        solutions.append(odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/24],[0.0]*n,[0.0]*n, E))))
    return solutions

t11 = np.linspace(0,0.5,10)
def ode_rand(iterations, timepoints, state0, randMulti):    
    solutions = []
    for i in range(iterations):
        E = randMulti*float(np.random.randn(n))
        solutions.append(odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/24],[0.0]*n,[0.0]*n, E))))
    return solutions

ode_rand(1, t11, [2,2,3,3], 1)
n=2
ode_rand(1, t11, [2,2,3,3], 1)

def ode_rand(iterations, timepoints, state0, randMulti):    
    solutions = []
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        solutions.append(odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/24],[0.0]*n,[0.0]*n, E))))
    return solutions

n=2
ode_rand(1, t11, [2,2,3,3], 1)

def ode_rand(number_of_oscillators, iterations, timepoints, state0, randMulti):    
    n=number_of_oscillators
    solutions = []
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        solutions.append(odeint(oscillator_system, state0, timepoints, args = (([0.1]*n,[1]*n,[(np.pi*2)/24],[0.0]*n,[0.0]*n, E))))
    return solutions

ode_rand(2,1,t11,[2,2,3,3],1)
def ode_rand(number_of_oscillators, iterations, timepoints, state0, randMulti):    
    n=number_of_oscillators
    solutions = []
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        solutions.append(odeint(oscillator_system, state0, timepoints, args = (([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n, E))))
    return solutions

ode_rand(2,1,t11,[2,2,3,3],1)
x11 = ode_rand(2,1,t11,[2,2,3,3],1)
np.shape(x11)
type(x11)
x11[0]
def ode_rand(number_of_oscillators, iterations, timepoints, state0, randMulti):    
    n=number_of_oscillators
    solutions = []
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        solutions.append(odeint(oscillator_system, state0, timepoints, args = (([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n, E))))
    return solutions[0]

x11 = ode_rand(2,1,t11,[2,2,3,3],1)
type(x11)
np.shape(x11)
plt.plot(t11,x11[0])
t11
x11
x11[0]
plt.plot(t11,x11[:,0])
t22 = np.linspace(0,25,100)
t22 = np.linspace(0,25,1000)
x22 = ode_rand(2,1,t22,[2,2,3,3],1)
plt.plot(t11,x22[:,0])
plt.plot(t22,x22[:,0])
n=2
E=1
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n, E)

params
params[0]
params[1]
params[2]
params[3]
params[4]
params[5]
E = [1,1]

params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n, E)
params
a = [1]
type(a)
a
a[0]
def ode_rand(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    solutions = []
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        solutions.append(odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    return solutions[0]

params = ([0.1],[1],[(np.pi*2)/24],[0.0],[0.0])
ode_rand(2,1,t11,[2,2,3,3],params,1)
ode_rand(2,1,t11,[2,2,3,3],params,1)[-1]
a = ode_rand(2,1,t11,[2,2,3,3],params,1)
a
a[-1]
a[-1].tolist()
a[-1].tolist()[0]
a[-1][0]
def ode_rand(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    solutions = []
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        solutions.append(odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
        state0=solutions[-1].tolist()
    return solutions[0]

a = ode_rand(2,1,t11,[2,2,3,3],params,1)
b = ode_rand(2,2,t11,[2,2,3,3],params,1)
def ode_rand(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    solutions = []
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        solutions.append(odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
        #state0=solutions[-1].tolist()
    return solutions[0]

b = ode_rand(2,2,t11,[2,2,3,3],params,1)
b
b = ode_rand(2,3,t11,[2,2,3,3],params,1)
b
b[1]
b[10]
q = odeint(oscillator_system, state0, timepoints, args =((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E)))
q = odeint(oscillator_system, [1,1], t11, args =((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E)))
q
for i in range(3):
    q.append(odeint(oscillator_system, [1,1], t11, args =((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    
np.zeros((5,2))
t11
len(t11)
np.len?
np.zeros((t11,n))
np.zeros((len(t11),10))
q=np.zeros((len(t11),10))
np.shape(q)
n=2
q=np.zeros((len(t11),n*2))

q
q[0]
q
q[0,]
q[1] = np.array([1,2,3,4])
q
q[1,]
q[1]
q[2] = np.array([5,6,7,8])
q[3] = np.array([9,10,11,12])
q
q[0:5]
q[0:3]
np.shape(q[0:3])
np.shape(q)
lt = len(t11)
lt
t11
lt*10
ran(10)
10*ran(10)
100*ran(10)
timepoint=7
start=0
    end=lt
timepoint = np.linspace(1,10,7)
lt=len(timepoint)
start=0
end=lt

for i in range(5):
    print ('start: ' + start + '   ', 'end: ' + end + '   ')
lt
0+lt
solutions
q
q[0][0]
q[0:3]
q[0:2]
q[2:5]
q[2:4]
a=2
a
a*=2
a
a*=2
a
l = [1]*10
map(lambda x: x*2, l)
list(map(lambda x: x*2, l))
list(reduce(map(lambda x: x*2, l)))
from functools import reduce
list(reduce(map(lambda x: x*2, l)))

from functools import reduce
list(reduce(map(lambda x: x*2, l)),1)

from functools import reduce
list(reduce(map(lambda x: x*2, l),1))

from functools import reduce
list(reduce(map(lambda x: x*2, l),l))

def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)
    solutions = np.zeros((lt*iterations,n))
    start=0
    end=lt
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        solutions[start:end] = (odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
        start=end
        end+=lt
        #state0=solutions[-1].tolist()
    return solutions[0]

ode_rand2(2,2,t11,[2,2,3,3],params,1)

iterations=2
state0=[2,2,3,3]
timepoints=t11
lt = len(t11)
E=1
solutions=np.zeros((lt*iterations,n))
start = 0
end = lt
for i in range(iterations):
    solutions[start:end] = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E)))
    start = end
    end +=lt
    

iterations=2
state0=[2,2,3,3]
timepoints=t11
lt = len(t11)
n=2
E=[1]*n
solutions=np.zeros((lt*iterations,n))
start = 0
end = lt
for i in range(iterations):
    solutions[start:end] = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E)))
    start = end
    end +=lt
    

iterations=3
state0=[2,2,3,3]
timepoints=t11
lt = len(t11)
n=2
E=[1]*n
solutions=np.zeros((lt*iterations,n))
start = 0
end = lt
for i in range(iterations):
    solutions[start:end] = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E)))
    start = end
    end +=lt
    

iterations=3
state0=[2,2,3,3]
timepoints=t11
lt = len(t11)
n=2
E=[1]*n
solutions=np.zeros((lt*iterations,n))
start = 0
end = lt
for i in range(iterations):
    solutions[start:end+1] = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E)))
    start = end
    end +=lt
    
np.zeros((lt*iterations,n))
s = np.zeros((lt*iterations,n))
s.shape
np.zeros((lt,n*2))
lt
lt=7
n=3
np.zeros((lt,n*2))

lt=7
n=3
s=np.zeros((lt,n*2))

s.shape
lt=7
n=3
iterations=4
s=np.zeros((lt,n*2))

s
lt=7
n=3
iterations=4
s=np.zeros((lt*iterations,n*2))

s
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)
    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        solutions[start:end] = (odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
        start=end
        end+=lt
        #state0=solutions[-1].tolist()
    return solutions[0]

ode_rand2(2,3,t11,[2,2,3,3],params,1)
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)
    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        solutions[start:end] = (odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
        start=end
        end+=lt
        state0=solutions[-1].tolist()
    return solutions[0]

ode_rand2(2,3,t11,[2,2,3,3],params,1)
t11
tlt
lt
iterations
n=number_of_oscillators
    lt = len(timepoints)
    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
        solutions[start:end] = (odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
        start=end
        end+=lt
        state0=solutions[-1].tolist()
    n=number_of_oscillators
    lt = len(timepoints)
    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
        solutions[start:end] = (odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
        start=end
        end+=lt
        state0=solutions[-1].tolist()
    
    lt = 7
    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
        solutions[start:end] = (odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
        start=end
        end+=lt
        state0=solutions[-1].tolist()
    
        
lt = 7
randMulti=1
solutions = np.zeros((lt*iterations,n*2))
start=0
end=lt
for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions[start:end] = (odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions[-1].tolist()
    
        
t11=np.linspace(0,10,7)
lt = len(t11)
randMulti=1
solutions = np.zeros((lt*iterations,n*2))
start=0
end=lt
state0=[2,2,3,3]
for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions[start:end] = (odeint(oscillator_system, state0, t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions[-1].tolist()
    
n
        
t11=np.linspace(0,10,7)
lt = len(t11)
randMulti=1
solutions = np.zeros((lt*iterations,n*2))
start=0
end=lt
state0=[2,2,3,3]
n=int(len(state0)/2)
for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions[start:end] = (odeint(oscillator_system, state0, t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions[-1].tolist()
    
n
lt
        
t11=np.linspace(0,10,7)
lt = len(t11)
randMulti=1

start=0
end=lt
state0=[2,2,3,3]
n=int(len(state0)/2)
solutions = np.zeros((lt*iterations,n*2))
for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions[start:end] = (odeint(oscillator_system, state0, t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions[-1].tolist()
    
solutions
        
t11=np.linspace(0,10,7)
lt = len(t11)
randMulti=0.1

start=0
end=lt
state0=[2,2,3,3]
n=int(len(state0)/2)
solutions = np.zeros((lt*iterations,n*2))
for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions[start:end] = (odeint(oscillator_system, state0, t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions[-1].tolist()
    
        
t11=np.linspace(0,10,7)
lt = len(t11)
randMulti=0.1

start=0
end=lt
state0=[2,2,3,3]
n=int(len(state0)/2)
solutions = np.zeros((lt*iterations,n*2))
for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions[start:end] = (odeint(oscillator_system, state0, t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions[-1].tolist()
solutions

        
t11=np.linspace(0,10,7)
lt = len(t11)
randMulti=0.1

start=0
end=lt
state0=[2,2,3,3]
n=int(len(state0)/2)
solutions = np.zeros((lt*iterations,n*2))
for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions[start:end] = (odeint(oscillator_system, state0, t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions[-1].tolist()
np.round(solutions)

        
t11=np.linspace(0,10,7)
lt = len(t11)
randMulti=0.1

start=0
end=lt
state0=[2,2,3,3]
n=int(len(state0)/2)
solutions = np.zeros((lt*iterations,n*2))
for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions[start:end] = (odeint(oscillator_system, state0, t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions[-1].tolist()
np.round(solutions,3)

plt.plot(solutions[:,0])
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)
    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
        solutions[start:end] = (odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
        start=end
        end+=lt
        state0=solutions[-1].tolist()
    return solutions[0]

ode_rand(2,3,t11,[2,2,3,3],params,0.1)
ode_rand(2,4,t11,[2,2,3,3],params,0.1)
        
t11=np.linspace(0,10,7)
lt = len(t11)
randMulti=0.01

start=0
end=lt
state0=[2,2,3,3]
n=int(len(state0)/2)
solutions = np.zeros((lt*iterations,n*2))
for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions[start:end] = (odeint(oscillator_system, state0, t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions[-1].tolist()
#np.round(solutions,3)
plt.plot(t, solutions[:,0])

        
t11=np.linspace(0,10,7)
lt = len(t11)
randMulti=0.01

start=0
end=lt
state0=[2,2,3,3]
n=int(len(state0)/2)
solutions = np.zeros((lt*iterations,n*2))
for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions[start:end] = (odeint(oscillator_system, state0, t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions[-1].tolist()
#np.round(solutions,3)
plt.plot(t11, solutions[:,0])

        
t11=np.linspace(0,10,7)
lt = len(t11)
randMulti=0.01

start=0
end=lt
state0=[2,2,3,3]
n=int(len(state0)/2)
solutions = np.zeros((lt*iterations,n*2))
for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions[start:end] = (odeint(oscillator_system, state0, t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions[-1].tolist()
#np.round(solutions,3)
plt.plot(solutions[:,0])

solutions
np.round(solutions,3)
np.round(solutions,2)
np.round(solutions,3)
solutions[10]
solutions[9]
solutions[7]
        
t11=np.linspace(0,10,7)
lt = len(t11)
randMulti=0.01
iterations = 3
start=0
end=lt
state0=[2,2,3,3]
n=int(len(state0)/2)
solutions = np.zeros((lt*iterations,n*2))

for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions[start:end] = (odeint(oscillator_system, state0, t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions[-1].tolist()
#np.round(solutions,3)
plt.plot(solutions[:,0])

        
t11=np.linspace(0,10,7)
lt = len(t11)
randMulti=0.01
iterations = 1
start=0
end=lt
state0=[2,2,3,3]
n=int(len(state0)/2)
solutions = np.zeros((lt*iterations,n*2))

for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions[start:end] = (odeint(oscillator_system, state0, t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions[-1].tolist()
#np.round(solutions,3)
plt.plot(solutions[:,0])

solutions
solutions[-1]
t11
t11+10
        
t11=np.linspace(0,10,7)
lt = len(t11)
randMulti=0.01
iterations = 1
start=0
end=lt
state0=[2,2,3,3]
n=int(len(state0)/2)
solutions1 = np.zeros((lt*iterations,n*2))

for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions1[start:end] = (odeint(oscillator_system, state0, t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions1[-1].tolist()
#np.round(solutions,3)
plt.plot(t11,solutions[:,0])
plt.plot(t11+10,solutions1[:,0])

        
t11=np.linspace(0,10,7)
lt = len(t11)
randMulti=0.01
iterations = 1
start=0
end=lt
state0=solutions[-1].tolist()
n=int(len(state0)/2)
solutions1 = np.zeros((lt*iterations,n*2))

for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions1[start:end] = (odeint(oscillator_system, state0, t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions1[-1].tolist()
#np.round(solutions,3)
plt.plot(t11,solutions[:,0])
plt.plot(t11+10,solutions1[:,0])

solutions
solutions1
        
t11=np.linspace(0,10,7)
lt = len(t11)
randMulti=0.01
iterations = 1
start=0
end=lt
state0=solutions[-1].tolist()
n=int(len(state0)/2)
solutions1 = np.zeros((lt*iterations,n*2))

for i in range(iterations):
    E = randMulti*np.random.randn(n)
    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
    solutions1[start:end] = (odeint(oscillator_system, state0, t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions1[-1].tolist()
#np.round(solutions,3)
plt.plot(t11,solutions[:,0], 'o')
plt.plot(t11+10,solutions1[:,0], '+')

ode_rand2(2,1,t11,[2,2,3,3],params,0.1)
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)
    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
E
n
solutions
del solutions
del solutions1
del l
del n,lt,e,a,b,E
del end,s,
del x11,x22
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)
    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
n
E
    solutions[start:end] = (odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E))))
    start=end
    end+=lt
    state0=solutions[-1].tolist()
return solutions[0]
debugfile('/home/kalashnikov/Code/n_coupled_oscillators (STOCHASTIC).py', wdir='/home/kalashnikov/Code')
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)
    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')

        solutions[start:end] = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E)))
        start=end
        end+=lt
        state0=solutions[-1].tolist()
    return solutions[0]

ode_rand2(number_of_oscillators=1,iterations=1,timepoints=t11,state0=[2,2],params,randMulti=0.1)
ode_rand2(number_of_oscillators=1,iterations=1,timepoints=t11,state0=[2,2],params=params,randMulti=0.1)
runfile('/home/kalashnikov/Code/n_coupled_oscillators (STOCHASTIC).py', wdir='/home/kalashnikov/Code')
ode_rand2(number_of_oscillators=1,iterations=1,timepoints=t11,state0=[2,2],params=params,randMulti=0.1)
lt=10
n=2
iterations=3
solutions = np.zeros((lt*iterations,n*2))
solutions
E = randMulti*np.random.randn(n)
E
solutions[0:3]
solutions[3:3+3]
t=np.linspace(0,10,7)
ode_rand2(2,3,t,[2,2,3,3], params, 1)

def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt

    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
        print (solutions)

        solutions[start:end] = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E)))
        start=end
        end+=lt
        #state0=solutions[-1].tolist()
    return solutions[0]

def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt

    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
        print (solutions)

        solutions[start:end] = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E)))
        start=end
        end+=lt
        #state0=solutions[-1].tolist()
    return solutions

t=np.linspace(0,10,7)
ode_rand2(2,3,t,[2,2,3,3], params, 1)

solutions = np.zeros((lt*iterations,n*2))
solutions
solutions[0]
solution=np.array()
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt

    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ')
        print (solutions)

        solutions[start:end] = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E)))
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0=solutions[end].tolist()
        start=end
        end+=lt

    return solutions

t=np.linspace(0,10,7)
ode_rand2(2,3,t,[2,2,3,3], params, 1)

n=2
E=np.random.randn(n)
odeint(oscillator_system, [2,2,3,3], t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E)))

n=2
E=np.random.randn(n)
s=odeint(oscillator_system, [2,2,3,3], t11, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E)))

s
s[-2]
s[0:-2]
s[0:-1]
s[:-1]
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt

    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        print ('solutions: ', solutions, '\n\n\n')
        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E)))
        solutions[start:end] = s[0:-1]
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0=s[-1].tolist()
        start=end
        end+=lt

    return solutions

ode_rand2(2,3,t11,[2,2,3,3],params,0)
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt

    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        print ('solutions: ', solutions, '\n\n\n')
        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n,params[1]*n,params[2]*n,params[3]*n,params[4]*n, E)))
        solutions[start:end-1] = s[0:-1]
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0=s[-1].tolist()
        start=end
        end+=lt

    return solutions

ode_rand2(2,3,t11,[2,2,3,3],params,0)
t=np.linspace(0,10,3)
t
ode_rand2(2,3,t,[2,2,3,3],params,0)
s
ode_rand2(2,3,np.linspace(0,10,4),[2,2,3,3],params,0)
solutions.shape
np.linspace(0,10,4)
len(np.linspace(0,10,4))
s = ode_rand2(2,3,np.linspace(0,10,4),[2,2,3,3],params,0)
s
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt

    for i in range(iterations):
        E = randMulti*np.random.randn(n)
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        print ('solutions: ', solutions, '\n\n\n')
        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start:end-1] = s[0:-1]
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0=s[-1].tolist()
        start=end
        end+=lt

    print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    print ('solutions: ', solutions, '\n\n\n')
    return solutions

s = ode_rand2(2,3,np.linspace(0,10,4),[2,2,3,3],params,0)
runfile('/home/kalashnikov/Code/n_coupled_oscillators (STOCHASTIC).py', wdir='/home/kalashnikov/Code')
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    print ('initial solutions: ', solutions, '\n\n\n')
    for i in range(iterations):
        E = randMulti*np.random.randn(n)

        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start:end-1] = s[0:-1]
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0=s[-1].tolist()
        start=end
        end+=lt
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        print ('solutions: ', solutions, '\n\n\n')

    #print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    #print ('solutions: ', solutions, '\n\n\n')
    return solutions

s = ode_rand2(2,3,np.linspace(0,10,4),[2,2,3,3],params,0)
s
plt.plot(s[:,0])
plt.plot(s[:,0])
plt.plot(0)

plt.plot(s[:,0])
plt.plot([0]*len(s))

plt.plot(s[:,0], 'o')
plt.plot([0]*len(s))

s2 = ode_rand2(2,3,np.linspace(0,10,4),[2,2,3,3],params,0)
s2 = ode_rand2(2,10,np.linspace(0,10,4),[2,2,3,3],params,0)
plt.plot(s2[:,0], 'o')
plt.plot([0]*len(s2))

plt.plot(s2[:,0], '--')
plt.plot([0]*len(s2))

s2
clear
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    print ('initial solutions: ', solutions, '\n\n\n')
    for i in range(iterations):
        E = randMulti*np.random.randn(n)

        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start:end-1] = s[0:-1]
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0=s[-1].tolist()
        print ('this is s: ', s)
        start=end
        end+=lt
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        print ('solutions: ', solutions, '\n\n\n')

    #print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    #print ('solutions: ', solutions, '\n\n\n')
    return solutions

ode_rand2(2,3,np.linspace(0,10,4),[2,2,3,3],params,0)
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    print ('initial solutions: ', solutions, '\n\n\n')
    for i in range(iterations):
        E = randMulti*np.random.randn(n)

        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start:end-1] = s[0:-1]
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0=s[-1].tolist()
        print ('this is s: ', s)
        start=end
        end+=lt
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        print ('solutions[' + str(start) + ':'+str(end-1) + ']  ', solutions[start:end-1])
        print ('solutions: ', solutions, '\n\n\n')

    #print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    #print ('solutions: ', solutions, '\n\n\n')
    return solutions

ode_rand2(2,3,np.linspace(0,10,4),[2,2,3,3],params,0)
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    print ('initial solutions: ', solutions, '\n\n\n\n')
    for i in range(iterations):
        E = randMulti*np.random.randn(n)

        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start:end-1] = s[0:-1]
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0=s[-1].tolist()
        print ('this is s: ', s)
        start=end
        end+=lt
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        print ('solutions[' + str(start) + ':'+str(end-1) + ']  ', solutions[start:end-1], '\n')
        print ('solutions: ', solutions, '\n\n\n')

    #print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    #print ('solutions: ', solutions, '\n\n\n')
    return solutions

ode_rand2(2,3,np.linspace(0,10,4),[2,2,3,3],params,0)
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    print ('initial solutions: ', solutions, '\n\n\n\n')
    for i in range(iterations):
        E = randMulti*np.random.randn(n)

        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start:end-1] = s[0:-1]
        print ('solutions[start:end-1]  ', solutions[start:end-1], '\n')
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0=s[-1].tolist()
        print ('this is s: ', s)
        start=end
        end+=lt
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        print ('solutions[' + str(start) + ':'+str(end-1) + ']  ', solutions[start:end-1], '\n')
        print ('solutions: ', solutions, '\n\n\n')

    #print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    #print ('solutions: ', solutions, '\n\n\n')
    return solutions

ode_rand2(2,3,np.linspace(0,10,4),[2,2,3,3],params,0)
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    print ('initial solutions: ', solutions, '\n\n\n\n')
    for i in range(iterations):
        E = randMulti*np.random.randn(n)

        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start:end] = s
        print ('solutions[start:end-1]  ', solutions[start:end-1], '\n')
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0=s[-1].tolist()
        print ('this is s: ', s)
        start=end
        end+=lt
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        print ('solutions[' + str(start) + ':'+str(end-1) + ']  ', solutions[start:end-1], '\n')
        print ('solutions: ', solutions, '\n\n\n')

    #print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    #print ('solutions: ', solutions, '\n\n\n')
    return solutions

ode_rand2(2,3,np.linspace(0,10,4),[2,2,3,3],params,0)
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    print ('initial solutions: ', solutions, '\n\n\n\n')
    for i in range(iterations):
        E = randMulti*np.random.randn(n)

        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start:end] = s
        #print ('solutions[start:end-1]  ', solutions[start:end-1], '\n')
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0=s[-1].tolist()
        print ('this is s: ', s)
        print ('this is state0: ', state0)
        start=end
        end+=lt
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        #print ('solutions[' + str(start) + ':'+str(end-1) + ']  ', solutions[start:end], '\n')
        print ('solutions: ', solutions, '\n\n\n')

    #print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    #print ('solutions: ', solutions, '\n\n\n')
    return solutions

ode_rand2(2,3,np.linspace(0,10,4),[2,2,3,3],params,0)
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations,n*2))
    start=1
    end=lt
    print ('initial solutions: ', solutions, '\n\n\n\n')
    for i in range(iterations):
        E = randMulti*np.random.randn(n)

        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start-1:end] = s
        #print ('solutions[start:end-1]  ', solutions[start:end-1], '\n')
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0=s[-1].tolist()
        print ('this is s: ', s)
        print ('this is state0: ', state0)
        start=end
        end+=lt
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        #print ('solutions[' + str(start) + ':'+str(end-1) + ']  ', solutions[start:end], '\n')
        print ('solutions: ', solutions, '\n\n\n')

    #print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    #print ('solutions: ', solutions, '\n\n\n')
    return solutions

ode_rand2(2,3,np.linspace(0,10,4),[2,2,3,3],params,0)
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations,n*2))
    start=0
    end=lt
    print ('initial solutions: ', solutions, '\n\n\n\n')
    for i in range(iterations):
        E = randMulti*np.random.randn(n)

        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start:end] = s
        #print ('solutions[start:end-1]  ', solutions[start:end-1], '\n')
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0 = s[-1].tolist()
        print ('this is s: ', s)
        print ('this is state0: ', state0)
        start = end-1
        end += lt-1
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        #print ('solutions[' + str(start) + ':'+str(end-1) + ']  ', solutions[start:end], '\n')
        print ('solutions: ', solutions, '\n\n\n')

    #print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    #print ('solutions: ', solutions, '\n\n\n')
    return solutions

ode_rand2(2,3,np.linspace(0,10,4),[2,2,3,3],params,0)
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)

    solutions = np.zeros((lt*iterations-iterations+1,n*2))
    start=0
    end=lt
    print ('initial solutions: ', solutions, '\n\n\n\n')
    for i in range(iterations):
        E = randMulti*np.random.randn(n)

        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start:end] = s
        #print ('solutions[start:end-1]  ', solutions[start:end-1], '\n')
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0 = s[-1].tolist()
        print ('this is s: ', s)
        print ('this is state0: ', state0)
        start = end-1
        end += lt-1
        print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        #print ('solutions[' + str(start) + ':'+str(end-1) + ']  ', solutions[start:end], '\n')
        print ('solutions: ', solutions, '\n\n\n')

    #print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    #print ('solutions: ', solutions, '\n\n\n')
    return solutions

ode_rand2(2,3,np.linspace(0,10,4),[2,2,3,3],params,0)
ode_rand2(2,6,np.linspace(0,10,4),[2,2,3,3],params,0)
x1=ode_rand2(2,6,np.linspace(0,10,4),[2,2,3,3],params,0)
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)
    #solutions = np.zeros((lt*iterations,n*2))
    solutions = np.zeros((lt*iterations-iterations+1,n*2))
    start=0
    end=lt
    print ('initial solutions: ', solutions, '\n\n\n\n')
    for i in range(iterations):
        E = randMulti*np.random.randn(n)

        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start:end] = s
        #print ('solutions[start:end-1]  ', solutions[start:end-1], '\n')
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0 = s[-1].tolist()
        #print ('this is s: ', s)
        #print ('this is state0: ', state0)
        start = end-1
        end += lt-1
        ###print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        #print ('solutions[' + str(start) + ':'+str(end-1) + ']  ', solutions[start:end], '\n')
        #print ('solutions: ', solutions, '\n\n\n')

    #print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    #print ('solutions: ', solutions, '\n\n\n')
    return solutions

x1=ode_rand2(2,6,np.linspace(0,10,4),[2,2,3,3],params,0)
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):    
    n=number_of_oscillators
    lt = len(timepoints)
    #solutions = np.zeros((lt*iterations,n*2))
    solutions = np.zeros((lt*iterations-iterations+1,n*2))
    start=0
    end=lt
    #print ('initial solutions: ', solutions, '\n\n\n\n')
    for i in range(iterations):
        E = randMulti*np.random.randn(n)

        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start:end] = s
        #print ('solutions[start:end-1]  ', solutions[start:end-1], '\n')
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0 = s[-1].tolist()
        #print ('this is s: ', s)
        #print ('this is state0: ', state0)
        start = end-1
        end += lt-1
        ###print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        #print ('solutions[' + str(start) + ':'+str(end-1) + ']  ', solutions[start:end], '\n')
        #print ('solutions: ', solutions, '\n\n\n')

    #print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    #print ('solutions: ', solutions, '\n\n\n')
    return solutions

x1=ode_rand2(2,6,np.linspace(0,10,4),[2,2,3,3],params,0)
plt.plot(x1[:,0])
x2=ode_rand2(2,6,np.linspace(0,10,10),[2,2,3,3],params,0)
plt.plot(x2[:,0])
plt.plot(x2[:,0])
plt.xlim(7,12)

plt.plot(x2[:,0])
plt.xlim(7,12)
plt.ylim(-1.5,-0.5)

plt.plot(x2[:,0])
plt.xlim(7,12)
plt.ylim(-1.4,-0.6)

plt.plot(x2[:,0])
plt.xlim(7,12)
plt.ylim(-1.35,-0.75)

x3=ode_rand2(2,6,np.linspace(0,10,100),[2,2,3,3],params,0)
plt.plot(x3[:,0])
plt.xlim(7,12)
plt.ylim(-1.35,-0.75)

plt.plot(x3[:,0])
#plt.xlim(7,12)
#plt.ylim(-1.35,-0.75)
plt.plot(x3[:,0], 'o')
#plt.xlim(7,12)
#plt.ylim(-1.35,-0.75)
x4=ode_rand2(2,6,np.linspace(0,0.5,10),[2,2,3,3],params,0.05)
plt.plot(x4[:,0])
x4=ode_rand2(2,48,np.linspace(0,0.5,10),[2,2,3,3],params,0.05)
plt.plot(x4[:,0])
x4=ode_rand2(2,240,np.linspace(0,0.5,10),[2,2,3,3],params,0.05)
plt.plot(x4[:,0])
x4=ode_rand2(2,120,np.linspace(0,0.5,10),[2,2,3,3],params,0.05)
plt.plot(x4[:,0])
x4=ode_rand2(2,120,np.linspace(0,0.5,10),[2,2,3,3],params,0.1)
plt.plot(x4[:,0])
x4=ode_rand2(2,120,np.linspace(0,0.5,10),[2,2,3,3],params,0.5)
plt.plot(x4[:,0])
x4=ode_rand2(2,120,np.linspace(0,0.5,10),[2,2,3,3],params,1)
plt.plot(x4[:,0])
import timeit
timeit.timeit(ode_rand2(2,120,np.linspace(0,0.5,10),[2,2,3,3],params,1))
timeit.timeit('ode_rand2(2,120,np.linspace(0,0.5,10),[2,2,3,3],params,1)')
python -m timeit 'ode_rand2(2,120,np.linspace(0,0.5,10),[2,2,3,3],params,1)'
ode_ran2(2,3,[0,2,3],[2,2],params,1)
ode_rand2(2,3,[0,2,3],[2,2],params,1)
ode_rand2(1,3,[0,2,3],[2,2],params,1)

def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):   
    """The function models the behaviour of system of coupled Poincare oscillators with noise. 
    To do that, it executes odeint() function with oscillator_system as a first parameter. """

    n = number_of_oscillators
    solutions = np.zeros((len(timepoints)*iterations-iterations+1,n*2)) # Creates array of zeros of an appropriate size to store iterative executions of odeint() function

    start=0
    end=len(timepoints) # Initial start and end for the overwriting of solutions

    #print ('initial solutions: ', solutions, '\n\n\n\n')
    for i in range(iterations):
        E = randMulti*np.random.randn(n) # Creates vector of random numbers from SND

        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start:end] = s
        #print ('solutions[start:end-1]  ', solutions[start:end-1], '\n')
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0 = s[-1].tolist()
        #print ('this is s: ', s)
        #print ('this is state0: ', state0)
        start = end-1
        end += len(timepoints)-1
        ###print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        #print ('solutions[' + str(start) + ':'+str(end-1) + ']  ', solutions[start:end], '\n')
        #print ('solutions: ', solutions, '\n\n\n')

    #print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    #print ('solutions: ', solutions, '\n\n\n')
    return solutions

ode_ran2._doc_
ode_rand2._doc_
ode_rand2.__doc__
timeit.__doc__
timeit?
ode_rand2?
oscillator_system?
clear
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):   
    """The function models the behaviour of system of coupled Poincare oscillators with noise. 
    To do that, it executes odeint() function with oscillator_system as a first parameter multiple times in a row, changing each time noisy variable E to a random value drawn from standart normal distribution (SND).
    The dispersion (sigma) of SND for E is set by randMulti parameter.

    The function returns solutions in the form of np.array. The length of the array is len(timepoints)*iterations.

    Example of execution: 
    2 oscillator system executed 160 consequetive times with 10 datapoints each, 
    starting from [2,2] and [3,3] with params as all parameters except for noise, which is set explicitely by E.

    x4=ode_rand2(2,160,np.linspace(0,0.5,10),[2,2,3,3],params,0.1)
    plt.plot(x4[:,0], label = 'x-coordinate of the 1st oscillator')
    plt.legend()
    """

    n = number_of_oscillators
    solutions = np.zeros((len(timepoints)*iterations-iterations+1,n*2)) # Creates array of zeros of an appropriate size to store iterative executions of odeint() function

    start=0
    end=len(timepoints) # Initial start and end for the overwriting of solutions

    #print ('initial solutions: ', solutions, '\n\n\n\n')
    for i in range(iterations):
        E = randMulti*np.random.randn(n) # Creates vector of random numbers from SND

        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start:end] = s
        #print ('solutions[start:end-1]  ', solutions[start:end-1], '\n')
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0 = s[-1].tolist()
        #print ('this is s: ', s)
        #print ('this is state0: ', state0)
        start = end-1
        end += len(timepoints)-1
        ###print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        #print ('solutions[' + str(start) + ':'+str(end-1) + ']  ', solutions[start:end], '\n')
        #print ('solutions: ', solutions, '\n\n\n')

    #print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    #print ('solutions: ', solutions, '\n\n\n')
    return solutions

ode_rand2?
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):   
    """The function models the behaviour of system of coupled Poincare oscillators with noise. 
    To do that, it executes odeint() function with oscillator_system as a first parameter multiple times in a row, changing each time noisy variable E to a random value drawn from standart normal distribution (SND).
    The dispersion (sigma) of SND for E is set by randMulti parameter.

    The function returns solutions in the form of np.array. The length of the array is len(timepoints)*iterations.

    Example of execution: 
    2 oscillator system executed 160 consequetive times with 10 datapoints each, starting from [2,2] and [3,3] with params as all parameters except for noise, which is set explicitely by E.

    x4=ode_rand2(2,160,np.linspace(0,0.5,10),[2,2,3,3],params,0.1)
    plt.plot(x4[:,0], label = 'x-coordinate of the 1st oscillator')
    plt.legend()
    """

    n = number_of_oscillators
    solutions = np.zeros((len(timepoints)*iterations-iterations+1,n*2)) # Creates array of zeros of an appropriate size to store iterative executions of odeint() function

    start=0
    end=len(timepoints) # Initial start and end for the overwriting of solutions

    #print ('initial solutions: ', solutions, '\n\n\n\n')
    for i in range(iterations):
        E = randMulti*np.random.randn(n) # Creates vector of random numbers from SND

        s = odeint(oscillator_system, state0, timepoints, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        solutions[start:end] = s
        #print ('solutions[start:end-1]  ', solutions[start:end-1], '\n')
        # DO NOT WRITE INTO THE solutions[] THE LAST DATAPOINTS, BUT KEEP THEM IN A SEPARATE VARIABLE
        state0 = s[-1].tolist()
        #print ('this is s: ', s)
        #print ('this is state0: ', state0)
        start = end-1
        end += len(timepoints)-1
        ###print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
        #print ('solutions[' + str(start) + ':'+str(end-1) + ']  ', solutions[start:end], '\n')
        #print ('solutions: ', solutions, '\n\n\n')

    #print ('random variable: ' + str(E) + '    ', 'start: ' + str(start) + '   ', 'end: ' + str(end) + '   ', '\n')
    #print ('solutions: ', solutions, '\n\n\n')
    return solutions

ode_rand2?
x4=ode_rand2(2,160,np.linspace(0,0.5,10),[2,2,3,3],params,0.1)
len(x4)
x1=np.load("/home/kalashnikov/Code/Picsss/1000 oscillators with sigma 0.5.npy")
x1=np.load("/home/kalashnikov/Code/Variables for my code/1000 oscillators with sigma 0.5.npy")
x1x = sep(x1)[0]
plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')

t = np.linspace(0,370,3700)
plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')

del x1
clear
del x1x
del t,t11,t22,timepoint,timepoints
del s,s2,q,lt
del E,i,omeg,solutions
t = np.linspace(0,10,7)
x1 = ode_rand2(2,13,t,[2,2,3,3],params,0)

del x2,x3,x4
x1
x1.shape
clear
t = np.linspace(0,5,3)
x1 = ode_rand2(1,1,t,[2,2],params,0)

x1
t = np.linspace(0,10,3)
x2 = ode_rand2(1,1,t,[2,2],params,0)

x2
psep(x1)
sep(x1)
sep(x1)[0]
sep(x1)[0][0]
plt.plot(np.linspace(0,5,3), sep(x1)[0], label='linspace(0,5,3)')
plt.plot(np.linspace(0,10,3), sep(x2)[0], label='linspace(0,10,3)')
plt.legend()

plt.plot(np.linspace(0,5,3), sep(x1)[0][0], label='linspace(0,5,3)')
plt.plot(np.linspace(0,10,3), sep(x2)[0][0], label='linspace(0,10,3)')
plt.legend()

plt.plot(np.linspace(0,5,3), x1[:,0], 'o', label='linspace(0,5,3)')
plt.plot(np.linspace(0,10,3), x2[:,0], 'o', label='linspace(0,10,3)')
plt.legend()

plt.plot(np.linspace(0,5,3), x1[:,0], 'o', label='linspace(0,5,3)')
plt.plot(np.linspace(0,10,3), x2[:,0], '+', label='linspace(0,10,3)')
plt.legend()

x1
x2
runfile('/home/kalashnikov/Code_copy/n_coupled_oscillators (STOCHASTIC) testing.py', wdir='/home/kalashnikov/Code_copy')
t
t = np.linspace(0,5,7)
t
len(t)
t2 = np.linspace(7,5+5,7+7)
t2
plt.plot(t,[0]*len(t), 'o')
plt.plot(t2,[0]*len(t2),'+')

t2 = np.linspace(0+5,5+5,7)
plt.plot(t,[0]*len(t), 'o')
plt.plot(t2,[0]*len(t2),'+')

np.diff(t1)
np.diff(t)
np.diff(t2)
t3 = []
t3 = np.append(t)
np.append?
t = np.zeros(20)
t
t1 = np.linspace(0,5,7)
t2
t1
t2
t
np.append(t,t1)
t = np.array([])
t
np.append(t,t1)
np.append(t,t2)
t = np.append(t,t1)
t = np.append(t,t2)
t
def remdup(list):
    i=0
    while i < len(list)-1:
        if list[i] == list[i+1]:
            del list[i]
        else:
            i = i+1
    return list

l =[1,1,2,4,5,5,2,3,4,1,1,1]
remdup(l)
remdup(t)
def npremdup(list):
    i=0
    while i < len(list)-1:
        if list[i] == list[i+1]:
            np.delete (list,i)
        else:
            i = i+1
    return list

npremdup(t)
def npremdup(x):
    i=0
    while i < len(x)-1:
        if x[i] == x[i+1]:
            np.delete (x,i)
        else:
            i = i+1
    return x

npremdup(t)
t
t[0]
t[5]
t[6]
t[7]
np.delete(t,6)
def npremdup(x):
    i=0
    while i < len(x)-1:
        if x[i] == x[i+1]:
            x = np.delete (x,i)
        else:
            i = i+1
    return x

npremdup(t)
t
t1
t2
t3 = np.linspace(0,10,14)
t3
plt.plot(t1,[0]*len(t1), 'o')
plt.plot(t2,[0]*len(t2),'+')
plt.plot(t3,[0]*len(t3), '--')

plt.plot(t1,[0]*len(t1), 'o')
plt.plot(t2,[0]*len(t2),'+')
plt.plot(t3,[0]*len(t3), 'o')

t
t[0:7]
clear

def remdup(x):
    """Remove consecutive duplicates from the list"""
    i=0
    while i < len(x)-1:
        if x[i] == x[i+1]:
            del x[i]
        else:
            i = i+1
    return x


def npremdup(x):
    """Remove the consecutive duplicates from the np.array"""
    i=0
    while i < len(x)-1:
        if x[i] == x[i+1]:
            x = np.delete (x,i)
        else:
            i = i+1
    return x

t
remdup(list(t))
t
time = []
time.append(t1)
time
time.append(t2)
time
time = []
time.append(list(t1))
time.append(list(t2))
time
list(t1)
list(t1)[0]
def flat_list(l):
    return [item for sublist in l for item in sublist]

flat_list(time)
def ode_rand2(number_of_oscillators, iterations, timestart, timeend, number_of_timepoints, state0, params, randMulti):   
    """The function models the behaviour of system of coupled Poincare oscillators with noise. 
    To do that, it executes odeint() function with oscillator_system as a first parameter multiple times in a row, changing each time noisy variable E to a random value drawn from standart normal distribution (SND).
    The dispersion (sigma) of SND for E is set by randMulti parameter.

    The function returns solutions in the form of np.array. The length of the array is len(timepoints)*iterations.

    Example of execution: 
    2 oscillator system executed 160 consequetive times with 10 datapoints each, starting from [2,2] and [3,3] with params as all parameters except for noise, which is set explicitely by E.

    x4=ode_rand2(2,160,np.linspace(0,0.5,10),[2,2,3,3],params,0.1)
    plt.plot(x4[:,0], label = 'x-coordinate of the 1st oscillator')
    plt.legend()

    """

    n = number_of_oscillators
    solutions = np.zeros((number_of_timepoints*iterations-iterations+1,n*2)) # Creates array of zeros of an appropriate size to store iterative executions of odeint() function

    t = np.linspace(timestart, timeend, number_of_timepoints) # First timepoint-variable
    time = [] # Variable for storing the timepoints from all t

    start=timestart
    end=len(t) # Initial start and end for the overwriting of solutions


    for i in range(iterations):

        E = randMulti*np.random.randn(n) # Creates vector of random numbers from SND

        s = odeint(oscillator_system, state0, t, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        time.append(list(t))
        solutions[start:end] = s

        state0 = s[-1].tolist()

        start = end-1
        end += len(t)-1

        timestart, timeend = timeend, (timeend+timeend-timestart)
        t = np.linspace(timestart, timeend, number_of_timepoints) # Changing t variable to the new timestart and timeend




    return flat_list(time), solutions

x1 = ode_rand2(1,3,0,0.5,10,[2,2],params,0)
x1
len(x1[0])
len(x1[1])
def ode_rand2(number_of_oscillators, iterations, timestart, timeend, number_of_timepoints, state0, params, randMulti):   
    """The function models the behaviour of system of coupled Poincare oscillators with noise. 
    To do that, it executes odeint() function with oscillator_system as a first parameter multiple times in a row, changing each time noisy variable E to a random value drawn from standart normal distribution (SND).
    The dispersion (sigma) of SND for E is set by randMulti parameter.

    The function returns solutions in the form of np.array. The length of the array is len(timepoints)*iterations.

    Example of execution: 
    2 oscillator system executed 160 consequetive times with 10 datapoints each, starting from [2,2] and [3,3] with params as all parameters except for noise, which is set explicitely by E.

    x4=ode_rand2(2,160,np.linspace(0,0.5,10),[2,2,3,3],params,0.1)
    plt.plot(x4[:,0], label = 'x-coordinate of the 1st oscillator')
    plt.legend()

    """

    n = number_of_oscillators
    solutions = np.zeros((number_of_timepoints*iterations-iterations+1,n*2)) # Creates array of zeros of an appropriate size to store iterative executions of odeint() function

    t = np.linspace(timestart, timeend, number_of_timepoints) # First timepoint-variable
    time = [] # Variable for storing the timepoints from all t

    start=timestart
    end=len(t) # Initial start and end for the overwriting of solutions


    for i in range(iterations):

        E = randMulti*np.random.randn(n) # Creates vector of random numbers from SND

        s = odeint(oscillator_system, state0, t, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        time.append(list(t))
        solutions[start:end] = s

        state0 = s[-1].tolist()

        start = end-1
        end += len(t)-1

        timestart, timeend = timeend, (timeend+timeend-timestart)
        t = np.linspace(timestart, timeend, number_of_timepoints) # Changing t variable to the new timestart and timeend



    # "time" is a list of lists, so it should be flattened
    # because of the overlap (last element of the previoud iteration of odeint() being the first element of the new iteration of odeint())
    # The consecutive duplicates need to be removed
    return remdup(flat_list(time)), solutions

x2 = ode_rand2(1,3,0,0.5,10,[2,2],params,0)
x2[0]
x1[0]
len(x1[0])
len(x2[0])
clear
def ode_rand2(number_of_oscillators, iterations, timepoints, state0, params, randMulti):   
    """The function models the behaviour of system of coupled Poincare oscillators with noise. 
    To do that, it executes odeint() function with oscillator_system as a first parameter multiple times in a row, changing each time noisy variable E to a random value drawn from standart normal distribution (SND).
    The dispersion (sigma) of SND for E is set by randMulti parameter.

    timepoints - expects a tuple (timestart, timeend, number_of_timepoints)
    Please, always set timepoints[0] to 0.

    The function returns solutions in the form of np.array. The length of the array is len(timepoints)*iterations.

    Example of execution: 
    2 oscillator system executed 160 consequetive times with 10 datapoints each, starting from [2,2] and [3,3] with params as all parameters except for noise, which is set explicitely by E.

    x4=ode_rand2(2,160,np.linspace(0,0.5,10),[2,2,3,3],params,0.1)
    plt.plot(x4[:,0], label = 'x-coordinate of the 1st oscillator')
    plt.legend()

    """
    # Unpacking the 'timepoints' parameter
    timestart = timepoints[0]
    timeend = timepoints[1]
    number_of_timepoints = timepoints[2]

    n = number_of_oscillators # Shortcut
    solutions = np.zeros((number_of_timepoints*iterations-iterations+1,n*2)) # Creates array of zeros of an appropriate size to store iterative executions of odeint() function

    t = np.linspace(timestart, timeend, number_of_timepoints) # First timepoint-variable
    time = [] # Variable for storing the timepoints from all t

    start=0
    end=len(t) # Initial start and end for the overwriting of solutions


    for i in range(iterations):

        E = randMulti*np.random.randn(n) # Creates vector of random numbers from SND

        s = odeint(oscillator_system, state0, t, args = ((params[0]*n, params[1]*n, params[2]*n, params[3]*n, params[4]*n, E)))
        time.append(list(t))
        solutions[start:end] = s

        state0 = s[-1].tolist()

        start = end-1
        end += len(t)-1

        timestart, timeend = timeend, (timeend+timeend-timestart)
        t = np.linspace(timestart, timeend, number_of_timepoints) # Changing t variable to the new timestart and timeend



    # "time" is a list of lists, so it should be flattened
    # because of the overlap (last element of the previoud iteration of odeint() being the first element of the new iteration of odeint())
    # The consecutive duplicates need to be removed
    return remdup(flat_list(time)), solutions

clear
x4=ode_rand2(2,160,(0,0.5,10),[2,2,3,3],params,0.1)
x4
plt.plot(x4[0],[0]*len(x4[0]))
plt.plot(x4[0],[0]*len(x4[0]), 'o')
plt.plot(x4[0],[0]*len(x4[0]), 'o')
plt.xlim(0,20)

plt.plot(x4[0],[0]*len(x4[0]), 'o')
plt.xlim(0,10)

plt.plot(x4[0],[0]*len(x4[0]), 'o')
plt.xlim(0,5)

plt.plot(x4[0],[0]*len(x4[0]), 'o')
plt.xlim(0,1)

plt.plot(x4[0],[0]*len(x4[0]), 'o')
plt.xlim(0,2)

plt.figure(figsize=(20,8))
plt.plot(x4[0],[0]*len(x4[0]), 'o')
plt.xlim(0,5)

plt.figure(figsize=(20,8))
plt.plot(x4[0],[0]*len(x4[0]), 'o')
plt.xlim(0,10)

plt.figure(figsize=(20,8))
plt.plot(x4[0],[0]*len(x4[0]), 'o')
plt.xlim(0,7)

np.diff(x4[0])
d=np.diff(x4[0])
np.diff(d)
d2 = np.diff(d)
d2[1440]
d2[1439]
d2[1]
d2[1400]
d2[1420]
d2[1430]
d2[1434]
x4=ode_rand2(2,1000,(0,0.5,10),[2,2,3,3],params,0.1)
d = np.diff(x4[0])
d2 = np.diff(d)
x4[0]
x4[0][1000:]
x4[0][10000:]
x4[0][3000:]
params
params2 = ([0.1]*n, [1]*n, [0.26179]*n, [0.0]*n, [0.0]*n)
params
n
params2
runfile('/home/kalashnikov/Code_copy/n_coupled_oscillators (STOCHASTIC) testing.py', wdir='/home/kalashnikov/Code_copy')

n=2 
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n) # alpha (amplitude relaxation rate), A (amplitude), omega, twist, K (coupling), E (white noise, if any)

s1 = ode_rand2(n, 740, (0,0.5,10), [2,2,2,2], params, 0.05)
t1 = s1[0]
x1 = s1[1]

plt.figure(figsize=(20.8))
plt.plot(x1[:,0], t1, label = 'x-coordinate, 1st oscillator')
plt.plot(x1[:,2], t1, label = 'x-coordinate, 2nd oscillator')
plt.legend()
plt.show()

x1
x1[:,0]
t1
len(t1)
len(x1)
clear
plt.figure(figsize=(20.8))
plt.plot(x1[:,0], t1, label = 'x-coordinate, 1st oscillator')
plt.plot(x1[:,2], t1, label = 'x-coordinate, 2nd oscillator')
plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot(x1[:,0], t1, label = 'x-coordinate, 1st oscillator')
plt.plot(x1[:,2], t1, label = 'x-coordinate, 2nd oscillator')
plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot(t1, x1[:,0], label = 'x-coordinate, 1st oscillator')
plt.plot(t1, x1[:,2], label = 'x-coordinate, 2nd oscillator')
plt.legend()
plt.show()

s1 = ode_rand2(n, 740, (0,1,10), [2,2,2,2], params, 0.05)
t1 = s1[0]
x1 = s1[1]

plt.figure(figsize=(20,8))
plt.plot(t1, x1[:,0], label = 'x-coordinate, 1st oscillator')
plt.plot(t1, x1[:,2], label = 'x-coordinate, 2nd oscillator')
plt.legend()
plt.show()

s1 = ode_rand2(n, 740, (0,1,10), [2,2,2,2], params, 0.1)
t1 = s1[0]
x1 = s1[1]

plt.figure(figsize=(20,8))
plt.plot(t1, x1[:,0], label = 'x-coordinate, 1st oscillator')
plt.plot(t1, x1[:,2], label = 'x-coordinate, 2nd oscillator')
plt.legend()
plt.show()

s1 = ode_rand2(n, 1440, (0,0.5,10), [2,2,2,2], params, 0.1)
t1 = s1[0]
x1 = s1[1]

plt.figure(figsize=(20,8))
plt.plot(t1, x1[:,0], label = 'x-coordinate, 1st oscillator')
plt.plot(t1, x1[:,2], label = 'x-coordinate, 2nd oscillator')
plt.legend()
plt.show()

t1 = s1[0]
x1 = s1[1]

plt.figure(figsize=(20,8))
plt.plot(t1, x1[:,0], label = 'x-coordinate, 1st oscillator')
plt.plot(t1, x1[:,2], label = 'x-coordinate, 2nd oscillator')
plt.xlim(-10,150)
plt.legend()
plt.show()

n=2
state0=[2,2,2,2]
x0 = odeint(oscillator_system, state0, np.linspace(0,500,1000), args = (([0.1]*n,[1]*n,[(np.pi*2)/(24)]*n,[0.0]*n,[0.0]*n)))

n=2
state0=[2,2,2,2]
x0 = odeint(oscillator_system, state0, np.linspace(0,500,1000), args = (([0.1]*n,[1]*n,[(np.pi*2)/(24)]*n,[0.0]*n,[0.0]*n, [0]*n)))

x0
len(x0)
n=2
state0 = [2,2,3,3]
s1 = ode_rand2(n, 100, (0,0.5,10), state0, params, 0)
x1 = s1[1]
t1 = s1[0]

n=2
state0=[2,2,3,3]
x0 = odeint(oscillator_system, state0, np.linspace(0,500,1000), args = (([0.1]*n,[1]*n,[(np.pi*2)/(24)]*n,[0.0]*n,[0.0]*n, [0]*n)))

np.all([x0,x1])
np.all([x0,x1], axis=1)
np.all([x0,x1], axis=0)
x0
x1
len(x1)
len(x0)
n=2
state0=[2,2,3,3]
x0 = odeint(oscillator_system, state0, np.linspace(0,500,1000), args = (([0.1]*n,[1]*n,[(np.pi*2)/(24)]*n,[0.0]*n,[0.0]*n, [0]*n)))
x1 = ode_rand2(n, 100, (0,0.5,10), state0, ([0.1]*n,[1]*n,[(np.pi*2)/(24)]*n,[0.0]*n,[0.0]*n, [0]*n), 0)

x0
x1
n=2
state0=[2,2,3,3]
x0 = odeint(oscillator_system, state0, np.linspace(0,500,1000), args = (([0.1]*n,[1]*n,[(np.pi*2)/(24)]*n,[0.0]*n,[0.0]*n, [0]*n)))
s1 = ode_rand2(n, 100, (0,0.5,10), state0, ([0.1]*n,[1]*n,[(np.pi*2)/(24)]*n,[0.0]*n,[0.0]*n, [0]*n), 0)
x1 = s1[1]

x0
x1
plt.plot(x0[:,0])
plt.plot(x0[:,0] ;abe;='x0')
plt.plot(x1[:,0], label='x1')
plt.xlim(-10,160)
plt.legend()
plt.plot(x0[:,0] label='x0')
plt.plot(x1[:,0], label='x1')
plt.xlim(-10,160)
plt.legend()
plt.plot(x0[:,0], label='x0')
plt.plot(x1[:,0], label='x1')
plt.xlim(-10,160)
plt.legend()

plt.plot(x0[:,0], label='x0')
plt.plot(x1[:,0], label='x1')
plt.xlim(-10,300)
plt.legend()

plt.plot(x0[:,0],'o', label='x0')
plt.plot(x1[:,0],'+', label='x1')
plt.xlim(-10,300)
plt.legend()

t1 = s1[0]
plt.plot(x0[:,0],'o', label='x0')
plt.plot(t1, x1[:,0],'+', label='x1')
plt.xlim(-10,300)
plt.legend()

t1
np.linspace(0,0.5,10)
np.linspace(0,1,20)
np.arange(0,0.5,0.02)
np.arange(0,0.5,0.05)
len(np.arange(0,0.5,0.05))
len(np.arange(0.01,0.5,0.05))
np.arange(0.01,0.5,0.05)
np.arange(0.1,0.5,0.05)
np.arange?
a = np.linspace(0,3,30)
a
a1 = np.linspace(0,2,20)
a1
a
a[0:5]
a[6:10]
a[6:11]
a[5:10]
clear
a
a[0:5]
a[5:10]
a[10]
a[15]
a[20]
a[25]
a[30]
a = np.linspace(0,100,2000)
a[0]
a[5]
a
a[0:11]
a = np.linspace(0,100,1000)
a[0:11]
a = np.linspace(0,0.5,10)
a
a[0]
a[10]
a[9]
a = np.linspace(0,1000,20000)
a
len(a)
b = [a[i] for i in range(len(a)) if i%10==0]
b
b[0]
b[1]
b[2]
b[3]
b[4]
np.diff(b)
c = np.diff(b)
c[1997]
c[0]
a[0]
a[0:10]
a[10:20]
len(a[0:10])
len(a[10:20])
a[10]
a[20]
a
len(a)
len(a)/10
len(a)/100
n=2
state0=[2,2,3,3]
x0 = odeint(oscillator_system, state0, np.linspace(0,10,8), args = (([0.1]*n,[1]*n,[(np.pi*2)/(24)]*n,[0.0]*n,[0.0]*n, [0]*n)))

x0
s[-1]
x0[-1]
def ode_rand3(number_of_oscillators, timepoints, state0, params, randMulti):   
    """ARANGE INSTEAD OF LINSPACE"""
    """The function models the behaviour of system of coupled Poincare oscillators with noise. 
    To do that, it executes odeint() function with oscillator_system as a first parameter multiple times in a row, changing each time noisy variable E to a random value drawn from standart normal distribution (SND).
    The dispersion (sigma) of SND for E is set by randMulti parameter.

    timepoints - expects a np.linspace(x,y,z) so that for every (x-y)=0.5 there would be at least z=10.

    The function returns solutions in the form of np.array. The length of the array is len(timepoints)*iterations.

    Example of execution: 
    2 oscillator system executed 160 consequetive times with 10 datapoints each, starting from [2,2] and [3,3] with params as all parameters except for noise, which is set explicitely by E.

    x4=ode_rand2(2,160,(0,0.5,10),[2,2,3,3],params,0.1)
    plt.plot(x4[:,0], label = 'x-coordinate of the 1st oscillator')
    plt.legend()

    """
    t = timepoints # Shortcut
    n = number_of_oscillators # Shortcut
    solutions = np.zeros((len(t),n*2)) # Creates array of zeros of an appropriate size to store iterative executions of odeint() function

    t = np.linspace(timestart, timeend, number_of_timepoints) # First timepoint-variable
    time = [] # Variable for storing the timepoints from all t



    iterations = int(len(timepoints)/10) # because we decided that the stop should be made every 0.5h, 
    # and that there should be at least 10 dp for every 0.5h, that means that number of stops is exactly number of datapoints/10.
    start=0
    time=[]
    for i in range(iterations):

        E = randMulti*np.random.randn(n) # Creates vector of random numbers from SND

        s = odeint(oscillator_system, state0, t[start:start+10], args = ((params[0], params[1], params[2], params[3], params[4], E))) # The parameters: alpha, amplitude, omega, twist, coupling
        solutions[start:start+10] = s
        state0 = s[-1].tolist()

        start = start+10-1
        time.append(t[starttime:starttime+10])
        print ('s: ', s ,'\n')
        print ('solutions: ', solutions)
        print('start: ', start)
        print ('time: ', time)

    return time, solutions

n=1
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
x0=ode_rand3(1,np.linspace(0,1,20),[2,2],params,0)

def ode_rand3(number_of_oscillators, timepoints, state0, params, randMulti):   
    """ARANGE INSTEAD OF LINSPACE"""
    """The function models the behaviour of system of coupled Poincare oscillators with noise. 
    To do that, it executes odeint() function with oscillator_system as a first parameter multiple times in a row, changing each time noisy variable E to a random value drawn from standart normal distribution (SND).
    The dispersion (sigma) of SND for E is set by randMulti parameter.

    timepoints - expects a np.linspace(x,y,z) so that for every (x-y)=0.5 there would be at least z=10.

    The function returns solutions in the form of np.array. The length of the array is len(timepoints)*iterations.

    Example of execution: 
    2 oscillator system executed 160 consequetive times with 10 datapoints each, starting from [2,2] and [3,3] with params as all parameters except for noise, which is set explicitely by E.

    x4=ode_rand2(2,160,(0,0.5,10),[2,2,3,3],params,0.1)
    plt.plot(x4[:,0], label = 'x-coordinate of the 1st oscillator')
    plt.legend()

    """
    t = timepoints # Shortcut
    n = number_of_oscillators # Shortcut
    solutions = np.zeros((len(t),n*2)) # Creates array of zeros of an appropriate size to store iterative executions of odeint() function

    time = [] # Variable for storing the timepoints from all t



    iterations = int(len(timepoints)/10) # because we decided that the stop should be made every 0.5h, 
    # and that there should be at least 10 dp for every 0.5h, that means that number of stops is exactly number of datapoints/10.
    start=0
    time=[]
    for i in range(iterations):

        E = randMulti*np.random.randn(n) # Creates vector of random numbers from SND

        s = odeint(oscillator_system, state0, t[start:start+10], args = ((params[0], params[1], params[2], params[3], params[4], E))) # The parameters: alpha, amplitude, omega, twist, coupling
        solutions[start:start+10] = s
        state0 = s[-1].tolist()

        start = start+10-1
        time.append(t[starttime:starttime+10])
        print ('s: ', s ,'\n')
        print ('solutions: ', solutions)
        print('start: ', start)
        print ('time: ', time)

    return time, solutions

n=1
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
x0=ode_rand3(1,np.linspace(0,1,20),[2,2],params,0)

def ode_rand3(number_of_oscillators, timepoints, state0, params, randMulti):   
    """ARANGE INSTEAD OF LINSPACE"""
    """The function models the behaviour of system of coupled Poincare oscillators with noise. 
    To do that, it executes odeint() function with oscillator_system as a first parameter multiple times in a row, changing each time noisy variable E to a random value drawn from standart normal distribution (SND).
    The dispersion (sigma) of SND for E is set by randMulti parameter.

    timepoints - expects a np.linspace(x,y,z) so that for every (x-y)=0.5 there would be at least z=10.

    The function returns solutions in the form of np.array. The length of the array is len(timepoints)*iterations.

    Example of execution: 
    2 oscillator system executed 160 consequetive times with 10 datapoints each, starting from [2,2] and [3,3] with params as all parameters except for noise, which is set explicitely by E.

    x4=ode_rand2(2,160,(0,0.5,10),[2,2,3,3],params,0.1)
    plt.plot(x4[:,0], label = 'x-coordinate of the 1st oscillator')
    plt.legend()

    """
    t = timepoints # Shortcut
    n = number_of_oscillators # Shortcut
    solutions = np.zeros((len(t),n*2)) # Creates array of zeros of an appropriate size to store iterative executions of odeint() function

    time = [] # Variable for storing the timepoints from all t



    iterations = int(len(timepoints)/10) # because we decided that the stop should be made every 0.5h, 
    # and that there should be at least 10 dp for every 0.5h, that means that number of stops is exactly number of datapoints/10.
    start=0
    time=[]
    for i in range(iterations):

        E = randMulti*np.random.randn(n) # Creates vector of random numbers from SND

        s = odeint(oscillator_system, state0, t[start:start+10], args = ((params[0], params[1], params[2], params[3], params[4], E))) # The parameters: alpha, amplitude, omega, twist, coupling
        solutions[start:start+10] = s
        state0 = s[-1].tolist()

        start = start+10-1
        time.append(t[start:start+10])
        print ('s: ', s ,'\n')
        print ('solutions: ', solutions)
        print('start: ', start)
        print ('time: ', time)

    return time, solutions

n=1
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
x0=ode_rand3(1,np.linspace(0,1,20),[2,2],params,0)

t
t=np.linspace(0,1,20)
n=1
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
x0=ode_rand3(1,np.linspace(0,1,20),[2,2],params,0)

t
time
x0[0]
def ode_rand3(number_of_oscillators, timepoints, state0, params, randMulti):   
    """ARANGE INSTEAD OF LINSPACE"""
    """The function models the behaviour of system of coupled Poincare oscillators with noise. 
    To do that, it executes odeint() function with oscillator_system as a first parameter multiple times in a row, changing each time noisy variable E to a random value drawn from standart normal distribution (SND).
    The dispersion (sigma) of SND for E is set by randMulti parameter.

    timepoints - expects a np.linspace(x,y,z) so that for every (x-y)=0.5 there would be at least z=10.

    The function returns solutions in the form of np.array. The length of the array is len(timepoints)*iterations.

    Example of execution: 
    2 oscillator system executed 160 consequetive times with 10 datapoints each, starting from [2,2] and [3,3] with params as all parameters except for noise, which is set explicitely by E.

    x4=ode_rand2(2,160,(0,0.5,10),[2,2,3,3],params,0.1)
    plt.plot(x4[:,0], label = 'x-coordinate of the 1st oscillator')
    plt.legend()

    """
    t = timepoints # Shortcut
    n = number_of_oscillators # Shortcut
    iterations = int(len(timepoints)/10) # because we decided that the stop should be made every 0.5h, 
    # and that there should be at least 10 dp for every 0.5h, that means that number of stops is exactly number of datapoints/10.
    solutions = np.zeros((len(t)-iterations+1,n*2)) # Creates array of zeros of an appropriate size to store iterative executions of odeint() function

    time = [] # Variable for storing the timepoints from all t




    start=0
    time=[]
    for i in range(iterations):

        E = randMulti*np.random.randn(n) # Creates vector of random numbers from SND

        s = odeint(oscillator_system, state0, t[start:start+10], args = ((params[0], params[1], params[2], params[3], params[4], E))) # The parameters: alpha, amplitude, omega, twist, coupling
        solutions[start:start+10] = s
        state0 = s[-1].tolist()
        time.append(t[start:start+10])
        start = start+10-1

        print ('s: ', s ,'\n')
        print ('solutions: ', solutions)
        print('start: ', start)
        print ('time: ', time)

    return time, solutions

clear
t=np.linspace(0,1,20)
n=1
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
x0=ode_rand3(1,np.linspace(0,1,20),[2,2],params,0)

len(x0[0])
np.shape(x0[0])
flat_list(x0[0])
x0[1]
def ode_rand3(number_of_oscillators, timepoints, state0, params, randMulti):   
    """ARANGE INSTEAD OF LINSPACE"""
    """The function models the behaviour of system of coupled Poincare oscillators with noise. 
    To do that, it executes odeint() function with oscillator_system as a first parameter multiple times in a row, changing each time noisy variable E to a random value drawn from standart normal distribution (SND).
    The dispersion (sigma) of SND for E is set by randMulti parameter.

    timepoints - expects a np.linspace(x,y,z) so that for every (x-y)=0.5 there would be at least z=10.

    The function returns solutions in the form of np.array. The length of the array is len(timepoints)*iterations.

    Example of execution: 
    2 oscillator system executed 160 consequetive times with 10 datapoints each, starting from [2,2] and [3,3] with params as all parameters except for noise, which is set explicitely by E.

    x4=ode_rand2(2,160,(0,0.5,10),[2,2,3,3],params,0.1)
    plt.plot(x4[:,0], label = 'x-coordinate of the 1st oscillator')
    plt.legend()

    """
    t = timepoints # Shortcut
    n = number_of_oscillators # Shortcut
    iterations = int(len(timepoints)/10) # because we decided that the stop should be made every 0.5h, 
    # and that there should be at least 10 dp for every 0.5h, that means that number of stops is exactly number of datapoints/10.
    solutions = np.zeros((len(t)-iterations+1,n*2)) # Creates array of zeros of an appropriate size to store iterative executions of odeint() function

    time = [] # Variable for storing the timepoints from all t




    start=0
    time=[]
    for i in range(iterations):

        E = randMulti*np.random.randn(n) # Creates vector of random numbers from SND

        s = odeint(oscillator_system, state0, t[start:start+10], args = ((params[0], params[1], params[2], params[3], params[4], E))) # The parameters: alpha, amplitude, omega, twist, coupling
        solutions[start:start+10] = s

        state0 = s[-1].tolist()
        time.append(t[start:start+10])
        start = start+10-1

        print ('s: ', s ,'\n')
        print ('solutions: ', solutions)
        print('start: ', start)
        print ('time: ', time)

    return time, solutions

n=1
t = np.linspace(0,3,30)
x0=ode_rand3(1,t,[2,2],params,0)

len(flat_list(x0[0]))
x0
x0[0]
len(x0[1])
def ode_rand3(number_of_oscillators, timepoints, state0, params, randMulti):   
    """The function models the behaviour of system of coupled Poincare oscillators with noise. 
    To do that, it executes odeint() function with oscillator_system as a first parameter multiple times in a row, changing each time noisy variable E to a random value drawn from standart normal distribution (SND).
    The dispersion (sigma) of SND for E is set by randMulti parameter.

    timepoints - expects a np.linspace(x,y,z) so that for every (x-y)=0.5 there would be at least z=10.

    The function returns solutions in the form of np.array.

    Example of execution: 
    2 oscillator system executed 160 consequetive times with 10 datapoints each, starting from [2,2] and [3,3] with params as all parameters except for noise, which is set explicitely by E.

    x4=ode_rand2(2,160,(0,0.5,10),[2,2,3,3],params,0.1)
    plt.plot(x4[:,0], label = 'x-coordinate of the 1st oscillator')
    plt.legend()

    """
    t = timepoints # Shortcut
    n = number_of_oscillators # Shortcut
    iterations = int(len(timepoints)/10) # because we decided that the stop should be made every 0.5h, 
    # and that there should be at least 10 dp for every 0.5h, that means that number of stops is exactly number of datapoints/10.
    solutions = np.zeros((len(t)-iterations+1,n*2)) # Creates array of zeros of an appropriate size to store iterative executions of odeint() function

    time = [] # Variable for storing the timepoints from all t




    start=0
    time=[]
    for i in range(iterations):

        E = randMulti*np.random.randn(n) # Creates vector of random numbers from SND

        s = odeint(oscillator_system, state0, t[start:start+10], args = ((params[0], params[1], params[2], params[3], params[4], E))) # The parameters: alpha, amplitude, omega, twist, coupling
        solutions[start:start+10] = s

        state0 = s[-1].tolist()
        time.append(t[start:start+10])
        start = start+10-1

        print ('s: ', s ,'\n')
        print ('solutions: ', solutions)
        print('start: ', start)
        print ('time: ', time)

    return remdup(flat_list(time)), solutions

clear
n=1
t = np.linspace(0,3,30)
x0=ode_rand3(1,t,[2,2],params,0)

def ode_rand3(number_of_oscillators, timepoints, state0, params, randMulti):   
    """The function models the behaviour of system of coupled Poincare oscillators with noise. 
    To do that, it executes odeint() function with oscillator_system as a first parameter multiple times in a row, changing each time noisy variable E to a random value drawn from standart normal distribution (SND).
    The dispersion (sigma) of SND for E is set by randMulti parameter.

    timepoints - expects a np.linspace(x,y,z) so that for every (x-y)=0.5 there would be at least z=10.

    The function returns solutions in the form of np.array.

    Example of execution: 
    2 oscillator system executed 160 consequetive times with 10 datapoints each, starting from [2,2] and [3,3] with params as all parameters except for noise, which is set explicitely by E.

    x4=ode_rand2(2,160,(0,0.5,10),[2,2,3,3],params,0.1)
    plt.plot(x4[:,0], label = 'x-coordinate of the 1st oscillator')
    plt.legend()

    """
    t = timepoints # Shortcut
    n = number_of_oscillators # Shortcut
    iterations = int(len(timepoints)/10) # because we decided that the stop should be made every 0.5h, 
    # and that there should be at least 10 dp for every 0.5h, that means that number of stops is exactly number of datapoints/10.
    solutions = np.zeros((len(t)-iterations+1,n*2)) # Creates array of zeros of an appropriate size to store iterative executions of odeint() function

    time = [] # Variable for storing the timepoints from all t




    start=0
    time=[]
    for i in range(iterations):

        E = randMulti*np.random.randn(n) # Creates vector of random numbers from SND

        s = odeint(oscillator_system, state0, t[start:start+10], args = ((params[0], params[1], params[2], params[3], params[4], E))) # The parameters: alpha, amplitude, omega, twist, coupling
        solutions[start:start+10] = s

        state0 = s[-1].tolist()
        time.append(t[start:start+10])
        start = start+10-1

        #print ('s: ', s ,'\n')
        #print ('solutions: ', solutions)
        #print('start: ', start)
        #print ('time: ', time)

    return remdup(flat_list(time)), solutions

clear
n=1
t = np.linspace(0,3,30)
x0=ode_rand3(1,t,[2,2],params,0)

x0[0]
len(x0[0])
map(lambda x,y: x==y,x0[0],t)
list(map(lambda x,y: x==y,x0[0],t))
t
len(t)
n=2 
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n) 
# alpha (amplitude relaxation rate), A (amplitude), omega, twist, K (coupling), E (white noise, if any)
t = np.linspace(0,26,20*26)

s0 = ode_rand3(n,t,[2,2,3,3],params,0.05)
t0 = s0[0]
x0 = s0[1]


plt.plot(t0,x0[:,0], 'o', label = '1st x-coordinate')
plt.plot(t0,x0[:,2], '+', label = '1st x-coordinate')
plt.legend()

n=2 
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n) 
# alpha (amplitude relaxation rate), A (amplitude), omega, twist, K (coupling), E (white noise, if any)
t = np.linspace(0,26,20*26)
state0=[2,2,3,3]
s0 = ode_rand3(n,t,state0,params,0)
t0 = s0[0]
x0 = s0[1]
t1 = np.linspace(0,26,26*20)
x1 = odeint(oscillator_system, state0, np.linspace(0,26,20*26), args = (([0.1]*n,[1]*n,[(np.pi*2)/(24)]*n,[0.0]*n,[0.0]*n, [0]*n)))

plt.plot(t0,x0[:,0], 'o', label = 'ode_rand3')
plt.plot(t1,x1[:,0], '+', label = 'odeint()')

plt.legend()

n=2 
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n) 
# alpha (amplitude relaxation rate), A (amplitude), omega, twist, K (coupling), E (white noise, if any)
t = np.linspace(0,100,20*100)
state0=[2,2,3,3]
s0 = ode_rand3(n,t,state0,params,0)
t0 = s0[0]
x0 = s0[1]
t1 = np.linspace(0,100,100*20)
x1 = odeint(oscillator_system, state0, np.linspace(0,100,20*100), args = (([0.1]*n,[1]*n,[(np.pi*2)/(24)]*n,[0.0]*n,[0.0]*n, [0]*n)))

plt.plot(t0,x0[:,0], 'o', label = 'ode_rand3')
plt.plot(t1,x1[:,0], '+', label = 'odeint()')

plt.legend()


plt.plot(t0,x0[:,0], 'o', label = 'ode_rand3')
plt.plot(t1,x1[:,0], '+', label = 'odeint()')
plt.xlim(-5,40)
plt.legend()


plt.plot(t0,x0[:,0], 'o', label = 'ode_rand3')
plt.plot(t1,x1[:,0], '+', label = 'odeint()')
plt.xlim(13,25)
plt.ylim(0,1.5)
plt.legend()


plt.plot(t0,x0[:,0], 'o', label = 'ode_rand3')
plt.plot(t1,x1[:,0], '+', label = 'odeint()')
plt.xlim(20,25)
plt.ylim(0.9,1.5)
plt.legend()


plt.plot(t0,x0[:,0], 'o', label = 'ode_rand3')
plt.plot(t1,x1[:,0], '+', label = 'odeint()')
plt.xlim(20,25)
plt.ylim(0.9,1.2)
plt.legend()


plt.plot(t0,x0[:,0], 'o', label = 'ode_rand3')
plt.plot(t1,x1[:,0], '+', label = 'odeint()')
plt.xlim(20,23.5)
plt.ylim(0.9,1.2)
plt.legend()


plt.plot(t0,x0[:,0], 'o', label = 'ode_rand3')
plt.plot(t1,x1[:,0], '+', label = 'odeint()')
plt.xlim(21.5,23)
plt.ylim(0.95,1.07)
plt.legend()


plt.plot(t0,x0[:,0], 'o', label = 'ode_rand3')
plt.plot(t1,x1[:,0], '+', label = 'odeint()')
plt.xlim(-0.5,2)
#plt.ylim(0.95,1.07)
plt.legend()


plt.plot(t0,x0[:,0], 'o', label = 'ode_rand3')
plt.plot(t1,x1[:,0], '+', label = 'odeint()')
plt.xlim(1,2)
#plt.ylim(0.95,1.07)
plt.legend()

len(x0)
len(x1)
import timeit
timeit.timeit('char in text', setup='text = "sample string"; char = "g"')

imeit.timeit('char in text', setup='text = "sample string"; char = "g"')
timeit?
timeit.timeit('ode_rand3(1,np.linspace(0,50,50*20),[2,2],params,0.1')
timeit.timeit('ode_rand3(1,np.linspace(0,50,50*20),[2,2],params,0.1)')
s0 = ode_rand3(1,np.linspace(0,10,200),[2,2],params,0)
s0
timeit.timeit('ode_rand3(1,np.linspace(0,50,50*20),[2,2],params,0.1)')
import cProfile
import re

cProfile.run('ode_rand3(1,np.linspace(0,50,50*20),[2,2],params,0.1)')
timeOfEx=[]
timeOfEx.append(cProfile.run('ode_rand3(1,np.linspace(0,50,50*20),[2,2],params,0.1)'))
timeOfEx
cProfile.run('ode_rand3(2,np.linspace(0,50,50*20),[2,2,3,3],params,0.1)')
cProfile.run('ode_rand3(3,np.linspace(0,50,50*20),[2,2,3,3,4,4],params,0.1)')
params
params[0]
n=1 
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
state0 = [2,2]*n
cProfile.run('ode_rand3(n,np.linspace(0,50,50*20),state0,params,0.1)')

n=2 
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
state0 = [2,2]*n
cProfile.run('ode_rand3(n,np.linspace(0,50,50*20),state0,params,0.1)')

n=3 
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
state0 = [2,2]*n
cProfile.run('ode_rand3(n,np.linspace(0,50,50*20),state0,params,0.1)')

n=10 
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
state0 = [2,2]*n
cProfile.run('ode_rand3(n,np.linspace(0,50,50*20),state0,params,0.1)')

n=20 
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
state0 = [2,2]*n
cProfile.run('ode_rand3(n,np.linspace(0,50,50*20),state0,params,0.1)')

plt.plot([1,2,3,10,20],[0.217,0.305,0.397,1.051, 2.010])
plt.plot([1,2,3,10,20],[0.217,0.305,0.397,1.051, 2.010], 'o')
n=100 
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
state0 = [2,2]*n
cProfile.run('ode_rand3(n,np.linspace(0,50,50*20),state0,params,0.1)')

n=1 
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
state0 = [2,2]*n
cProfile.run('ode_rand3(n,np.linspace(0,400,400*20),state0,params,0.1)')

n=2 
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
state0 = [2,2]*n
cProfile.run('ode_rand3(n,np.linspace(0,400,400*20),state0,params,0.1)')

n=3 
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
state0 = [2,2]*n
cProfile.run('ode_rand3(n,np.linspace(0,400,400*20),state0,params,0.1)')

n=10 
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
state0 = [2,2]*n
cProfile.run('ode_rand3(n,np.linspace(0,400,400*20),state0,params,0.1)')

plt.plot([1,2,3,10],[1.221,1.978,2.697,8.042])
plt.plot([1,2,3,10],[1.221,1.978,2.697,8.042], 'o')
plt.plot([1,2,3,10],[1.221,1.978,2.697,8.042], 'o')
plt.xlim(0,100)


plt.plot([1,2,3,10],[1.221,1.978,2.697,8.042], 'o')
plt.xlim(0,100)
plt.ylim(0,100)

del x2,x4
del timeOfEx
del iterations,b,c,a
del a1,d,d2
del l
n=1 
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
state0 = [2,2]

x2 = ode_rand3(n,np.linspace(0,200,200*20),state0,params,0.1)
x3 = ode_rand3(n,np.linspace(0,200,200*20),state0,params,0.2)
x4 = ode_rand3(n,np.linspace(0,200,200*20),state0,params,0.5)

plt.figure(figsize=(16,8))
plt.plot(x2[0],x2[1][:,0], label='E=0.1')
plt.plot(x3[0],x3[1][:,0], label='E=0.2')
plt.plot(x4[0],x4[1][:,0], label='E=0.5')
plt.legend()

x4 = ode_rand3(n,np.linspace(0,200,200*20),state0,params,0.3)
plt.figure(figsize=(16,8))
plt.plot(x2[0],x2[1][:,0], label='E=0.1')
plt.plot(x3[0],x3[1][:,0], label='E=0.2')
plt.plot(x4[0],x4[1][:,0], label='E=0.3')
plt.legend()

plt.figure(figsize=(16,8))
plt.plot(x2[0],x2[1][:,0], label='E=0.1')
plt.plot(x3[0],x3[1][:,0], label='E=0.2')
plt.plot(x4[0],x4[1][:,0], label='E=0.3')
xlim(-5,100)
plt.legend()

plt.figure(figsize=(16,8))
plt.plot(x2[0],x2[1][:,0], label='E=0.1')
plt.plot(x3[0],x3[1][:,0], label='E=0.2')
plt.plot(x4[0],x4[1][:,0], label='E=0.3')
plt.xlim(-5,100)
plt.legend()

runx = []
for i in [x2,x3,x4]:
    runx.append(run_mean(i,72,2))
    
for i in [x2,x3,x4]:
    runx.append(run_mean(i[:,0],72,2))
    
x2
x2[1]
for i in [x2,x3,x4]:
    runx.append(run_mean(i[1][:,0],72,2))
    
runx
plt.figure(figsize=(16,8))
plt.plot(runx[0], label='E=0.1')
plt.plot(runx[1], label='E=0.2')
plt.plot(runx[2], label='E=0.3')
plt.legend()

len(runx)
run_mean(x2[1],3,1)
run_mean(x2[1],3,1).shape()
run_mean(x2[1],3,1).shape
del x1,x0
del x2,x3,x4
del time
del t,t0,t1,t11,t2,t2
del t,t0,t1,t11,t2
del t,t0,t1,t11
del s0,s1,start,t3
del state0,params2
sep?
t = np.linspace(0,20,20*20)
del t
n=2
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
state0 = [2,2]*n
t = np.linspace(0,20,20*20)

x1 = ode_rand3(n,t,state0,params,0.05)
x1
sep(x1[1])
sep(x1[1])[0]
sep(x1[1])[0][0]
sep(x1[1])[0][1]
clear
sep(x1[1])[0][1]
x1[1]
clear
x1.shape
x1[1].shape
x1[1].shape[0]
n=10
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
state0 = [2,2]*n
t = np.linspace(0,200,200*20)

x1 = ode_rand3(n,t,state0,params,0.05)
x2 = ode_rand3(n,t,state0,params,0.1)
x3 = ode_rand3(n,t,state0,params,0.2)

x1x = sep(x1[1])[0]
x2x = sep(x2[1])[0]
x3x = sep(x3[1])[0]

plt.figure(figsize=(16,8))

plt.plot(t[0:x1[1].shape[0]], np.mean(x1x, axis=0), label='E=0.05')
plt.plot(t[0:x2[1].shape[0]], np.mean(x2x, axis=0), label='E=0.1')
plt.plot(t[0:x3[1].shape[0]], np.mean(x3x, axis=0), label='E=0.2')

plt.xlabel('time, hours')
plt.ylabel('Mean of 10 oscillators with different noise intensities')
plt.legend()

len(x2x)
x2x.shape
plt.figure(figsize=(16,8))
for i in range(len(x2x)):
    plt.plot(t[0:x2[1].shape[0]], x2x[i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.legend()

x2x = sep(x2[1])[0]
t = np.linspace(0,400,400*20)
x2 = ode_rand3(n,t,state0,params,0.1)
x2x = sep(x2[1])[0]

plt.figure(figsize=(22,9))
for i in range(len(x2x)):
    plt.plot(t[0:x2[1].shape[0]], x2x[i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.legend()

n=10
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
state0 = [2,2]*n
t = np.linspace(0,420,420*20)

x1 = ode_rand3(n,t,state0,params,0.05)
x2 = ode_rand3(n,t,state0,params,0.1)
x3 = ode_rand3(n,t,state0,params,0.2)

x1x = sep(x1[1])[0]
x2x = sep(x2[1])[0]
x3x = sep(x3[1])[0]

plt.figure(figsize=(16,8))

plt.plot(t[0:x1[1].shape[0]], np.mean(x1x, axis=0), label='E=0.05')
plt.plot(t[0:x2[1].shape[0]], np.mean(x2x, axis=0), label='E=0.1')
plt.plot(t[0:x3[1].shape[0]], np.mean(x3x, axis=0), label='E=0.2')

plt.xlabel('time, hours')
plt.ylabel('Mean of 10 oscillators with different noise intensities')
plt.legend()

x4 = ode_rand3(n,t,state0,params,0.5)
x4x = sep(x4[1])[0]
plt.figure(figsize=(16,8))

plt.plot(t[0:x1[1].shape[0]], np.mean(x1x, axis=0), label='E=0.05')
plt.plot(t[0:x2[1].shape[0]], np.mean(x2x, axis=0), label='E=0.1')
plt.plot(t[0:x3[1].shape[0]], np.mean(x3x, axis=0), label='E=0.2')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 10 oscillators with different noise intensities')
plt.legend()

del runx,t,x1,x1x,x2,x2x,x3,x3x
del i,n,x4,x4x
n=1000
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
state0 = [2,2]*n
t = np.linspace(0,600,600*20)

x1 = ode_rand3(n,t,state0,params,0.05)
x2 = ode_rand3(n,t,state0,params,0.1)
x3 = ode_rand3(n,t,state0,params,0.2)
x4 = ode_rand3(n,t,state0,params,0.5)

x1x = sep(x1[1])[0]
x2x = sep(x2[1])[0]
x3x = sep(x3[1])[0]
x4x = sep(x4[1])[0]

plt.figure(figsize=(16,8))

plt.plot(t[0:x1[1].shape[0]], np.mean(x1x, axis=0), label='E=0.05')
plt.plot(t[0:x2[1].shape[0]], np.mean(x2x, axis=0), label='E=0.1')
plt.plot(t[0:x3[1].shape[0]], np.mean(x3x, axis=0), label='E=0.2')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.05",x1)
np.save?
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.05 only solutions no time",x1[1])
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.05 time",x1[0])
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.1 only solutions no time",x2[1])
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.1 time",x2[0])
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.2 only solutions no time",x3[1])
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.5 only solutions no time",x4[1])
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.5 time",x4[0])
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.2 time",x3[0])
x5 = np.load('Variables for my code/1000 oscillators with E 0.5 only solutions no time')
x5 = np.load("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.5 only solutions no time")
x5 = np.load("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.5 only solutions no time.npy")
x5[:,0][10:20]
x4[1][:,0][10:20]
b=x4[1][:,0][10:20]
a = x5[:,0][10:20]
map(lambda a,b: a==b, a,b)
list(map(lambda a,b: a==b, a,b))
del x5
plt.figure(figsize=(16,8))

plt.plot(t[0:x1[1].shape[0]], np.var(x1x, axis=0), label='E=0.05')
plt.plot(t[0:x2[1].shape[0]], np.var(x2x, axis=0), label='E=0.1')
plt.plot(t[0:x3[1].shape[0]], np.var(x3x, axis=0), label='E=0.2')
plt.plot(t[0:x4[1].shape[0]], np.var(x4x, axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Variance of x-coordinate of 1000 oscillators with different noise intensities')
plt.legend()

re?
me?
me2?
def me2(x):
    """Returns maxs(extr(np.mean(x,axis=0))).
    In other words - maxima of mean of x"""
    return me(np.mean(x, axis=0))

me2?
plt.figure(figsize=(16,8))

plt.plot(t[0:x1[1].shape[0]], me2(x1x), label='E=0.05')
plt.plot(t[0:x2[1].shape[0]], me2(x2x), label='E=0.1')
plt.plot(t[0:x3[1].shape[0]], me2(x3x), label='E=0.2')
plt.plot(t[0:x4[1].shape[0]], me2(x4x), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean (maxima only) of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:22], me2(x1x), label='E=0.05')
plt.plot(t[0:22], me2(x2x), label='E=0.1')
plt.plot(t[0:22], me2(x3x), label='E=0.2')
plt.plot(t[0:22], me2(x4x), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean (maxima only) of 1000 oscillators with different noise intensities')
plt.legend()

me2(x1x)
plt.figure(figsize=(16,8))

plt.plot(me2(x1x)[1], me2(x1x)[1], label='E=0.05')
plt.plot(me2(x2x)[1], me2(x2x)[1], label='E=0.1')
plt.plot(me2(x3x)[1], me2(x3x)[1], label='E=0.2')
plt.plot(me2(x4x)[1], me2(x4x)[1], label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean (maxima only) of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(me2(x1x)[0], me2(x1x)[1], label='E=0.05')
plt.plot(me2(x2x)[0], me2(x2x)[1], label='E=0.1')
plt.plot(me2(x3x)[0], me2(x3x)[1], label='E=0.2')
plt.plot(me2(x4x)[0], me2(x4x)[1], label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean (maxima only) of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:x1[1].shape[0]], np.mean(x1x, axis=0), label='E=0.05')
plt.plot(t[0:x2[1].shape[0]], np.mean(x2x, axis=0), label='E=0.1')
plt.plot(t[0:x3[1].shape[0]], np.mean(x3x, axis=0), label='E=0.2')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(me2(x1x)[0], me2(x1x)[1], 'o-', label='E=0.05')
plt.plot(me2(x2x)[0], me2(x2x)[1], 'o-', label='E=0.1')
plt.plot(me2(x3x)[0], me2(x3x)[1], 'o-', label='E=0.2')
plt.plot(me2(x4x)[0], me2(x4x)[1], 'o-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean (maxima only) of 1000 oscillators with different noise intensities')
plt.legend()

env?
len(x1x)
x1x.shape
np.shape(x1x)
np.shape(env(x1x))
plt.figure(figsize=(16,8))

plt.plot(t[0:x1[1].shape[0]], env(np.mean(x1x, axis=0)), label='E=0.05')
plt.plot(t[0:x2[1].shape[0]], env(np.mean(x2x, axis=0)), label='E=0.1')
plt.plot(t[0:x3[1].shape[0]], env(np.mean(x3x, axis=0)), label='E=0.2')
plt.plot(t[0:x4[1].shape[0]], env(np.mean(x4x, axis=0)), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[1:x1[1].shape[0]-1], env(np.mean(x1x, axis=0))[1:-1], label='E=0.05')
plt.plot(t[1:x2[1].shape[0]-1], env(np.mean(x2x, axis=0))[1:-1], label='E=0.1')
plt.plot(t[1:x3[1].shape[0]-1], env(np.mean(x3x, axis=0))[1:-1], label='E=0.2')
plt.plot(t[1:x4[1].shape[0]-1], env(np.mean(x4x, axis=0))[1:-1], label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[2:x1[1].shape[0]-3], env(np.mean(x1x, axis=0))[2:-3], label='E=0.05')
plt.plot(t[2:x2[1].shape[0]-3], env(np.mean(x2x, axis=0))[2:-3], label='E=0.1')
plt.plot(t[2:x3[1].shape[0]-3], env(np.mean(x3x, axis=0))[2:-3], label='E=0.2')
plt.plot(t[2:x4[1].shape[0]-3], env(np.mean(x4x, axis=0))[2:-3], label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[5:x1[1].shape[0]-7], env(np.mean(x1x, axis=0))[5:-7], label='E=0.05')
plt.plot(t[5:x2[1].shape[0]-7], env(np.mean(x2x, axis=0))[5:-7], label='E=0.1')
plt.plot(t[5:x3[1].shape[0]-7], env(np.mean(x3x, axis=0))[5:-7], label='E=0.2')
plt.plot(t[5:x4[1].shape[0]-7], env(np.mean(x4x, axis=0))[5:-7], label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[5:x1[1].shape[0]-15], env(np.mean(x1x, axis=0))[5:-15], label='E=0.05')
plt.plot(t[5:x2[1].shape[0]-15], env(np.mean(x2x, axis=0))[5:-15], label='E=0.1')
plt.plot(t[5:x3[1].shape[0]-15], env(np.mean(x3x, axis=0))[5:-15], label='E=0.2')
plt.plot(t[5:x4[1].shape[0]-15], env(np.mean(x4x, axis=0))[5:-15], label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Envelope of the mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[5:x1[1].shape[0]-17], env(np.mean(x1x, axis=0))[5:-17], label='E=0.05')
plt.plot(t[5:x2[1].shape[0]-17], env(np.mean(x2x, axis=0))[5:-17], label='E=0.1')
plt.plot(t[5:x3[1].shape[0]-17], env(np.mean(x3x, axis=0))[5:-17], label='E=0.2')
plt.plot(t[5:x4[1].shape[0]-17], env(np.mean(x4x, axis=0))[5:-17], label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Envelope of the mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[5:x1[1].shape[0]-19], env(np.mean(x1x, axis=0))[5:-19], label='E=0.05')
plt.plot(t[5:x2[1].shape[0]-19], env(np.mean(x2x, axis=0))[5:-19], label='E=0.1')
plt.plot(t[5:x3[1].shape[0]-19], env(np.mean(x3x, axis=0))[5:-19], label='E=0.2')
plt.plot(t[5:x4[1].shape[0]-19], env(np.mean(x4x, axis=0))[5:-19], label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Envelope of the mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:x3[1].shape[0]], run_mean(np.mean(x3x, axis=0), 20), label='E=0.01 smoothened')
plt.plot(t[0:x3[1].shape[0]], np.mean(x3x, axis=0), label='E=0.1 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10782], run_mean(np.mean(x3x, axis=0), 20), label='E=0.01 smoothened')
plt.plot(t[0:x3[1].shape[0]], np.mean(x3x, axis=0), label='E=0.1 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10782], run_mean(np.mean(x3x, axis=0), 20), 'o' label='E=0.01 smoothened')
plt.plot(t[0:x3[1].shape[0]], np.mean(x3x, axis=0), 'o' label='E=0.1 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()
plt.figure(figsize=(16,8))

plt.plot(t[0:10782], run_mean(np.mean(x3x, axis=0), 20), 'o' label='E=0.01 smoothened')
plt.plot(t[0:x3[1].shape[0]], np.mean(x3x, axis=0), 'o', label='E=0.1 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()
plt.figure(figsize=(16,8))

plt.plot(t[0:10782], run_mean(np.mean(x3x, axis=0), 20), 'o', label='E=0.01 smoothened')
plt.plot(t[0:x3[1].shape[0]], np.mean(x3x, axis=0), 'o', label='E=0.1 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10782], run_mean(np.mean(x3x, axis=0), 20), 'o', label='E=0.01 smoothened')
plt.plot(t[0:x3[1].shape[0]], np.mean(x3x, axis=0), 'o', label='E=0.1 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.xlim(100,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10782], run_mean(np.mean(x4x, axis=0), 20), 'o', label='E=0.5 smoothened')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), 'o', label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.xlim(100,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10782], run_mean(np.mean(x4x, axis=0), 20), 'o', label='E=0.5 smoothened')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), 'o', label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(100,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10782], run_mean(np.mean(x4x, axis=0), 20), label='E=0.5 smoothened')
#plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(100,150)
plt.legend()

plt.figure(figsize=(16,8))

#plt.plot(t[0:10782], run_mean(np.mean(x4x, axis=0), 20), label='E=0.5 smoothened')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(100,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10782], run_mean(np.mean(x4x, axis=0), 50, 2), label='E=0.5 smoothened')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(100,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10654], run_mean(np.mean(x4x, axis=0), 50, 2), label='E=0.5 smoothened')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(100,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10654], run_mean(np.mean(x4x, axis=0), 30, 2), label='E=0.5 smoothened')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(100,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10714], run_mean(np.mean(x4x, axis=0), 30, 2), label='E=0.5 smoothened')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(100,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10714], run_mean(np.mean(x4x, axis=0), 30, 2), label='E=0.5 smoothened')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10714], run_mean(np.mean(x4x, axis=0), 30, 1), label='E=0.5 smoothened')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10743], run_mean(np.mean(x4x, axis=0), 30, 1), label='E=0.5 smoothened')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10743], run_mean(np.mean(x4x, axis=0), 30, 1), label='E=0.5 smoothened')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10743], run_mean(np.mean(x4x, axis=0), 30, 1), label='E=0.5 smoothened')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.xlim(200,250)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:10743], run_mean(np.mean(x4x, axis=0), 30, 1), label='E=0.5 smoothened')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
m = me2(run_mean(np.mean(x4x, axis=0)), 30, 1)
plt.plot(m[0], m[1], label='E=0.5 smoothened')
#plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
m = me2(run_mean(np.mean(x4x, axis=0), 30, 1))
plt.plot(m[0], m[1], label='E=0.5 smoothened')
#plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
m = me(run_mean(np.mean(x4x, axis=0), 30, 1))
plt.plot(m[0], m[1], label='E=0.5 smoothened')
#plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
m = me(np.mean(x4x, axis=0))
plt.plot(m[0], m[1], label='E=0.5 smoothened')
#plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
m = me(run_mean(np.mean(x4x, axis=0), 30, 1))
plt.plot(m[0], m[1], label='E=0.5 smoothened')
#plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
m = me(run_mean(np.mean(x4x, axis=0), 30, 1))
m1 = me(np.mean(x4x, axis=0))
plt.plot(m[0], m[1], label='E=0.5 smoothened (30,2)')
plt.plot(m1[0], m1[1], label='E=0.5 not smoothened')
#plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
m = me(run_mean(np.mean(x4x, axis=0), 30, 1))
m1 = me(np.mean(x4x, axis=0))
plt.plot(m[0], m[1], label='E=0.5 smoothened (30,2), maxima')
plt.plot(m1[0], m1[1], label='E=0.5 not smoothened, maxima')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened, original data')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
m = me(run_mean(np.mean(x4x, axis=0), 30, 1))
m1 = me(np.mean(x4x, axis=0))
#plt.plot(m[0], m[1], label='E=0.5 smoothened (30,2), maxima')
plt.plot(m1[0], m1[1], label='E=0.5 not smoothened, maxima')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened, original data')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
m = me(run_mean(np.mean(x4x, axis=0), 30, 1))
m1 = me(np.mean(x4x, axis=0))
#plt.plot(m[0], m[1], label='E=0.5 smoothened (30,2), maxima')
plt.plot(m1[0], m1[1],'+', label='E=0.5 not smoothened, maxima')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened, original data')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
m = me(run_mean(np.mean(x4x, axis=0), 30, 1))
m1 = me(np.mean(x4x, axis=0))
plt.plot(m[0], m[1],'+', label='E=0.5 smoothened (30,2), maxima')
plt.plot(m1[0], m1[1],'o', label='E=0.5 not smoothened, maxima')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened, original data')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
m = me(run_mean(np.mean(x4x, axis=0), 30, 1))
m1 = me(np.mean(x4x, axis=0))
plt.plot(m[0], m[1],'+', label='E=0.5 smoothened (30,2), maxima')
#plt.plot(m1[0], m1[1],'o', label='E=0.5 not smoothened, maxima')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened, original data')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
m = me(run_mean(np.mean(x4x, axis=0), 30, 1))
m1 = me(np.mean(x4x, axis=0))
plt.plot(m[0], m[1], label='E=0.5 smoothened (30,2), only maxima')
plt.plot(m1[0], m1[1], label='E=0.5 not smoothened, only maxima')
#plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened')

plt.xlabel('time, hours')
plt.ylabel('Mean (only maxima) of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:x1[1].shape[0]], phvar(x1[1])[0], label='E=0.05')
plt.plot(t[0:x2[1].shape[0]], phvar(x2[1])[0], label='E=0.1')
plt.plot(t[0:x3[1].shape[0]], phvar(x3[1])[0], label='E=0.2')
plt.plot(t[0:x4[1].shape[0]], phvar(x4[1])[0], label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Variance of phase of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot (t[:3487], run_mean(np.var(x1x,axis=0),72,2), label = 'E=0.05')
plt.plot (t[:3487], run_mean(np.var(x2x,axis=0),72,2), label = 'E=0.1')
plt.plot (t[:3487], run_mean(np.var(x3x,axis=0),72,2), label = 'E=0.2')
plt.plot (t[:3487], run_mean(np.var(x4x,axis=0),72,2), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:10588], run_mean(np.var(x1x,axis=0),72,2), label = 'E=0.05')
plt.plot (t[:10588], run_mean(np.var(x2x,axis=0),72,2), label = 'E=0.1')
plt.plot (t[:10588], run_mean(np.var(x3x,axis=0),72,2), label = 'E=0.2')
plt.plot (t[:10588], run_mean(np.var(x4x,axis=0),72,2), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:10588], run_mean(np.var(x1x,axis=0),96,2), label = 'E=0.05')
plt.plot (t[:10588], run_mean(np.var(x2x,axis=0),96,2), label = 'E=0.1')
plt.plot (t[:10588], run_mean(np.var(x3x,axis=0),96,2), label = 'E=0.2')
plt.plot (t[:10588], run_mean(np.var(x4x,axis=0),96,2), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:10516], run_mean(np.var(x1x,axis=0),96,2), label = 'E=0.05')
plt.plot (t[:10516], run_mean(np.var(x2x,axis=0),96,2), label = 'E=0.1')
plt.plot (t[:10516], run_mean(np.var(x3x,axis=0),96,2), label = 'E=0.2')
plt.plot (t[:10516], run_mean(np.var(x4x,axis=0),96,2), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:10516], run_mean(np.var(x1x,axis=0),96,3), label = 'E=0.05')
plt.plot (t[:10516], run_mean(np.var(x2x,axis=0),96,3), label = 'E=0.1')
plt.plot (t[:10516], run_mean(np.var(x3x,axis=0),96,3), label = 'E=0.2')
plt.plot (t[:10516], run_mean(np.var(x4x,axis=0),96,3), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:10421], run_mean(np.var(x1x,axis=0),96,3), label = 'E=0.05')
plt.plot (t[:10421], run_mean(np.var(x2x,axis=0),96,3), label = 'E=0.1')
plt.plot (t[:10421], run_mean(np.var(x3x,axis=0),96,3), label = 'E=0.2')
plt.plot (t[:10421], run_mean(np.var(x4x,axis=0),96,3), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:10421], run_mean(np.var(x1x,axis=0),480,2), label = 'E=0.05')
plt.plot (t[:10421], run_mean(np.var(x2x,axis=0),480,2), label = 'E=0.1')
plt.plot (t[:10421], run_mean(np.var(x3x,axis=0),480,2), label = 'E=0.2')
plt.plot (t[:10421], run_mean(np.var(x4x,axis=0),480,2), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:9363], run_mean(np.var(x1x,axis=0),480,2), label = 'E=0.05')
plt.plot (t[:9363], run_mean(np.var(x2x,axis=0),480,2), label = 'E=0.1')
plt.plot (t[:9363], run_mean(np.var(x3x,axis=0),480,2), label = 'E=0.2')
plt.plot (t[:9363], run_mean(np.var(x4x,axis=0),480,2), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:9364], run_mean(np.var(x1x,axis=0),480,2), label = 'E=0.05')
plt.plot (t[:9364], run_mean(np.var(x2x,axis=0),480,2), label = 'E=0.1')
plt.plot (t[:9364], run_mean(np.var(x3x,axis=0),480,2), label = 'E=0.2')
plt.plot (t[:9364], run_mean(np.var(x4x,axis=0),480,2), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:9364], run_mean(np.var(x1x,axis=0),240,2), label = 'E=0.05')
plt.plot (t[:9364], run_mean(np.var(x2x,axis=0),240,2), label = 'E=0.1')
plt.plot (t[:9364], run_mean(np.var(x3x,axis=0),240,2), label = 'E=0.2')
plt.plot (t[:9364], run_mean(np.var(x4x,axis=0),240,2), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:10084], run_mean(np.var(x1x,axis=0),240,2), label = 'E=0.05')
plt.plot (t[:10084], run_mean(np.var(x2x,axis=0),240,2), label = 'E=0.1')
plt.plot (t[:10084], run_mean(np.var(x3x,axis=0),240,2), label = 'E=0.2')
plt.plot (t[:10084], run_mean(np.var(x4x,axis=0),240,2), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:10084], run_mean(np.var(x1x,axis=0),240,2), label = 'E=0.05')
plt.plot (t[:10084], run_mean(np.var(x2x,axis=0),240,2), label = 'E=0.1')
plt.plot (t[:10084], run_mean(np.var(x3x,axis=0),240,2), label = 'E=0.2')
plt.plot (t[:10084], run_mean(np.var(x4x,axis=0),240,2), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (240,2) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:10084], run_mean(np.var(x1x,axis=0),240,1), label = 'E=0.05')
plt.plot (t[:10084], run_mean(np.var(x2x,axis=0),240,1), label = 'E=0.1')
plt.plot (t[:10084], run_mean(np.var(x3x,axis=0),240,1), label = 'E=0.2')
plt.plot (t[:10084], run_mean(np.var(x4x,axis=0),240,1), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (240,2) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:10323], run_mean(np.var(x1x,axis=0),240,1), label = 'E=0.05')
plt.plot (t[:10323], run_mean(np.var(x2x,axis=0),240,1), label = 'E=0.1')
plt.plot (t[:10323], run_mean(np.var(x3x,axis=0),240,1), label = 'E=0.2')
plt.plot (t[:10323], run_mean(np.var(x4x,axis=0),240,1), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (240,2) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:10323], run_mean(np.var(x1x,axis=0),240), label = 'E=0.05')
plt.plot (t[:10323], run_mean(np.var(x2x,axis=0),240), label = 'E=0.1')
plt.plot (t[:10323], run_mean(np.var(x3x,axis=0),240), label = 'E=0.2')
plt.plot (t[:10323], run_mean(np.var(x4x,axis=0),240), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (240,2) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:10562], run_mean(np.var(x1x,axis=0),240), label = 'E=0.05')
plt.plot (t[:10562], run_mean(np.var(x2x,axis=0),240), label = 'E=0.1')
plt.plot (t[:10562], run_mean(np.var(x3x,axis=0),240), label = 'E=0.2')
plt.plot (t[:10562], run_mean(np.var(x4x,axis=0),240), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (240,1) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot(t[:10562], run_mean(phvar(x1[1])[0], 240), label='E=0.05')
plt.plot(t[:10562], run_mean(phvar(x2[1])[0], 240), label='E=0.1')
plt.plot(t[:10562], run_mean(phvar(x3[1])[0], 240), label='E=0.2')
plt.plot(t[:10562], run_mean(phvar(x4[1])[0], 240), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Variance of phase of 1000 oscillators with different noise intensities with running average (240,1)')
plt.legend()

plt.figure(figsize=(16,8))

m4good = me(run_mean(np.mean(x4x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x1x, axis=0))
m2 = me(np.mean(x2x, axis=0))
m3 = me(np.mean(x3x, axis=0))
m4 = me(np.mean(x4x, axis=0))


plt.plot(m1[0], m1[1], label = 'E=0.05')
plt.plot(m2[0], m2[1], label = 'E=0.1')
plt.plot(m3[0], m3[1], label = 'E=0.2')
plt.plot(m4[0], m4[1], label = 'E=0.5')
plt.plot(m4good[0], m4good[1],'+', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else
#plt.plot(m1[0], m1[1],'o', label='E=0.5 not smoothened, maxima')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me(run_mean(np.mean(x4x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x1x, axis=0))
m2 = me(np.mean(x2x, axis=0))
m3 = me(np.mean(x3x, axis=0))
m4 = me(np.mean(x4x, axis=0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else
#plt.plot(m1[0], m1[1],'o', label='E=0.5 not smoothened, maxima')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me(run_mean(np.mean(x4x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x1x, axis=0))
m2 = me(np.mean(x2x, axis=0))
m3 = me(np.mean(x3x, axis=0))
m4 = me(np.mean(x4x, axis=0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else
#plt.plot(m1[0], m1[1],'o', label='E=0.5 not smoothened, maxima')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

del x1,x1x,x2,x2x,x3,x3x,x4,x4x
del t
del a,b,m,m1,m2,m3,m4,m4good
del state0
x1 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/1000 oscillators with sigma 0.5")
x1 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/1000 oscillators with sigma 0.5.npy")
x2 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/1000 oscillators with sigma 1.npy")
x3 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/1000 oscillators with sigma 1.5.npy")
x4 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/1000 oscillators with sigma 2.npy")
t = np.linspace(0,370,3700)
x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.plot(t,np.mean(x1x,axis=0), label="sigma 0.5")
plt.plot(t,np.mean(x2x,axis=0), label="sigma 1.0")
plt.plot(t,np.mean(x3x,axis=0), label="sigma 1.5")
plt.plot(t,np.mean(x4x,axis=0), label="sigma 2.0")

plt.plot(me(np.mean(x1x,axis=0))[0], me(np.mean(x1x,axis=0))[1], label="maxima sigma 0.5")
plt.plot(me(np.mean(x2x,axis=0))[0], me(np.mean(x2x,axis=0))[1], label="maxima sigma 1.0")
plt.plot(me(np.mean(x3x,axis=0))[0], me(np.mean(x3x,axis=0))[1], "+", label="maxima sigma 1.5")
plt.plot(me(np.mean(x4x,axis=0))[0], me(np.mean(x4x,axis=0))[1], "+", label="maxima sigma 2.0")

plt.legend()

plt.figure(figsize=(20,8))
plt.plot(t,np.mean(x1x,axis=0), label="sigma 0.5")
plt.plot(t,np.mean(x2x,axis=0), label="sigma 1.0")
plt.plot(t,np.mean(x3x,axis=0), label="sigma 1.5")
plt.plot(t,np.mean(x4x,axis=0), label="sigma 2.0")

plt.plot(me(np.mean(x1x,axis=0))[0], me(np.mean(x1x,axis=0))[1], label="maxima sigma 0.5")
plt.plot(me(np.mean(x2x,axis=0))[0], me(np.mean(x2x,axis=0))[1], label="maxima sigma 1.0")
plt.plot(me(np.mean(x3x,axis=0))[0], me(np.mean(x3x,axis=0))[1], "+", label="maxima sigma 1.5")
plt.plot(me(np.mean(x4x,axis=0))[0], me(np.mean(x4x,axis=0))[1], "+", label="maxima sigma 2.0")

plt.legend()

xdata1 = np.array(me(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,250)
plt.ylim(-1.7,1.3)
plt.legend()

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,250)
plt.ylim(-0.5,1.3)
plt.legend()

popt1
lin?
def lin(x, a, b):
    """returns ax+b"""
    return (a*x + b)

def quad(x, a, b, c):
    """returns ax^2 + bx + c"""
    return (a*(x**2) + b*x + c)

def cub(x,a,b,c,d):
    """returns ax^3 + bx^2 + cx + d"""
    return (a*(x**3) + b*(x**2) + c*x + d)

def expon(x, a, b, c):
    """returns ae^(-bx) + c"""
    return a * np.exp(-b * x) + c

lin?
cub?
plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,200)
plt.ylim(-0.5,1.3)
plt.legend()

plt.figure(figsize=(8,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(20,200)
plt.ylim(-0.5,1.3)
plt.legend()

popt1
lin?
popt2
plt.figure(figsize=(8,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(0,200)
plt.ylim(-0.5,1.3)
plt.legend()

popt1[0]
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
tangents
def norm(x):
    return x/np.mean(x)

norm(tangents)
tang = tangents
norm(tang)
nt = norm(tang)
nt[0]/nt[2]
nt[2]/nt[0]
tang/tang[0]
tang
plt.figure(figsize=(8,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(0,200)
plt.ylim(-0.5,1.3)
plt.legend()

plt.figure(figsize=(8,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

plt.figure(figsize=(8,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.text(70, 1.05, str(tang[0]),rotation=tang[0])

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

tang1 = round(tang, 3)
round?
list(map(round(ndigits=3),tang1))
list(map(round(x,ndigits=3),tang1))
list(map(round,tang1))
list(map(round,tang))
list(map(lambda x:round(x,3),tang))
list(map(lambda x:round(x,4),tang))
def rounnl(x, n):
    """Round list x up to n digits"""
    return list(map(lambda x,n: round(x,n), x))

def roundl(x, n):
    """Round list x up to n digits"""
    return list(map(lambda x,n: round(x,n), x))

roundl(tang,3)
rounl(tang)
roundl(tang)
roundl(tang,1)
roundl(tang,1,1)
def roundl(x, n):
    """Round list x up to n digits"""
    return list(map(lambda x,n: round(x,n), x,n))

roundl(tang,3)
def roundl(x, n):
    """Round list x up to n digits"""
    return list(map(lambda x,n: round(x,n), x,[n]*len(x)))

roundl(tang,3)
roundl(tang,4)
roundl(tang,4)/np.mean(roundl(tang,4))
roundl(tang,4)/roundl(tang,4)[0]
norm?
def roundl(x, n):
    """Round list x up to n digits"""
    return list(map(lambda x,n: round(x,n), x,[n]*len(x)))

def norm(x):
    return x/np.mean(x)

clear
tangents
rtan = rounl(tangents,4)
rtan = roundl(tangents,4)
rt=rtan
del rtan
rt
xdata1 = np.array(me(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me(np.mean(x4x, axis=0))[1])
#xydata = [xdata1,ydata1,xdata2,ydata2,xdata3,ydata3,xdata4,ydata4]  


popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
def areeq(x,y):
    """Says if two arrays are equal. If one is bigger than other - shows answers only for the number of elements from the smaller one."""
    return list(map(lambda x,y:x==y, x,y))

areeq(roundl(tangents,4),rt)
clear
rt
plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')
plt.text(2, 7, 'this is\nyet another test',
         rotation=45,
         horizontalalignment='center',
         verticalalignment='top',
         multialignment='center')

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')
plt.text(2, 7, 'this is\nyet another test',
         rotation=45,
         #horizontalalignment='center',
         #verticalalignment='top',
         #multialignment='center'
)

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')
plt.text(70,1.1,str(rt[0]))

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

a = [0.26795, 0.57735, 1.0, 1.73205, 3.7321]
np.arctan2(a)
np.arctan2(a[0])
np.arctan2?
np.arctan(rt)
np.arctan(a)
np.ran2deg(np.arctan(a))
np.rad2deg(np.arctan(a))
roundl(np.rad2deg(np.arctan(a)),3)
plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')
plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

rt
list(map(np.arctan,rt))
a
np.rad2deg(a)
list(map(np.rad2deg(np.arctan),rt))
list(map(lambda x:np.rad2deg(np.arctan(x)),rt))
list(map(lambda x:np.rad2deg(np.arctan(x)),a))
def slp2ang(x):
    """Converts slope of the linear function to angles"""
    return list(map(lambda x:np.rad2deg(np.arctan(x)),x))

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')
plt.text(70,1.1,str(rt[0]), rotation=angles[0])

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')



plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

angles
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')


plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.text(70,0.4,str(rt[4]), rotation=angles[4])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')


plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.text(70,0.4,str(rt[3]), rotation=angles[3])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

slp2ang?
slp2ang(a)
a
rt
slp2ang(rt)
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')


plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.text(70,0.35,str(rt[3]), rotation=-15)

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')


plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.text(70,0.35,str(rt[3]), rotation=-20)

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')
plt.text(70,1.03,str(rt[3]), rotation=-10)

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.text(70,0.35,str(rt[3]), rotation=-25)

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')


plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

#plt.text(70,0.35,str(rt[3]), rotation=-25)

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(15,200)
plt.ylim(-0.4,1.3)

plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])
newangle = plt.gca().transData.transform_angles(angles)[0]
plt.text(70,1.03,str(rt[0]) + ' correct rotation', rotation=newangle)
plt.legend()

plt.gca().transData.transform_angles?
plt.gca.transData.transform_angles
transData.transform_angles
plt.gca?
plt.gca()
trans_angle = plt.gca().transData.transform_angles(angles,
                                                   np.array((1, 2)))[0]
                                                   
trans_angle = plt.gca().transData.transform_angles(angles,
                                                   np.array((1, 2, 3, 4)))[0]
                                                   
trans_angle = plt.gca().transData.transform_angles(angles,
                                                   np.array([1, 2, 3, 4]))[0]
                                                   
trans_angle = plt.gca().transData.transform_angles()[0]
trans_angle = plt.gca().transData.transform_angles?
ar = np.ones((2,2))
trans_angle = plt.gca().transData.transform_angles(angles, ar)

ar = np.ones((2,2))
trans_angle = plt.gca().transData.transform_angles(np.array(angles), ar)

ar = np.ones((2,2))
trans_angle = plt.gca().transData.transform_angles(np.array(,angles), ar)
angles
np.array(angles)
np.array(angles).reshape(3,1)
np.array(angles).reshape(3,0)
np.array(angles).shape
np.array(angles).reshape(,4)
np.array(angles).reshape(0,4)
np.array(angles).reshape(1,4)
np.array(angles).reshape(1,4).shape
np.array(angles).reshape(:,4)
np.array(angles).reshape(,4)
ang=np.array(angles).reshape(1,4)
ar = np.ones((2,2))
trans_angle = plt.gca().transData.transform_angles(ang, ar)

np.array(angles)
np.array(angles).transpose
np.array(angles).transpose()
np.array(angles).transpose().shape
np.array(angles).shape
np.matrix(angles)
np.matrix(angles).transpose()
ang = np.matrix(angles).transpose()
np.array(ang)
np.array(ang).shape
ar = np.ones((2,2))
trans_angle = plt.gca().transData.transform_angles(ang, ar)

ar = np.ones((4,1))
trans_angle = plt.gca().transData.transform_angles(ang, ar)

ar = np.ones((4,2))
trans_angle = plt.gca().transData.transform_angles(ang, ar)

ar = np.ones((4,2))
trans_angle = plt.gca().transData.transform_angles(ang, ar)

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

a = ''
for i in tangents:
    a = a+str(i)+' : '
    
a
a[:-2]
a[:-3]
plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(150,1.2,'The slopes of curves are'+ \ntexttang,)

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()
plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(150,1.2,'The slopes of curves are'+ \ntexttang)

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()
plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(150,1.2,'The slopes of curves are'+ \n + texttang)

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()
plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(150,1.2,'The slopes of curves are\n' + texttang)

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(130,1,'The slopes of curves are\n' + texttang)

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.05,'The slopes of curves are\n' + texttang)

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

plt.figure(figsize=(20,8))

plt.plot (t[:3416], run_mean(np.var(x1x,axis=0),72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(np.var(x2x,axis=0),72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(np.var(x3x,axis=0),72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(np.var(x4x,axis=0),72,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:3416], run_mean(np.var(x1x,axis=0),72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(np.var(x2x,axis=0),72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(np.var(x3x,axis=0),72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(np.var(x4x,axis=0),72,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)

popt1,pcov1 = curve_fit(quad,xdata,ydata1)
popt2,pcov2 = curve_fit(quad,xdata,ydata2)
popt3,pcov3 = curve_fit(quad,xdata,ydata3)
popt4,pcov4 = curve_fit(quad,xdata,ydata4)

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)

popt1,pcov1 = curve_fit(quad,xdata,ydata1)
popt2,pcov2 = curve_fit(quad,xdata,ydata2)
popt3,pcov3 = curve_fit(quad,xdata,ydata3)
popt4,pcov4 = curve_fit(quad,xdata,ydata4)

plt.figure(figsize=(20,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'bo--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.legend()
plt.show()

xdata[300]
plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'bo--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.xlim(35,65)
#plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'bo--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.xlim(35,65)
plt.ylim(0,0.5)
#plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'bo--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.xlim(45,65)
plt.ylim(0.3,0.5)
#plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(6,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'bo--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.xlim(45,65)
plt.ylim(0.3,0.5)
#plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'bo--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(45,65)
#plt.ylim(0.3,0.5)
#plt.yscale('log')
plt.legend()
plt.show()

xdata
xdata[500]
xdata[700]
xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)

popt1,pcov1 = curve_fit(quad,xdata[:900],ydata1[:900])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:900],ydata3[:900])
popt4,pcov4 = curve_fit(quad,xdata[:900],ydata4[:900])

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'bo--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(45,65)
#plt.ylim(0.3,0.5)
#plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'bo--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[50:900],ydata1[50:900])
popt2,pcov2 = curve_fit(quad,xdata[20:900],ydata2[20:900])
popt3,pcov3 = curve_fit(quad,xdata[:900],ydata3[:900])
popt4,pcov4 = curve_fit(quad,xdata[:900],ydata4[:900])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[:1200],ydata1[:1200])
popt2,pcov2 = curve_fit(quad,xdata[20:900],ydata2[20:900])
popt3,pcov3 = curve_fit(quad,xdata[:900],ydata3[:900])
popt4,pcov4 = curve_fit(quad,xdata[:900],ydata4[:900])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[:2000],ydata1[:2000])
popt2,pcov2 = curve_fit(quad,xdata[20:900],ydata2[20:900])
popt3,pcov3 = curve_fit(quad,xdata[:900],ydata3[:900])
popt4,pcov4 = curve_fit(quad,xdata[:900],ydata4[:900])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[:500],ydata1[:500])
popt2,pcov2 = curve_fit(quad,xdata[500],ydata2[500])
popt3,pcov3 = curve_fit(quad,xdata[:500],ydata3[:500])
popt4,pcov4 = curve_fit(quad,xdata[:500],ydata4[:500])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[:500],ydata1[:500])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:500],ydata3[:500])
popt4,pcov4 = curve_fit(quad,xdata[:500],ydata4[:500])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[:700],ydata1[:700])
popt2,pcov2 = curve_fit(quad,xdata[:600],ydata2[:600])
popt3,pcov3 = curve_fit(quad,xdata[:500],ydata3[:500])
popt4,pcov4 = curve_fit(quad,xdata[:400],ydata4[:400])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:700],ydata3[:700])
popt4,pcov4 = curve_fit(quad,xdata[:500],ydata4[:500])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:700],ydata3[:700])
popt4,pcov4 = curve_fit(quad,xdata[:500],ydata4[:500])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
#plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:600],ydata3[:600])
popt4,pcov4 = curve_fit(quad,xdata[:400],ydata4[:400])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
#plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:600],ydata3[:600])
popt4,pcov4 = curve_fit(quad,xdata[:400],ydata4[:400])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:600],ydata3[:600])
popt4,pcov4 = curve_fit(quad,xdata[:400],ydata4[:400])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
#plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:600],ydata3[:600])
popt4,pcov4 = curve_fit(quad,xdata[:400],ydata4[:400])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(quad,xdata[:300],ydata4[:300])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(quad,xdata[:300],ydata4[:300])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
#plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(quad,xdata[:300],ydata4[:300])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(np.var(x1x,axis=0),72,3)
ydata2=run_mean(np.var(x2x,axis=0),72,3)
ydata3=run_mean(np.var(x3x,axis=0),72,3)
ydata4=run_mean(np.var(x4x,axis=0),72,3)
popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(quad,xdata[:300],ydata4[:300])

plt.figure(figsize=(16,8))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')
plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function in the very beginning')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3487], run_mean(np.var(x1x,axis=0),72,2), label = 'sigma=0.5')
plt.plot (t[:3487], run_mean(np.var(x2x,axis=0),72,2), label = 'sigma=1')
plt.plot (t[:3487], run_mean(np.var(x3x,axis=0),72,2), label = 'sigma=1.5')
plt.plot (t[:3487], run_mean(np.var(x4x,axis=0),72,2), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3)')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3487], run_mean(np.var(x1x,axis=0),72,2), label = 'sigma=0.5')
plt.plot (t[:3487], run_mean(np.var(x2x,axis=0),72,2), label = 'sigma=1')
plt.plot (t[:3487], run_mean(np.var(x3x,axis=0),72,2), label = 'sigma=1.5')
plt.plot (t[:3487], run_mean(np.var(x4x,axis=0),72,2), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,3)')
plt.xlabel ('time, hours')

#plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3416], run_mean(np.var(x1x,axis=0),72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(np.var(x2x,axis=0),72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(np.var(x3x,axis=0),72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(np.var(x4x,axis=0),72,3), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3416], run_mean(np.var(x1x,axis=0),120,0), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(np.var(x2x,axis=0),120,0), label = 'sigma=1')
plt.plot (t[:3416], run_mean(np.var(x3x,axis=0),120,0), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(np.var(x4x,axis=0),120,0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3581], run_mean(np.var(x1x,axis=0),120,0), label = 'sigma=0.5')
plt.plot (t[:3581], run_mean(np.var(x2x,axis=0),120,0), label = 'sigma=1')
plt.plot (t[:3581], run_mean(np.var(x3x,axis=0),120,0), label = 'sigma=1.5')
plt.plot (t[:3581], run_mean(np.var(x4x,axis=0),120,0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3581], run_mean(np.var(x1x,axis=0),120,1), label = 'sigma=0.5')
plt.plot (t[:3581], run_mean(np.var(x2x,axis=0),120,1), label = 'sigma=1')
plt.plot (t[:3581], run_mean(np.var(x3x,axis=0),120,1), label = 'sigma=1.5')
plt.plot (t[:3581], run_mean(np.var(x4x,axis=0),120,1), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3462], run_mean(np.var(x1x,axis=0),120,1), label = 'sigma=0.5')
plt.plot (t[:3462], run_mean(np.var(x2x,axis=0),120,1), label = 'sigma=1')
plt.plot (t[:3462], run_mean(np.var(x3x,axis=0),120,1), label = 'sigma=1.5')
plt.plot (t[:3462], run_mean(np.var(x4x,axis=0),120,1), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3462], run_mean(np.var(x1x,axis=0),120,1), label = 'sigma=0.5')
plt.plot (t[:3462], run_mean(np.var(x2x,axis=0),120,1), label = 'sigma=1')
plt.plot (t[:3462], run_mean(np.var(x3x,axis=0),120,1), label = 'sigma=1.5')
plt.plot (t[:3462], run_mean(np.var(x4x,axis=0),120,1), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

xdata=t[:3462]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(quad,xdata[:300],ydata4[:300])

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(quad,xdata[:300],ydata4[:300])

plt.figure(figsize=(14,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(quad,xdata[:300],ydata4[:300])

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (120,2) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(quad,xdata[:300],ydata4[:300])

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(quad,xdata[:300],ydata4[:300])

plt.figure(figsize=(15,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.xlim(-5,150)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xlim(-5,150)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[30:1000],ydata1[30:1000])
popt2,pcov2 = curve_fit(expon,xdata[30:1000],ydata2[30:1000])
popt3,pcov3 = curve_fit(expon,xdata[30:1000],ydata3[30:1000])
popt4,pcov4 = curve_fit(expon,xdata[30:1000],ydata4[30:1000])

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xlim(-5,150)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[30:1000],ydata1[30:1000])
popt2,pcov2 = curve_fit(expon,xdata[30:1000],ydata2[30:1000])
popt3,pcov3 = curve_fit(expon,xdata[30:1000],ydata3[30:1000])
popt4,pcov4 = curve_fit(expon,xdata[30:1000],ydata4[30:1000])

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.xlim(-5,150)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[30:1000],ydata1[30:1000])
popt2,pcov2 = curve_fit(expon,xdata[30:1000],ydata2[30:1000])
popt3,pcov3 = curve_fit(expon,xdata[30:1000],ydata3[30:1000])
popt4,pcov4 = curve_fit(expon,xdata[30:1000],ydata4[30:1000])

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.ylim(-0.1,0.5)
plt.xlim(-5,150)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[30:1500],ydata1[30:1500])
popt2,pcov2 = curve_fit(expon,xdata[30:1500],ydata2[30:1500])
popt3,pcov3 = curve_fit(expon,xdata[30:1500],ydata3[30:1500])
popt4,pcov4 = curve_fit(expon,xdata[30:1500],ydata4[30:1500])

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
plt.ylim(-0.1,0.5)
plt.xlim(-5,150)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0], label = 'sigma=1')
plt.plot (t, phvar(x3)[0], label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0], label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t[:3416], run_mean(phvar(x1)[0],72,3), label = 'sigma=0.5')
plt.plot (t[:3416], run_mean(phvar(x2)[0],72,3), label = 'sigma=1')
plt.plot (t[:3416], run_mean(phvar(x3)[0],72,3), label = 'sigma=1.5')
plt.plot (t[:3416], run_mean(phvar(x4)[0],72,3), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t[:3462], run_mean(phvar(x1)[0],120,1), label = 'sigma=0.5')
plt.plot (t[:3462], run_mean(phvar(x2)[0],120,1), label = 'sigma=1')
plt.plot (t[:3462], run_mean(phvar(x3)[0],120,1), label = 'sigma=1.5')
plt.plot (t[:3462], run_mean(phvar(x4)[0],120,1), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2)')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))
plt.plot (t[:3462], run_mean(phvar(x1)[0],120,1), label = 'sigma=0.5')
plt.plot (t[:3462], run_mean(phvar(x2)[0],120,1), label = 'sigma=1')
plt.plot (t[:3462], run_mean(phvar(x3)[0],120,1), label = 'sigma=1.5')
plt.plot (t[:3462], run_mean(phvar(x4)[0],120,1), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2)')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

xdata=t[:3416]
ydata1=run_mean(phvar(x1)[0],72,3)
ydata2=run_mean(phvar(x2)[0],72,3)
ydata3=run_mean(phvar(x3)[0],72,3)
ydata4=run_mean(phvar(x4)[0],72,3)

popt1,pcov1 = curve_fit(lin,xdata,ydata1)
popt2,pcov2 = curve_fit(lin,xdata,ydata2)
popt3,pcov3 = curve_fit(lin,xdata,ydata3)
popt4,pcov4 = curve_fit(lin,xdata,ydata4)


plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to linear function')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata,ydata1)
popt2,pcov2 = curve_fit(quad,xdata,ydata2)
popt3,pcov3 = curve_fit(quad,xdata,ydata3)
popt4,pcov4 = curve_fit(quad,xdata,ydata4)


plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

xdata=t[:3462]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(lin,xdata[:800],ydata1[:800])
popt2,pcov2 = curve_fit(lin,xdata[:800],ydata2[:800])
popt3,pcov3 = curve_fit(lin,xdata[:800],ydata3[:800])
popt4,pcov4 = curve_fit(lin,xdata[:800],ydata4[:800])

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to linear function')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to linear function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()


popt1,pcov1 = curve_fit(lin,xdata[40:2000],ydata1[40:2000])
popt2,pcov2 = curve_fit(lin,xdata[:800],ydata2[:800])
popt3,pcov3 = curve_fit(lin,xdata[:700],ydata3[:700])
popt4,pcov4 = curve_fit(lin,xdata[:500],ydata4[:500])

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to linear function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()


popt1,pcov1 = curve_fit(lin,xdata[40:2000],ydata1[40:2000])
popt2,pcov2 = curve_fit(lin,xdata[:800],ydata2[:800])
popt3,pcov3 = curve_fit(lin,xdata[:700],ydata3[:700])
popt4,pcov4 = curve_fit(lin,xdata[:500],ydata4[:500])

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2) fitted to linear function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1500],ydata1[:1500])
popt2,pcov2 = curve_fit(quad,xdata[:800],ydata2[:800])
popt3,pcov3 = curve_fit(quad,xdata[:600],ydata3[:600])
popt4,pcov4 = curve_fit(quad,xdata[:500],ydata4[:500])



plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1500],ydata1[:1500])
popt2,pcov2 = curve_fit(quad,xdata[:800],ydata2[:800])
popt3,pcov3 = curve_fit(quad,xdata[:600],ydata3[:600])
popt4,pcov4 = curve_fit(quad,xdata[:500],ydata4[:500])



plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1300],ydata1[:1300])
popt2,pcov2 = curve_fit(quad,xdata[:600],ydata2[:600])
popt3,pcov3 = curve_fit(quad,xdata[:450],ydata3[:450])
popt4,pcov4 = curve_fit(quad,xdata[:400],ydata4[:400])



plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1300],ydata1[:1300])
popt2,pcov2 = curve_fit(quad,xdata[:600],ydata2[:600])
popt3,pcov3 = curve_fit(quad,xdata[:450],ydata3[:450])
popt4,pcov4 = curve_fit(quad,xdata[:400],ydata4[:400])



plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1300],ydata1[:1300])
popt2,pcov2 = curve_fit(quad,xdata[:600],ydata2[:600])
popt3,pcov3 = curve_fit(quad,xdata[:450],ydata3[:450])
popt4,pcov4 = curve_fit(quad,xdata[:400],ydata4[:400])



plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(0,1000)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1300],ydata1[:1300])
popt2,pcov2 = curve_fit(quad,xdata[:600],ydata2[:600])
popt3,pcov3 = curve_fit(quad,xdata[:450],ydata3[:450])
popt4,pcov4 = curve_fit(quad,xdata[:350],ydata4[:350])



plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(0,1000)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1300],ydata1[:1300])
popt2,pcov2 = curve_fit(quad,xdata[:600],ydata2[:600])
popt3,pcov3 = curve_fit(quad,xdata[:450],ydata3[:450])
popt4,pcov4 = curve_fit(quad,xdata[:350],ydata4[:350])



plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(0,1000)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1300],ydata1[:1300])
popt2,pcov2 = curve_fit(quad,xdata[:600],ydata2[:600])
popt3,pcov3 = curve_fit(quad,xdata[:450],ydata3[:450])
popt4,pcov4 = curve_fit(quad,xdata[:350],ydata4[:350])



plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,200)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1300],ydata1[:1300])
popt2,pcov2 = curve_fit(quad,xdata[:600],ydata2[:600])
popt3,pcov3 = curve_fit(quad,xdata[:450],ydata3[:450])
popt4,pcov4 = curve_fit(quad,xdata[:350],ydata4[:350])



plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,200)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(quad,xdata[:300],ydata4[:300])



plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,200)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(expon,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(expon,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(expon,xdata[:300],ydata4[:300])

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (72,4) fitted to exponential function')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(quad,xdata[:300],ydata4[:300])

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,200)
plt.legend()
plt.show()

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,4)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,200)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(130,50,'The coefficients of curves are\n' + texttang)

plt.legend()
plt.show()

norm(coefficients)
roundl(norm(coefficients))
roundl(norm(coefficients),3)
roundl(norm(coefficients),2)
roundl(norm(coefficients),1)
cttt=roundl(norm(coefficients),1)
cttt[0]
cttt=roundl(norm(coefficients),2)
cttt[0]
cttt[0]*2
cttt[0]*3
cttt[0]*4
cttt=roundl(norm(coefficients),4)
cttt[0]
cttt[0]*2
cttt[0]*3
cttt[0]*4
def d(x,y):
    return list(map(lambda x,y: abs(x-y), x,y))

cttt2 = [cttt[0],cttt[0]*2, cttt[0]*3, cttt[0]*4]
d(cttt2)
d(cttt,cttt2)
roundl(d(cttt,cttt2),5)
cttt3 = [cttt[1]*0.5,cttt[1], cttt[1]*1.5, cttt[1]*2]
roundl(d(cttt,cttt3),5)
cttt
cttt3
popt1,pcov1 = curve_fit(quad,xdata[:800],ydata1[:800])
popt2,pcov2 = curve_fit(quad,xdata[:400],ydata2[:400])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,200)
plt.legend()
plt.show()

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,4)

ct
ct2 = [ct[0],ct[0]*2, ct[0]*3, ct[0]*4]
ct2
d(ct, ct2)
cttt=norm(ct)
cttt2 = [cttt2[0],cttt2[0]*2, cttt2[0]*3, cttt2[0]*4]
d(cttt,cttt2)
popt1,pcov1 = curve_fit(quad,xdata[:800],ydata1[:800])
popt2,pcov2 = curve_fit(quad,xdata[:400],ydata2[:400])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,4)

plt.figure(figsize=(10,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(130,50,'The coefficients of curves are\n' + texttang)

plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:800],ydata1[:800])
popt2,pcov2 = curve_fit(quad,xdata[:400],ydata2[:400])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,4)

plt.figure(figsize=(10,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,50,'The coefficients of curves are\n' + texttang)

plt.legend()
plt.show()

areeq(run_mean(phvar(x1)[0],120,1), ydata1)
clear
xdata=t[:3462]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(quad,xdata[:300],ydata4[:300])

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3462]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(quad,xdata[:300],ydata4[:300])

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(quad,xdata[:300],ydata4[:300])

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1100],ydata1[:1100])
popt2,pcov2 = curve_fit(quad,xdata[:900],ydata2[:900])
popt3,pcov3 = curve_fit(quad,xdata[:400],ydata3[:400])
popt4,pcov4 = curve_fit(quad,xdata[:300],ydata4[:300])

plt.figure(figsize=(10,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

plt.figure(figsize=(10,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

plt.figure(figsize=(12,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

plt.figure(figsize=(12,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

plt.figure(figsize=(12,9))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

plt.figure(figsize=(13,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,4)

plt.figure(figsize=(13,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,0,'The coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,4)

plt.figure(figsize=(12,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,0,'The coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[1],popt3[2], popt4[3]]
ct = roundl(coefficients,4)

plt.figure(figsize=(12,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,0,'The coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.legend()
plt.show()

popt1
popt2
popt3
popt4
quad?
popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[1],popt3[2], popt4[3]]
ct = roundl(coefficients,6)

plt.figure(figsize=(12,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,0,'The coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(12,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,0,'The coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(12,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.legend()
plt.show()

expon?
popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

#coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
#ct = roundl(coefficients,6)

plt.figure(figsize=(12,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.xlim(-,)
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

#texttang = ''
#for i in ct:
#    texttang = texttang+str(i)+' : '
#texttang = texttang[:-3]
#plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.legend()
plt.show()

clear
del ct,ct2,cttt,cttt2,cttt3,nt
del a,ang,angles,ar,coefficients
del tang, tangents, rt
сдуфк
clear
del x1,x1x,x2,x2x,x3,x3x,x4,x4x
clear
x1=np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.05 only solutions no time")
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
clear
x1=np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.05 only solutions no time")
x1=np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.05 only solutions no time.npy")
del x1
x1=[]
x1[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.05 only solutions no time.npy")
x1=[[]]
x1[0]
x1=[[],[]]
len(x1)
x2=[[],[]]
x1[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.05 only solutions no time.npy")
x2[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.1 only solutions no time.npy")
x3=[[],[]]
x4=[[],[]]

x3[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.2 only solutions no time.npy")
x4[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.5 only solutions no time.npy")
x1[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.05 time.npy")
x2[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.1 time.npy")
x3[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.2 time.npy")
x4[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.5 time.npy")

alleq(x1[0],x2[0])[100:110]
areeq(x1[0],x2[0])[100:110]
areeq(x2[0],x3[0])[100:110]
areeq(x4[0],x3[0])[100:110]
clear
x1x = sep(x1[1])[0]
x2x = sep(x2[1])[0]
x3x = sep(x3[1])[0]
x4x = sep(x4[1])[0]

plt.figure(figsize=(16,8))

m4good = me(run_mean(np.mean(x4x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x1x, axis=0))
m2 = me(np.mean(x2x, axis=0))
m3 = me(np.mean(x3x, axis=0))
m4 = me(np.mean(x4x, axis=0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

t=np.linspace(0,600,600*20)
areeq(t,x1[0])[100:110]
clear
plt.figure(figsize=(16,8))

m4good = me(run_mean(np.mean(x4x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x1x, axis=0))
m2 = me(np.mean(x2x, axis=0))
m3 = me(np.mean(x3x, axis=0))
m4 = me(np.mean(x4x, axis=0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me(run_mean(np.mean(x4x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x1x, axis=0))
m2 = me(np.mean(x2x, axis=0))
m3 = me(np.mean(x3x, axis=0))
m4 = me(np.mean(x4x, axis=0))


plt.plot(m1[0], m1[1],'bo-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
plt.plot(t,np.mean(x3x, axis=0), label='raw')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me(run_mean(np.mean(x4x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x1x, axis=0))
m2 = me(np.mean(x2x, axis=0))
m3 = me(np.mean(x3x, axis=0))
m4 = me(np.mean(x4x, axis=0))


plt.plot(m1[0], m1[1],'bo-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
plt.plot(t[:10801],np.mean(x3x, axis=0), label='raw')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:x1[1].shape[0]], np.mean(x1x, axis=0), label='E=0.05')
plt.plot(t[0:x2[1].shape[0]], np.mean(x2x, axis=0), label='E=0.1')
plt.plot(t[0:x3[1].shape[0]], np.mean(x3x, axis=0), label='E=0.2')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:x1[1].shape[0]], np.mean(x1x, axis=0), label='E=0.05')
plt.plot(t[0:x2[1].shape[0]], np.mean(x2x, axis=0), label='E=0.1')
plt.plot(t[0:x3[1].shape[0]], np.mean(x3x, axis=0), label='E=0.2')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5')
plt.xlim(-10,200)
plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:x1[1].shape[0]], env(np.mean(x1x, axis=0)), label='E=0.05')
plt.plot(t[0:x2[1].shape[0]], np.mean(x2x, axis=0), label='E=0.1')
plt.plot(t[0:x3[1].shape[0]], np.mean(x3x, axis=0), label='E=0.2')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5')
plt.xlim(-10,200)
plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:x1[1].shape[0]], np.mean(x1x, axis=0), label='E=0.05')
plt.plot(t[0:x2[1].shape[0]], np.mean(x2x, axis=0), label='E=0.1')
plt.plot(t[0:x3[1].shape[0]], np.mean(x3x, axis=0), label='E=0.2')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5')
plt.plot(t[0:x4[1].shape[0]], env(np.mean(x4x, axis=0)), label='E=0.5, env')
plt.xlim(-10,200)
plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))
m = me(run_mean(np.mean(x4x, axis=0), 30, 1))
m1 = me(np.mean(x4x, axis=0))
plt.plot(m[0], m[1],'+', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else
#plt.plot(m1[0], m1[1],'o', label='E=0.5 not smoothened, maxima')
plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened, original data')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
m = me(run_mean(np.mean(x4x, axis=0), 30, 1))
m1 = me(np.mean(x4x, axis=0))

plt.plot(me2(x1x)[0], me2(x1x)[1], 'o-', label='E=0.05')
plt.plot(me2(x2x)[0], me2(x2x)[1], 'o-', label='E=0.1')
plt.plot(me2(x3x)[0], me2(x3x)[1], 'o-', label='E=0.2')
#plt.plot(me2(x4x)[0], me2(x4x)[1], 'o-', label='E=0.5')
plt.plot(m[0], m[1],'+', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else
#plt.plot(m1[0], m1[1],'o', label='E=0.5 not smoothened, maxima')
#plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened, original data')

plt.xlabel('time, hours')
plt.ylabel('Mean (maxima only) of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
m = me(run_mean(np.mean(x4x, axis=0), 30, 1))
m1 = me(np.mean(x4x, axis=0))

plt.plot(me2(x1x)[0], me2(x1x)[1], 'o-', label='E=0.05')
plt.plot(me2(x2x)[0], me2(x2x)[1], 'o-', label='E=0.1')
plt.plot(me2(x3x)[0], me2(x3x)[1], 'o-', label='E=0.2')
#plt.plot(me2(x4x)[0], me2(x4x)[1], 'o-', label='E=0.5')
plt.plot(m[0], m[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else
#plt.plot(m1[0], m1[1],'o', label='E=0.5 not smoothened, maxima')
#plt.plot(t[0:x4[1].shape[0]], np.mean(x4x, axis=0), label='E=0.5 not smoothened, original data')

plt.xlabel('time, hours')
plt.ylabel('Mean (maxima only) of 1000 oscillators with different noise intensities')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me(run_mean(np.mean(x4x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x1x, axis=0))
m2 = me(np.mean(x2x, axis=0))
m3 = me(np.mean(x3x, axis=0))
m4 = me(np.mean(x4x, axis=0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

m1
clear
m4good = me(run_mean(np.mean(x4x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x1x, axis=0))
m2 = me(np.mean(x2x, axis=0))
m3 = me(np.mean(x3x, axis=0))
m4 = me(np.mean(x4x, axis=0))

xdata1 = np.array(m1)[0])
ydata1 = np.array(m1)[1])

xdata2 = np.array(m2)[0])
ydata2 = np.array(m2)[1])

xdata3 = np.array(m3)[0])
ydata3 = np.array(m3)[1])

xdata4 = np.array(m4)[0])
ydata4 = np.array(m4)[1])
m4good = me(run_mean(np.mean(x4x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x1x, axis=0))
m2 = me(np.mean(x2x, axis=0))
m3 = me(np.mean(x3x, axis=0))
m4 = me(np.mean(x4x, axis=0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])

xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])

xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])

xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.figure(figsize=(16,8))

plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(1,1,'The slopes of curves are\n' + texttang)


#plt.xlabel('time, hours')
#plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(1,1,'The slopes of curves are\n' + texttang)


#plt.xlabel('time, hours')
#plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-2,2)
plt.xlim(-5,200)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-2,2)
plt.xlim(20,200)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-2,2)
plt.xlim(10,160)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
plt.xlim(10,160)
plt.legend()

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
plt.xlim(10,160)
plt.legend()

type(xdata1)
pop?
np.pop?
xdata1.shape
xdata1.insert(0,0)
np.insert(xdata1,0, 0)
xdata1.shape
def i0(x):
    return np.insert(x,0,0)

popt1,pcov1 = curve_fit(lin,i0(xdata1),i0(ydata1))
popt2,pcov2 = curve_fit(lin,i0(xdata2[0:5]),i0(ydata2[0:5]))
popt3,pcov3 = curve_fit(lin,i0(xdata3[0:4]),i0(ydata3[0:4]))
popt4,pcov4 = curve_fit(lin,i0(xdata4[0:3]),i0(ydata4[0:3]))

plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
plt.xlim(10,160)
plt.legend()

i0(xdata1)
xdata1
popt1,pcov1 = curve_fit(lin,i0(xdata1),i0(ydata1))
popt2,pcov2 = curve_fit(lin,i0(xdata2)[0:5],i0(ydata2)[0:5])
popt3,pcov3 = curve_fit(lin,i0(xdata3)[0:4],i0(ydata3)[0:4])
popt4,pcov4 = curve_fit(lin,i0(xdata4)[0:3],i0(ydata4)[0:3])

plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
plt.xlim(10,160)
plt.legend()

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)


plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
plt.xlim(10,160)
plt.legend()

for i in [xdata1,ydata1,xdata2,ydata2,xdata3,ydata3,xdata4,ydata4]:
    i=i0(i)
    
popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)


plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
plt.xlim(10,160)
plt.legend()

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)


plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
#plt.xlim(10,160)
plt.legend()

xdata1
xdata1 = i0(xdata1)
xdata1
ydata1 = i0(ydata1)
popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)


plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
#plt.xlim(10,160)
plt.legend()

def i0(x):
    np.insert(x,0,2)

popt1,pcov1 = curve_fit(lin,i0(xdata1),i0(ydata1))
popt2,pcov2 = curve_fit(lin,i0(xdata2)[0:5],i0(ydata2)[0:5])
popt3,pcov3 = curve_fit(lin,i0(xdata3)[0:4],i0(ydata3)[0:4])
popt4,pcov4 = curve_fit(lin,i0(xdata4)[0:3],i0(ydata4)[0:3])

plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
plt.xlim(10,160)
plt.legend()

i0(xdata1)
def i0(x):
    return np.insert(x,0,2)

popt1,pcov1 = curve_fit(lin,i0(xdata1),i0(ydata1))
popt2,pcov2 = curve_fit(lin,i0(xdata2)[0:5],i0(ydata2)[0:5])
popt3,pcov3 = curve_fit(lin,i0(xdata3)[0:4],i0(ydata3)[0:4])
popt4,pcov4 = curve_fit(lin,i0(xdata4)[0:3],i0(ydata4)[0:3])

plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
plt.xlim(10,160)
plt.legend()

def i0(x,n):
    return np.insert(x,0,n)

popt1,pcov1 = curve_fit(lin,i0(xdata1,0),i0(ydata1,2))
popt2,pcov2 = curve_fit(lin,i0(xdata2,0)[0:5],i0(ydata2,2)[0:5])
popt3,pcov3 = curve_fit(lin,i0(xdata3,0)[0:4],i0(ydata3,2)[0:4])
popt4,pcov4 = curve_fit(lin,i0(xdata4,0)[0:3],i0(ydata4,2)[0:3])

plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
plt.xlim(10,160)
plt.legend()

i0(xdata1,2)
xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])

xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])

xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])

xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

def i0(x,n):
    return np.insert(x,0,n)

popt1,pcov1 = curve_fit(lin,i0(xdata1,0),i0(ydata1,2))
popt2,pcov2 = curve_fit(lin,i0(xdata2,0)[0:5],i0(ydata2,2)[0:5])
popt3,pcov3 = curve_fit(lin,i0(xdata3,0)[0:4],i0(ydata3,2)[0:4])
popt4,pcov4 = curve_fit(lin,i0(xdata4,0)[0:3],i0(ydata4,2)[0:3])

plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
plt.xlim(10,160)
plt.legend()

xdata1
ydata1
xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])

xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])

xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])

xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

#xydata = [xdata1,ydata1,xdata2,ydata2,xdata3,ydata3,xdata4,ydata4]  


popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

for i in [xdata1,ydata1,xdata2,ydata2,xdata3,ydata3,xdata4,ydata4]:
    i=i0(i)

plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
plt.xlim(10,160)
plt.legend()

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])

xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])

xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])

xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

#xydata = [xdata1,ydata1,xdata2,ydata2,xdata3,ydata3,xdata4,ydata4]  


popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

for i in [xdata1,ydata1,xdata2,ydata2,xdata3,ydata3,xdata4,ydata4]:
    i=i0(i)

plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
plt.xlim(10,160)
plt.legend()

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])

xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])

xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])

xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

#xydata = [xdata1,ydata1,xdata2,ydata2,xdata3,ydata3,xdata4,ydata4]  


popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)


plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
plt.xlim(10,160)
plt.legend()

plt.plot (t[:10562], run_mean(np.var(x1x,axis=0),240), label = 'E=0.05')
#plt.plot (t[:10323], run_mean(np.var(x1x,axis=0),240,1), label = 'E=0.05')
#plt.plot (t[:9364], run_mean(np.var(x1x,axis=0),240,2), label = 'E=0.05')
plt.plot (t[:10562], run_mean(np.var(x2x,axis=0),240), label = 'E=0.1')
plt.plot (t[:10562], run_mean(np.var(x3x,axis=0),240), label = 'E=0.2')
plt.plot (t[:10562], run_mean(np.var(x4x,axis=0),240), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (240,1) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))
plt.plot (t[:10562], run_mean(np.var(x1x,axis=0),240), label = 'E=0.05')
#plt.plot (t[:10323], run_mean(np.var(x1x,axis=0),240,1), label = 'E=0.05')
#plt.plot (t[:9364], run_mean(np.var(x1x,axis=0),240,2), label = 'E=0.05')
plt.plot (t[:10562], run_mean(np.var(x2x,axis=0),240), label = 'E=0.1')
plt.plot (t[:10562], run_mean(np.var(x3x,axis=0),240), label = 'E=0.2')
plt.plot (t[:10562], run_mean(np.var(x4x,axis=0),240), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (240,1) with different noise intensities')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(10,8))
plt.plot (t[:10562], run_mean(np.var(x1x,axis=0),240), label = 'E=0.05')
#plt.plot (t[:10323], run_mean(np.var(x1x,axis=0),240,1), label = 'E=0.05')
#plt.plot (t[:9364], run_mean(np.var(x1x,axis=0),240,2), label = 'E=0.05')
plt.plot (t[:10562], run_mean(np.var(x2x,axis=0),240), label = 'E=0.1')
plt.plot (t[:10562], run_mean(np.var(x3x,axis=0),240), label = 'E=0.2')
plt.plot (t[:10562], run_mean(np.var(x4x,axis=0),240), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (240,1) with different noise intensities')
plt.xlabel ('time, hours')
plt.xlim(0,100)
plt.legend()
plt.show()

plt.figure(figsize=(10,8))
plt.plot (t[:10562], run_mean(np.var(x1x,axis=0),240), label = 'E=0.05')
#plt.plot (t[:10323], run_mean(np.var(x1x,axis=0),240,1), label = 'E=0.05')
#plt.plot (t[:9364], run_mean(np.var(x1x,axis=0),240,2), label = 'E=0.05')
plt.plot (t[:10562], run_mean(np.var(x2x,axis=0),240), label = 'E=0.1')
plt.plot (t[:10562], run_mean(np.var(x3x,axis=0),240), label = 'E=0.2')
plt.plot (t[:10562], run_mean(np.var(x4x,axis=0),240), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (240,1) with different noise intensities')
plt.xlabel ('time, hours')
plt.xlim(-10,100)
plt.legend()
plt.show()

plt.figure(figsize=(8,8))
plt.plot (t[:10562], run_mean(np.var(x1x,axis=0),240), label = 'E=0.05')
#plt.plot (t[:10323], run_mean(np.var(x1x,axis=0),240,1), label = 'E=0.05')
#plt.plot (t[:9364], run_mean(np.var(x1x,axis=0),240,2), label = 'E=0.05')
plt.plot (t[:10562], run_mean(np.var(x2x,axis=0),240), label = 'E=0.1')
plt.plot (t[:10562], run_mean(np.var(x3x,axis=0),240), label = 'E=0.2')
plt.plot (t[:10562], run_mean(np.var(x4x,axis=0),240), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (240,1) with different noise intensities')
plt.xlabel ('time, hours')
plt.xlim(-10,100)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))
plt.plot (t[:10562], run_mean(np.var(x1x,axis=0),240), label = 'E=0.05')
#plt.plot (t[:10323], run_mean(np.var(x1x,axis=0),240,1), label = 'E=0.05')
#plt.plot (t[:9364], run_mean(np.var(x1x,axis=0),240,2), label = 'E=0.05')
plt.plot (t[:10562], run_mean(np.var(x2x,axis=0),240), label = 'E=0.1')
plt.plot (t[:10562], run_mean(np.var(x3x,axis=0),240), label = 'E=0.2')
plt.plot (t[:10562], run_mean(np.var(x4x,axis=0),240), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (240,1) with different noise intensities')
plt.xlabel ('time, hours')
plt.xlim(-10,200)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))
plt.plot (t[:10562], run_mean(np.var(x1x,axis=0),240), label = 'E=0.05')
#plt.plot (t[:10323], run_mean(np.var(x1x,axis=0),240,1), label = 'E=0.05')
#plt.plot (t[:9364], run_mean(np.var(x1x,axis=0),240,2), label = 'E=0.05')
plt.plot (t[:10562], run_mean(np.var(x2x,axis=0),240), label = 'E=0.1')
plt.plot (t[:10562], run_mean(np.var(x3x,axis=0),240), label = 'E=0.2')
plt.plot (t[:10562], run_mean(np.var(x4x,axis=0),240), label = 'E=0.5')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (240,1) with different noise intensities')
plt.xlabel ('time, hours')
plt.xlim(-10,300)
plt.legend()
plt.show()

xdata=t[:10562]
ydata1=run_mean(np.var(x1x,axis=0),240)
ydata2=run_mean(np.var(x2x,axis=0),240)
ydata3=run_mean(np.var(x3x,axis=0),240)
ydata4=run_mean(np.var(x4x,axis=0),240)


popt1,pcov1 = curve_fit(quad,xdata[:7000],ydata1[:7000])
popt2,pcov2 = curve_fit(quad,xdata[:5000],ydata2[:5000])
popt3,pcov3 = curve_fit(quad,xdata[:3000],ydata3[:3000])
popt4,pcov4 = curve_fit(quad,xdata[:1000],ydata4[:1000])

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'E=0.05 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'E=0.1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'E=0.2')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'E=0.5')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.ylim(-50,3000)
#plt.xlim(-5,150)

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'E=0.05 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'E=0.1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'E=0.2')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'E=0.5')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
plt.xlim(-5,300)

plt.legend()
plt.show()

plt.figure(figsize=(10,8))

plt.plot (xdata, ydata1, 'r--',label = 'E=0.05 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'E=0.1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'E=0.2')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'E=0.5')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
plt.xlim(-5,200)

plt.legend()
plt.show()

plt.figure(figsize=(10,8))

plt.plot (xdata, ydata1, 'r--',label = 'E=0.05 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'E=0.1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'E=0.2')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'E=0.5')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
plt.xlim(-5,300)

plt.legend()
plt.show()

plt.figure(figsize=(10,8))

plt.plot (xdata, ydata1, 'r--',label = 'E=0.05 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'E=0.1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'E=0.2')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'E=0.5')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
plt.xlim(-5,500)

plt.legend()
plt.show()

plt.figure(figsize=(12,10))

plt.plot (xdata, ydata1, 'r--',label = 'E=0.05 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'E=0.1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'E=0.2')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'E=0.5')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
plt.xlim(-5,100)

plt.legend()
plt.show()

plt.figure(figsize=(12,10))

plt.plot (xdata, ydata1, 'r--',label = 'E=0.05 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'E=0.1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'E=0.2')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'E=0.5')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
plt.xlim(-5,150)

plt.legend()
plt.show()

plt.figure(figsize=(12,10))

plt.plot (xdata, ydata1, 'r--',label = 'E=0.05 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'E=0.1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'E=0.2')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'E=0.5')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
plt.xlim(-5,250)

plt.legend()
plt.show()

plt.figure(figsize=(12,10))

plt.plot (xdata, ydata1, 'r--',label = 'E=0.05 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'E=0.1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'E=0.2')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'E=0.5')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
plt.xlim(-5,550)

plt.legend()
plt.show()

plt.figure(figsize=(14,12))

plt.plot (xdata, ydata1, 'r--',label = 'E=0.05 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'E=0.1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'E=0.2')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'E=0.5')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
plt.xlim(-5,150)

plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[:7000],ydata1[:7000])
popt2,pcov2 = curve_fit(expon,xdata[:5000],ydata2[:5000])
popt3,pcov3 = curve_fit(expon,xdata[:3000],ydata3[:3000])
popt4,pcov4 = curve_fit(expon,xdata[:1000],ydata4[:1000])

exp?
np.exp?
clear
plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'E=0.05 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'E=0.1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'E=0.2')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'E=0.5')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function')
plt.xlabel ('time, hours')
#plt.ylim(-50,3000)
#plt.xlim(-5,150)

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'E=0.05 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'E=0.1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'E=0.2')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'E=0.5')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
plt.xlim(-5,150)

plt.legend()
plt.show()

x1fft=np.fft(x1[1][:,0])
x1fft=np.fft(x1x[0])
x1fft=np.fft.fft(x1x[0])
plt.plot(abs(x1fft))
plt.figure(figsize=(20,8))
plt.plot(abs(x1fft))

plt.figure(figsize=(20,8))
plt.plot(abs(x1fft)**2)

import scipy.signal.welch as welch
import scipy.signal as signal
x1w = signal.welch(x1x[0])
plt.plot(x1w)
plt.plot(x1w)
plt.xlim(0,0.2)

plt.plot(x1w)
plt.xlim(0,0.2)
plt.ylim(0,3)

clear
signal.welch?
f,Pxx_spec = signal.welch(x1x[0],20.0)
plt.figure()

plt.semilogy(f,np.sqrt(Pxx_spec))
plt.xlabel('frequency [Hz]')
plt.ylabel('Linear spectrum [V RMS]')
plt.show()

fs = 20.0
f, Pxx_spec = signal.periodogram(x1x[0], fs, 'flattop', scaling='spectrum')
plt.figure()
plt.semilogy(f, np.sqrt(Pxx_spec))
plt.xlabel('frequency [Hz]')
plt.ylabel('Linear spectrum [V RMS]')
plt.show()

f, Pxx_spec = signal.periodogram(x1x, fs, 'flattop', scaling='spectrum')
plt.figure()
plt.semilogy(f, np.sqrt(Pxx_spec))
plt.xlabel('frequency [Hz]')
plt.ylabel('Linear spectrum [V RMS]')
plt.show()

f, Pxx_spec = signal.periodogram(x1x[2], fs, 'flattop', scaling='spectrum')
plt.figure()
plt.semilogy(f, np.sqrt(Pxx_spec))
plt.xlabel('frequency [Hz]')
plt.ylabel('Linear spectrum [V RMS]')
plt.show()

for i in x1x[0:10]:
    f, Pxx_spec = signal.periodogram(i, fs, 'flattop', scaling='spectrum')
    plt.figure()
    plt.semilogy(f, np.sqrt(Pxx_spec))
    plt.xlabel('frequency [Hz]')
    plt.ylabel('Linear spectrum [V RMS]')
    plt.show()
    

f, Pxx_spec = signal.periodogram(np.mean(x1x, axis=0), fs, 'flattop', scaling='spectrum')
plt.figure()
plt.semilogy(f, np.sqrt(Pxx_spec))
plt.xlabel('frequency [Hz]')
plt.ylabel('Linear spectrum [V RMS]')
plt.show()


f, Pxx_spec = signal.periodogram(np.var(x1x, axis=0), fs, 'flattop', scaling='spectrum')
plt.figure()
plt.semilogy(f, np.sqrt(Pxx_spec))
plt.xlabel('frequency [Hz]')
plt.ylabel('Linear spectrum [V RMS]')
plt.show()


f, Pxx_spec = signal.periodogram(np.var(x1x, axis=0), fs, 'flattop', scaling='spectrum')
plt.figure()
plt.plot(f, np.sqrt(Pxx_spec))
plt.xlabel('frequency [Hz]')
plt.ylabel('Linear spectrum [V RMS]')
plt.show()


f, Pxx_spec = signal.periodogram(np.mean(x4x, axis=0), fs, 'flattop', scaling='spectrum')
plt.figure()
plt.plot(f, np.sqrt(Pxx_spec))
plt.xlabel('frequency [Hz]')
plt.ylabel('Linear spectrum [V RMS]')
plt.show()


f, Pxx_spec = signal.periodogram(np.mean(x4x, axis=0), fs, 'flattop', scaling='spectrum')
plt.figure()
plt.semilogy(f, np.sqrt(Pxx_spec))
plt.xlabel('frequency [Hz]')
plt.ylabel('Linear spectrum [V RMS]')
plt.show()


f, Pxx_spec = signal.welch(np.mean(x4x, axis=0), fs, 'flattop', scaling='spectrum')
plt.figure()
plt.semilogy(f, np.sqrt(Pxx_spec))
plt.xlabel('frequency [Hz]')
plt.ylabel('Linear spectrum [V RMS]')
plt.show()

__future__?
__future__.division?
from __future__ import division
division?
del division
division?
ps = np.abs(np.fft.fft(x4x[0]))**2
1/30
np.fft.fftfreq?
timestep = 1/20
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)

plt.plot(freqs[idx], ps[idx])

time_step = timestep
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)

plt.plot(freqs[idx], ps[idx])

max(freqs)
ps = np.abs(np.fft.fft(x4x[0]))**2 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.plot(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
plt.legend()

ps = np.abs(np.fft.fft(x4x[0]))**2 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.plot(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
plt.xlim(-2.5,2.5)
plt.ylim(0,1.3)
plt.legend()

ps = np.abs(np.fft.fft(x4x[0]))**2 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.plot(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
plt.xlim(-2.5,2.5)
#plt.ylim(0,1.3)
plt.legend()

ps = np.abs(np.fft.fft(x4x[0]))**2 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.plot(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
plt.xlim(-1.5,1.5)
#plt.ylim(0,1.3)
plt.legend()

ps = np.abs(np.fft.fft(x4x[0]))**2 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.plot(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
plt.xlim(-0.5,0.5)
#plt.ylim(0,1.3)
plt.legend()

freq
freqs
len(freqs)
ps = np.abs(np.fft.fft(x4x[0])) # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.plot(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
plt.xlim(-0.5,0.5)
#plt.ylim(0,1.3)
plt.legend()

ps
max(ps)
ps = np.abs(np.fft.fft(x4x[0])) # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.semilogy(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
plt.xlim(-0.5,0.5)
#plt.ylim(0,1.3)
plt.legend()

ps = np.abs(np.fft.fft(x4x[0]))**2 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.semilogy(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
plt.xlim(-0.5,0.5)
#plt.ylim(0,1.3)
plt.legend()

ps = np.abs(np.fft.fft(x4x[0]))**4 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.semilogy(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
plt.xlim(-0.5,0.5)
#plt.ylim(0,1.3)
plt.legend()

ps = np.abs(np.fft.fft(x4x[0]))**3 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.semilogy(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
plt.xlim(-0.5,0.5)
#plt.ylim(0,1.3)
plt.legend()

ps = np.abs(np.fft.fft(x4x[0]))**3 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.semilogy(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
#plt.xlim(-0.5,0.5)
#plt.ylim(0,1.3)
plt.legend()

ps = np.abs(np.fft.fft(x4x[0]))**2 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.semilogy(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
#plt.xlim(-0.5,0.5)
#plt.ylim(0,1.3)
plt.legend()

ps = np.abs(np.fft.fft(x4x[0]))**2 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.plot(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
#plt.xlim(-0.5,0.5)
#plt.ylim(0,1.3)
plt.legend()

ps = np.abs(np.fft.fft(x4x[0]))**2 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.plot(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
plt.xlim(-0.3,0.3)
#plt.ylim(0,1.3)
plt.legend()

ps = np.abs(np.fft.fft(x4x[0]))**2 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(16,8))
plt.plot(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
plt.xlim(-0.1,0.1)
#plt.ylim(0,1.3)
plt.legend()

ps = np.abs(np.fft.fft(x4x[0]))**2 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = np.fft.fftfreq(x4x[0].size, time_step)
idx = np.argsort(freqs)
plt.figure(figsize=(16,8))
plt.plot(freqs[idx], ps[idx])
plt.xlabel('Frequency')
plt.ylabel('Power')
plt.title('Power spectrum density')
plt.xlim(-0.075,0.075)
#plt.ylim(0,1.3)
plt.legend()

ps = np.abs(np.fft.fft(x4x[0]))**2 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = 1/((np.fft.fftfreq(x4x[0].size, time_step))*np.pi)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.plot(freqs[idx], ps[idx])
plt.xlabel('Angular velocity')
plt.ylabel('Power')
plt.title('Power spectrum density')
#plt.xlim(-0.075,0.075)
#plt.ylim(0,1.3)
plt.legend()

ps = np.abs(np.fft.fft(x4x[0]))**2 # Power spectra computing
time_step = 1/20 # Inverse of the maximal possible frequency (sampling rate, in case of noisy system - 20 times/1.0, so 20Hz)
freqs = 1/((np.fft.fftfreq(x4x[0].size, time_step))*np.pi)
idx = np.argsort(freqs)
plt.figure(figsize=(20,8))
plt.plot(freqs[idx], ps[idx])
plt.xlabel('Angular velocity')
plt.ylabel('Power')
plt.title('Power spectrum density')
plt.xlim(-25,25)
#plt.ylim(0,1.3)
plt.legend()

runfile('/home/kalashnikov/Downloads/double_pendulum.py', wdir='/home/kalashnikov/Downloads')
%matplotlib qt
runfile('/home/kalashnikov/Downloads/double_pendulum.py', wdir='/home/kalashnikov/Downloads')
from scipy.integrate import odeint
from scipy.signal import hilbert
from scipy.optimize import curve_fit
import numpy as np
import matplotlib.pyplot as plt

runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
x001 = oscillator_system([1,1],np.linspace(0,50,500),0.1,1,(np.pi*2)/24,0,0,0)
x001 = oscillator_system([1,1],np.linspace(0,50,500),[0.1],[1],[(np.pi*2)/24],[0],[0],[0])
t001 = np.linspace(0,50,500)
state001 = [1,1]
plt.figure(figsize = (10,7))
plt.plot(t,x001[:,0], label='')
plt.ylabel('x-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,7))
plt.plot(t,x001[:,1], label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.legend()
plt.show()

t
x001
n=1
params001 = (0.1,1, (np.pi*2)/24, 0.0, 0.0)
t001 = np.linspace(0,50,500)
x001 = odeint(oscillator_system, [1,1] , t, args=(params001))

n=1
params001 = (0.1,1, (np.pi*2)/24, 0.0, 0.0, 0.0)
t001 = np.linspace(0,50,500)
x001 = odeint(oscillator_system, [1,1] , t, args=(params001))

n=1
params001 = ([0.1],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x001 = odeint(oscillator_system, [1,1] , t, args=(params001))

x001
np.shape(x001)
n=1
params001 = ([0.1],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x001 = odeint(oscillator_system, [1,1] , t001, args=(params001))

x001
clear
plt.figure(figsize = (10,7))
plt.plot(t,x001[:,0], label='')
plt.ylabel('x-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,7))
plt.plot(t,x001[:,1], label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.legend()
plt.show()

plt.figure(figsize = (10,7))
plt.plot(t001,x001[:,0], label='')
plt.ylabel('x-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,7))
plt.plot(t001,x001[:,1], label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.legend()
plt.show()

plt.figure(figsize = (10,7))
plt.plot(t001,x001[:,0], label='')
plt.ylabel('x-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,7))
plt.plot(t001,x001[:,1], label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.legend()
plt.show()

plt.figure(figsize = (10,7))
plt.plot(t001,x001[:,0], label='')
plt.ylabel('x-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,7))
plt.plot(t001,x001[:,1], label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.legend()
plt.show()

%matplotlib inline
plt.figure(figsize = (10,7))
plt.plot(t001,x001[:,0], label='')
plt.ylabel('x-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,7))
plt.plot(t001,x001[:,1], label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.legend()
plt.show()

x001 = odeint(oscillator_system, [1,0] , t001, args=(params001))
plt.figure(figsize = (10,7))
plt.plot(t001,x001[:,0], label='')
plt.ylabel('x-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,7))
plt.plot(t001,x001[:,1], label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.legend()
plt.show()

x001 = odeint(oscillator_system, [1,0] , t001, args=(params001))
plt.figure(figsize = (7,5))
plt.plot(t001,x001[:,0], label='')
plt.plot(t001[-10], x001[:,0][-10], 'o')
plt.ylabel('x-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (7,5))
plt.plot(t001,x001[:,1], label='')
plt.plot(t001[-10], x001[:,1][-10], 'o')
plt.ylabel('y-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (5,5))
plt.plot(x001[:,0][-10], x001[:,1][-10], 'o')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.legend()
plt.show()

plt.figure(figsize = (10,7))
plt.plot(t001,x001[:,0], label='')
plt.plot(t001[-10], x001[:,0][-10], 'o')
plt.ylabel('x-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,7))
plt.plot(t001,x001[:,1], label='')
plt.plot(t001[-10], x001[:,1][-10], 'o')
plt.ylabel('y-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][-10],x001[:,1][-10], label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.legend()
plt.show()

plt.figure(figsize = (7,5))
plt.plot(t001,x001[:,0], label='')
plt.plot(t001[-10], x001[:,0][-10], 'o')
plt.ylabel('x-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (7,5))
plt.plot(t001,x001[:,1], label='')
plt.plot(t001[-10], x001[:,1][-10], 'o')
plt.ylabel('y-coordinate (t)')
plt.xlabel('t, hours')
plt.legend()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][-10],x001[:,1][-10],'o', label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.legend()
plt.show()

plt.subplots?
fig, (ax1, ax2) = plt.subplots(2, sharey=True)

#plt.figure(figsize = (7,5))
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[-30], x001[:,0][-30], 'o')
ax1.set(title='A tale of 2 subplots', ylabel='x-coordinate (t)')
#plt.ylabel('x-coordinate (t)')
#plt.xlabel('t, hours')
#plt.legend()
#plt.show()

#plt.figure(figsize = (7,5))
ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[-30], x001[:,1][-30], 'o')
ax2.set(xlabel='time (s)',ylabel='y-coordinate (t)')
#plt.ylabel('y-coordinate (t)')
#plt.xlabel('t, hours')
#plt.legend()
plt.show()

fig, (ax1, ax2) = plt.subplots(2, sharey=True)

#plt.figure(figsize = (7,5))
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[-100], x001[:,0][-100], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')
#plt.ylabel('x-coordinate (t)')
#plt.xlabel('t, hours')
#plt.legend()
#plt.show()

#plt.figure(figsize = (7,5))
ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[-100], x001[:,1][-100], 'o')
ax2.set(xlabel='time (s)',ylabel='y-coordinate (t)')
#plt.ylabel('y-coordinate (t)')
#plt.xlabel('t, hours')
#plt.legend()
plt.show()

fig, (ax1, ax2) = plt.subplots(2, sharey=True)

#plt.figure(figsize = (7,5))
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')
#plt.ylabel('x-coordinate (t)')
#plt.xlabel('t, hours')
#plt.legend()
#plt.show()

#plt.figure(figsize = (7,5))
ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time (s)',ylabel='y-coordinate (t)')
#plt.ylabel('y-coordinate (t)')
#plt.xlabel('t, hours')
#plt.legend()
plt.show()

fig, (ax1, ax2) = plt.subplots(2, sharey=True)

#plt.figure(figsize = (7,5))
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')
#plt.ylabel('x-coordinate (t)')
#plt.xlabel('t, hours')
#plt.legend()
#plt.show()

#plt.figure(figsize = (7,5))
ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time (s)',ylabel='y-coordinate (t)')
#plt.ylabel('y-coordinate (t)')
#plt.xlabel('t, hours')
#plt.legend()
plt.grid()
plt.show()

fig, (ax1, ax2) = plt.subplots(2, sharey=True)

#plt.figure(figsize = (7,5))
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')
plt.grid()
#plt.ylabel('x-coordinate (t)')
#plt.xlabel('t, hours')
#plt.legend()
#plt.show()

#plt.figure(figsize = (7,5))
ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time (s)',ylabel='y-coordinate (t)')
#plt.ylabel('y-coordinate (t)')
#plt.xlabel('t, hours')
#plt.legend()
plt.grid()
plt.show()

fig, (ax1, ax2) = plt.subplots(2, sharey=True)
plt.grid()
#plt.figure(figsize = (7,5))
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

#plt.ylabel('x-coordinate (t)')
#plt.xlabel('t, hours')
#plt.legend()
#plt.show()

#plt.figure(figsize = (7,5))
ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time (s)',ylabel='y-coordinate (t)')
#plt.ylabel('y-coordinate (t)')
#plt.xlabel('t, hours')
#plt.legend()
#plt.grid()
plt.show()

fig, (ax1, ax2) = plt.subplots(2, sharey=True)
ax1.grid()
#plt.figure(figsize = (7,5))
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

#plt.ylabel('x-coordinate (t)')
#plt.xlabel('t, hours')
#plt.legend()
#plt.show()

#plt.figure(figsize = (7,5))
ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time (s)',ylabel='y-coordinate (t)')
ax2.grid()
#plt.ylabel('y-coordinate (t)')
#plt.xlabel('t, hours')
#plt.legend()
#plt.grid()
plt.show()

fig, (ax1, ax2) = plt.subplots(2, sharey=True)
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

fig1, (ax1, ax2) = plt.subplots(2, sharey=True)
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()

fig2, (ax3) = plt.subplots(1)
ax3.plot(x001[:,0],x001[:,1])
ax3.plot(x001[:,0][359],x001[:,1][359], 'o')
ax3.set(xlabel='x(t)', ylabel='y(t)')
ax3.grid()
plt.show()

fig1, (ax1, ax2) = plt.subplots(2, sharey=True)
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()

fig2, (ax3) = plt.subplots(1)
fig2.figure(figsize=(10,10))
ax3.plot(x001[:,0],x001[:,1])
ax3.plot(x001[:,0][359],x001[:,1][359], 'o')
ax3.set(xlabel='x(t)', ylabel='y(t)')
ax3.grid()
plt.show()

fig2?
fig1, (ax1, ax2) = plt.subplots(2, sharey=True)
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()

fig2, (ax3) = plt.subplots(1)
fig2(figsize=(10,10))
ax3.plot(x001[:,0],x001[:,1])
ax3.plot(x001[:,0][359],x001[:,1][359], 'o')
ax3.set(xlabel='x(t)', ylabel='y(t)')
ax3.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][-30],x001[:,1][-30],'o', label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.title('Phase plane plot')
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][-30],x001[:,1][-30],'o', label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.title('Phase plane plot')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][359],x001[:,1][359],'o', label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.title('Phase plane plot')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][358],x001[:,1][358],'o', label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.title('Phase plane plot')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][360],x001[:,1][360],'o', label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.title('Phase plane plot')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][359],x001[:,1][359],'o', label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.title('Phase plane plot')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][259],x001[:,1][259],'o', label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.title('Phase plane plot')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][269],x001[:,1][269],'o', label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.title('Phase plane plot')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][269],x001[:,1][269],'o', label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.title('Phase plane plot')
plt.text(0.6,0.75, 'coord = (0.71, 0.69)\n 26.9h from beginning')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][269],x001[:,1][269],'o', label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.title('Phase plane plot')
plt.text(0.6,0.75, '(0.71,0.69)\n 26.9h from beginning')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][269],x001[:,1][269],'o', label='')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][269],x001[:,1][269],'o', label='')
line_1 = Line2D([0,0], [x001[:,0][269],x001[:,1][269]], linewidth=1, linestyle = "-", color="green")

plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][269],x001[:,1][269],'o', label='')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', color="green")

plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][269],x001[:,1][269],'o', label='')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', color="green")
plt.plot([-3,3],[0,0],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][269],x001[:,1][269],'o', label='')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', color="green")
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.2,1.2)
plt.ylim(-1.2,1.2)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][269],x001[:,1][269],'o', label='')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', color="green")
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][269],x001[:,1][269],'o', label='')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', color="r")
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', label='')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', color="r")
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], linewidth=2, label='')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', label='')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', color="r")
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', label='')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.5, color="r")
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], label='')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', label='')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r")
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], linewidth=1.2, label='')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', label='')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r")
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], linewidth=1.5, label='')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', label='')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r")
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], linewidth=1.5, label='limit cycle')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', label='state at 26.9h')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r", label='radius')
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], linewidth=1.5, label='limit cycle')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', label='state at 26.9h')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r", label='radius')
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.legend()
plt.show()

n=1000
t5 = np.linspace(0,400,4000)
state05 = [1,0]*n
x51 = odeint(oscillator_system, state05, t5, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x52 = odeint(oscillator_system, state05, t5, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x53 = odeint(oscillator_system, state05, t5, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x54 = odeint(oscillator_system, state05, t5, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

x51x = sep(x51)[0]
x52x = sep(x52)[0]
x53x = sep(x53)[0]
x54x = sep(x54)[0]

n=1000
t5 = np.linspace(0,400,4000)
state05 = [1,0]*n
x51 = odeint(oscillator_system, state05, t5, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n, [0.0]*n)))
x52 = odeint(oscillator_system, state05, t5, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n, [0.0]*n)))
x53 = odeint(oscillator_system, state05, t5, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n, [0.0]*n)))
x54 = odeint(oscillator_system, state05, t5, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 2*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n, [0.0]*n)))

x51x = sep(x51)[0]
x52x = sep(x52)[0]
x53x = sep(x53)[0]
x54x = sep(x54)[0]

np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with sigma 0.5 and state0 [1,0]",x51)
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with sigma 1 and state0 [1,0]",x52)
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with sigma 1.5 and state0 [1,0]",x53)
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with sigma 2 and state0 [1,0]",x54)
del x51,x52,x53,x54,x51x,x52x,x53x,x54x,t5
n=1000
t6 = np.linspace(0,600,600*20)
state06 = [1,0]*n
params6 = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)

x61 = ode_rand3(n,t6,state06,params6,0.05)
x62 = ode_rand3(n,t6,state06,params6,0.1)
x63 = ode_rand3(n,t6,state06,params6,0.2)
x64 = ode_rand3(n,t6,state06,params6,0.5)

x61x = sep(x61[1])[0]
x62x = sep(x62[1])[0]
x63x = sep(x63[1])[0]
x64x = sep(x64[1])[0]

np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.05 and state0 [1,0]",x61)
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.05 and state0 [1,0]",x61x)
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.1 and state0 [1,0]",x62x)
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.2 and state0 [1,0]",x63x)
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.5 and state0 [1,0]",x64x)
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.05 and state0 [1,0] time",x61[0])
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.1 and state0 [1,0] time",x62[0])
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.2 and state0 [1,0] time",x63[0])
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.5 and state0 [1,0] time",x64[0])
plt.figure(figsize=(16,8))

plt.plot(t[0:x61[1].shape[0]], np.mean(x61x, axis=0), label='E=0.05')
plt.plot(t[0:x62[1].shape[0]], np.mean(x62x, axis=0), label='E=0.1')
plt.plot(t[0:x63[1].shape[0]], np.mean(x63x, axis=0), label='E=0.2')
plt.plot(t[0:x64[1].shape[0]], np.mean(x64x, axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

x71=[[],[]]
x72=[[],[]]
x73=[[],[]]
x74=[[],[]]

x71[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.05 only solutions no time.npy")
x72[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.1 only solutions no time.npy")
x73[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.2 only solutions no time.npy")
x74[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.5 only solutions no time.npy")

x71[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.05 time.npy")
x72[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.1 time.npy")
x73[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.2 time.npy")
x74[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/1000 oscillators with E 0.5 time.npy")


#############

plt.figure(figsize=(16,8))

plt.plot(t[0:x71[1].shape[0]], np.mean(x71x, axis=0), label='E=0.05')
plt.plot(t[0:x72[1].shape[0]], np.mean(x72x, axis=0), label='E=0.1')
plt.plot(t[0:x73[1].shape[0]], np.mean(x73x, axis=0), label='E=0.2')
plt.plot(t[0:x74[1].shape[0]], np.mean(x74x, axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

x71x = sep(x71[1])[0]
x72x = sep(x72[1])[0]
x73x = sep(x73[1])[0]
x74x = sep(x74[1])[0]

plt.figure(figsize=(16,8))

plt.plot(t[0:x71[1].shape[0]], np.mean(x71x, axis=0), label='E=0.05')
plt.plot(t[0:x72[1].shape[0]], np.mean(x72x, axis=0), label='E=0.1')
plt.plot(t[0:x73[1].shape[0]], np.mean(x73x, axis=0), label='E=0.2')
plt.plot(t[0:x74[1].shape[0]], np.mean(x74x, axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

type(x72[0])
type(x62[0])
plt.figure(figsize=(16,8))

plt.plot(t[0:x71[1].shape[0]], np.mean(x71x, axis=0), label='E=0.05')
plt.plot(t[0:x72[1].shape[0]], np.mean(x72x, axis=0), label='E=0.1')
plt.plot(t[0:x73[1].shape[0]], np.mean(x73x, axis=0), label='E=0.2')
plt.plot(t[0:x74[1].shape[0]], np.mean(x74x, axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:x61[1].shape[0]], np.mean(x61x, axis=0), label='E=0.05')
plt.plot(t[0:x62[1].shape[0]], np.mean(x62x, axis=0), label='E=0.1')
plt.plot(t[0:x63[1].shape[0]], np.mean(x63x, axis=0), label='E=0.2')
plt.plot(t[0:x64[1].shape[0]], np.mean(x64x, axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(t[0:x71[1].shape[0]], np.mean(x71x, axis=0), label='E=0.05')
plt.plot(t[0:x72[1].shape[0]], np.mean(x72x, axis=0), label='E=0.1')
plt.plot(t[0:x73[1].shape[0]], np.mean(x73x, axis=0), label='E=0.2')
plt.plot(t[0:x74[1].shape[0]], np.mean(x74x, axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - OLD')
plt.legend()
plt.ylim(-1.5,1.5)

plt.figure(figsize=(16,8))

plt.plot(t[0:x61[1].shape[0]], np.mean(x61x, axis=0), label='E=0.05')
plt.plot(t[0:x62[1].shape[0]], np.mean(x62x, axis=0), label='E=0.1')
plt.plot(t[0:x63[1].shape[0]], np.mean(x63x, axis=0), label='E=0.2')
plt.plot(t[0:x64[1].shape[0]], np.mean(x64x, axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - NEW')
plt.legend()
plt.ylim(-1.5,1.5)

m4good = me(run_mean(np.mean(x64x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x61x, axis=0))
m2 = me(np.mean(x62x, axis=0))
m3 = me(np.mean(x63x, axis=0))
m4 = me(np.mean(x64x, axis=0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])

xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])

xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])

xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

#xydata = [xdata1,ydata1,xdata2,ydata2,xdata3,ydata3,xdata4,ydata4]  


popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)


plt.figure(figsize=(16,8))

plt.plot(xdata1,ydata1, 'ro', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'mo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'bo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ko', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 's=2.0 fit')

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1,'The slopes of curves are\n' + texttang)


plt.ylim(-1.5,1.5)
plt.xlim(10,160)
plt.legend()

plt.plot(m4[0],m4[1])
m4
clear
def extr(x):
    """Finds the extrema of the function. Returns [timepoints of extrema, values of extrema] list"""
    diff = np.diff(np.sign(np.diff(x)))
    extrT=[]
    extrVal=[]
    for i in range(len(diff)):
        if diff[i]!=0:
            extrVal.append(np.mean(x[i:i+2]))
            extrT.append(np.mean(t[i:i+2]))
    return [extrT,extrVal]

extr(np.mean(x61x,axis=0))
e1 = extr(np.mean(x61x,axis=0))
x61x[0][0:30]
np.diff(np.sign(np.diff(x61x[0][0:30])))
(np.diff(x61x[0][0:30]))
test = [0,0,10,7,3,9,-1,30]
len(test)
np.argpartition(test, -4)[-4:]
ind = np.argpartition(test, -4)[-4:]
test[ind]
test = np.array(test)
test[ind]
type(text)
type(test)
a = type(test)
type(a)
type([])
type([]) == type([2,3,4])
type([]) == type(test)
a[[1,2],[2,3]]
a=[[1,2],[2,3]]
np.array(a)
np.array(a)[0]
np.array(a)[1]
list(np.array(a))
np.array(a).tolist()
t
ind
t[ind]
np.mean(x61x,axis=0)[0]
np.mean(x61x,axis=0)[1]
def extr(x):
    """Finds the extrema of the function. Returns [timepoints of extrema, values of extrema] list.

    Very poorly deals with data on the borders"""
    diff = np.diff(np.sign(np.diff(x)))
    extrT=[]
    extrVal=[]
    for i in range(len(diff)):
        if diff[i]!=0:
            extrVal.append(np.mean(x[i:i+2]))
            extrT.append(np.mean(t[i:i+2]))
    if x[0]>x[1]:
        extrVal.insert(0, x[0])
        extrT.insert(0,t[0])
    return [extrT,extrVal]

plt.plot(t, np.mean(x61x,axis=0), label = 'Mean')
plt.plot(x61[0], np.mean(x61x,axis=0), label = 'Mean')
plt.plot(x61[0], np.mean(x61x,axis=0), label = 'Mean')
plt.plot(extr(x61)[0], extr(x61)[1], 'o', label='extrema')
plt.xlim(-10,100)
plt.legend()

extr(x61)
plt.plot(x61[0], np.mean(x61x,axis=0), label = 'Mean')
plt.plot(extr(x61x)[0], extr(x61)[1], 'o', label='extrema')
plt.xlim(-10,100)
plt.legend()

e = extr(np.mean(x61x, axis=0))
plt.plot(x61[0], np.mean(x61x,axis=0), label = 'Mean')
plt.plot(e[0], e[1], 'o', label='extrema')
plt.xlim(-10,100)
plt.legend()

def maxs2(list_extr):
    """Returns maxima in the form [values,timepoints]. 
    Designed to be used in combination with extr(), e.g. maxs(extr(solutions)).

    Use only with oscillatory functions"""

    if type(list_extr) == type([]):
        list_extr = np.array(list_extr) # If list - convert to np.array

    l = int(len(list_extr[0])/2) # l is total number of extrema/2. In other words, for even number of extrema its number of maxima or minima.
    ind = np.argpartition(list_extr, -l[-l:]) # Extract indices of the first "l" extrema (they will be maxima)
    return [list_extr[ind], t[ind]]

e = extr(np.mean(x61x, axis=0))
m = maxs2(e)
plt.plot(x61[0], np.mean(x61x,axis=0), label = 'Mean')
plt.plot(e[0], e[1], 'o', label='extrema')
plt.plot(m[0], m[1],'+', label = 'maxima')
plt.xlim(-10,100)
plt.legend()

e
l = int(len(e[0])/2)
l
def maxs2(list_extr):
    """Returns maxima in the form [values,timepoints]. 
    Designed to be used in combination with extr(), e.g. maxs(extr(solutions)).

    Use only with oscillatory functions"""

    if type(list_extr) == type([]):
        list_extr = np.array(list_extr) # If list - convert to np.array

    l = int(len(list_extr[0])/2) # l is total number of extrema/2. In other words, for even number of extrema its number of maxima or minima.
    ind = np.argpartition(list_extr, -l)[-l:] # Extract indices of the first "l" extrema (they will be maxima)
    return [list_extr[ind], t[ind]]


e = extr(np.mean(x61x, axis=0))
m = maxs2(e)
plt.plot(x61[0], np.mean(x61x,axis=0), label = 'Mean')
plt.plot(e[0], e[1], 'o', label='extrema')
plt.plot(m[0], m[1],'+', label = 'maxima')
plt.xlim(-10,100)
plt.legend()

ind = np.argpartition(e, -l)[-l:]
ind
ind = np.argpartition(e[1], -l)[-l:]
ind
def maxs2(list_extr):
    """Returns maxima in the form [values,timepoints]. 
    Designed to be used in combination with extr(), e.g. maxs(extr(solutions)).

    Use only with oscillatory functions"""

    if type(list_extr) == type([]):
        list_extr = np.array(list_extr) # If list - convert to np.array

    l = int(len(list_extr[0])/2) # l is total number of extrema/2. In other words, for even number of extrema its number of maxima or minima.
    ind = np.argpartition(list_extr[1], -l)[-l:] # Extract indices of the first "l" extrema (they will be maxima) out of the extrVal
    return [list_extr[ind], t[ind]]


e = extr(np.mean(x61x, axis=0))
m = maxs2(e)
plt.plot(x61[0], np.mean(x61x,axis=0), label = 'Mean')
plt.plot(e[0], e[1], 'o', label='extrema')
plt.plot(m[0], m[1],'+', label = 'maxima')
plt.xlim(-10,100)
plt.legend()

l = int(len(list_extr[0])/2)
l = int(len(e[0])/2)
l
ind = np.argpartition(e[1], -l)[-l:]
ind
e[1]
np.array(e[1])[ind]
def maxs2(list_extr):
    """Returns maxima in the form [values,timepoints]. 
    Designed to be used in combination with extr(), e.g. maxs(extr(solutions)).

    Use only with oscillatory functions. Expects input to be list"""


    l = int(len(list_extr[0])/2) # l is total number of extrema/2. In other words, for even number of extrema its number of maxima or minima.
    ind = np.argpartition(list_extr[1], -l)[-l:] # Extract indices of the first "l" extrema (they will be maxima) out of the extrVal
    return [np.array(list_extr[1])[ind], t[ind]]


e = extr(np.mean(x61x, axis=0))
m = maxs2(e)
plt.plot(x61[0], np.mean(x61x,axis=0), label = 'Mean')
plt.plot(e[0], e[1], 'o', label='extrema')
plt.plot(m[0], m[1],'+', label = 'maxima')
plt.xlim(-10,100)
plt.legend()

m
def maxs2(list_extr):
    """Returns maxima in the form [values,timepoints]. 
    Designed to be used in combination with extr(), e.g. maxs(extr(solutions)).

    Use only with oscillatory functions. Expects input to be list"""


    l = int(len(list_extr[0])/2) # l is total number of extrema/2. In other words, for even number of extrema its number of maxima or minima.
    ind = np.argpartition(list_extr[1], -l)[-l:] # Extract indices of the first "l" extrema (they will be maxima) out of the extrVal
    return [t[ind],np.array(list_extr[1])[ind]]


e = extr(np.mean(x61x, axis=0))
m = maxs2(e)
plt.plot(x61[0], np.mean(x61x,axis=0), label = 'Mean')
plt.plot(e[0], e[1], 'o', label='extrema')
plt.plot(m[0], m[1],'+', label = 'maxima')
plt.xlim(-10,100)
plt.legend()

t[ind]
def maxs2(list_extr):
    """Returns maxima in the form [values,timepoints]. 
    Designed to be used in combination with extr(), e.g. maxs(extr(solutions)).

    Use only with oscillatory functions. Expects input to be list"""


    l = int(len(list_extr[0])/2) # l is total number of extrema/2. In other words, for even number of extrema its number of maxima or minima.
    ind = np.argpartition(list_extr[1], -l)[-l:] # Extract indices of the first "l" extrema (they will be maxima) out of the extrVal
    return [np.array(list_extr[0])[ind], np.array(list_extr[1])[ind]]


e = extr(np.mean(x61x, axis=0))
m = maxs2(e)
plt.plot(x61[0], np.mean(x61x,axis=0), label = 'Mean')
plt.plot(e[0], e[1], 'o', label='extrema')
plt.plot(m[0], m[1],'+', label = 'maxima')
plt.xlim(-10,100)
plt.legend()


e = extr(np.mean(x61x, axis=0))
m = maxs2(e)
plt.plot(x61[0], np.mean(x61x,axis=0), label = 'Mean')
plt.plot(e[0], e[1], 'o', label='extrema')
plt.plot(m[0], m[1],'+', label = 'maxima')
plt.xlim(-10,200)
plt.legend()


e = extr(np.mean(x61x, axis=0))
m = maxs2(e)
plt.plot(x61[0], np.mean(x61x,axis=0), label = 'Mean')
plt.plot(e[0], e[1], 'o', label='extrema')
plt.plot(m[0], m[1],'+', label = 'maxima')
plt.xlim(200,500)
plt.legend()


e = extr(np.mean(x61x, axis=0))
m = maxs2(e)
plt.plot(x61[0], np.mean(x61x,axis=0), label = 'Mean')
plt.plot(e[0], e[1], 'o', label='extrema')
plt.plot(m[0], m[1],'+', label = 'maxima')
plt.xlim(300,600)
plt.legend()

runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
clear
plt.figure(figsize=(16,8))

m4good = me(run_mean(np.mean(x64x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x61x, axis=0))
m2 = me(np.mean(x62x, axis=0))
m3 = me(np.mean(x63x, axis=0))
m4 = me(np.mean(x64x, axis=0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

def maxs(list_extr):
    """Returns maxima in the form [values,timepoints]. 
    Designed to be used in combination with extr(), e.g. maxs(extr(solutions)).

    Use only with oscillatory functions. Expects input to be list"""


    l = int(len(list_extr[0])/2) # l is total number of extrema/2. In other words, for even number of extrema its number of maxima or minima.
    ind = np.argsort(np.argpartition(list_extr[1], -l)[-l:]) # Extract indices of the first "l" extrema (they will be maxima) out of the extrVal
    return [np.array(list_extr[0])[ind], np.array(list_extr[1])[ind]]


def me(x):
    return maxs(extr(x))

plt.figure(figsize=(16,8))

m4good = me(run_mean(np.mean(x64x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x61x, axis=0))
m2 = me(np.mean(x62x, axis=0))
m3 = me(np.mean(x63x, axis=0))
m4 = me(np.mean(x64x, axis=0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me(run_mean(np.mean(x64x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x61x, axis=0))
m2 = me(np.mean(x62x, axis=0))
m3 = me(np.mean(x63x, axis=0))
m4 = me(np.mean(x64x, axis=0))


#plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
#plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
#plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me(run_mean(np.mean(x64x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x61x, axis=0))
m2 = me(np.mean(x62x, axis=0))
m3 = me(np.mean(x63x, axis=0))
m4 = me(np.mean(x64x, axis=0))


#plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
#plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0][:6], m3[1][:6],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
#plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()


e = extr(np.mean(x61x, axis=0))
m = maxs2(e)
plt.plot(x61[0], np.mean(x61x,axis=0), label = 'Mean')
plt.plot(e[0], e[1], 'o', label='extrema')
plt.plot(m[0], m[1],'+', label = 'maxima')
#plt.xlim(300,600)
plt.legend()

plt.figure(figsize=(16,8))
e1 = extr(np.mean(x61x, axis=0))
e2 = extr(np.mean(x62x, axis=0))
e3 = extr(np.mean(x63x, axis=0))
e4 = extr(np.mean(x64x, axis=0))
m1 = maxs(e1)
m2 = maxs(e2)
m3 = maxs(e3)
m4 = maxs(e4)
plt.plot(x61[0],np.mean(x61x, axis=0), label='mean')
plt.plot(e1[0],e1[1], 'o',label='extrema')
plt.plot(m1[0],m1[1],'+',label='maxima')
plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

def maxs(list_extr):
    """Returns maxima in the form [values,timepoints]. 
    Designed to be used in combination with extr(), e.g. maxs(extr(solutions)).

    Use only with oscillatory functions. Expects input to be list"""


    l = int(len(list_extr[0])/2) # l is total number of extrema/2. In other words, for even number of extrema its number of maxima or minima.
    ind = np.argpartition(list_extr[1], -l)[-l:] # Extract indices of the first "l" extrema (they will be maxima) out of the extrVal
    return [np.array(list_extr[0])[ind], np.array(list_extr[1])[ind]]

plt.figure(figsize=(16,8))
e1 = extr(np.mean(x61x, axis=0))
e2 = extr(np.mean(x62x, axis=0))
e3 = extr(np.mean(x63x, axis=0))
e4 = extr(np.mean(x64x, axis=0))
m1 = maxs(e1)
m2 = maxs(e2)
m3 = maxs(e3)
m4 = maxs(e4)
plt.plot(x61[0],np.mean(x61x, axis=0), label='mean')
plt.plot(e1[0],e1[1], 'o',label='extrema')
plt.plot(m1[0],m1[1],'+',label='maxima')
plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
e1 = extr(np.mean(x61x, axis=0))
e2 = extr(np.mean(x62x, axis=0))
e3 = extr(np.mean(x63x, axis=0))
e4 = extr(np.mean(x64x, axis=0))
m1 = maxs(e1)
m2 = maxs(e2)
m3 = maxs(e3)
m4 = maxs(e4)
plt.plot(x61[0],np.mean(x61x, axis=0), label='mean')
#plt.plot(e1[0],e1[1], 'o',label='extrema')
#plt.plot(m1[0],m1[1],'+',label='maxima')
for i in [e1,e2,e3,e4]:
    plt.plot(i[0],i[1],'o', label='extrema')
for i in [m1,m2,m3,m4]:
    plt.plot(i[0],i[1],'+', label = 'maxima')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()        

plt.figure(figsize=(16,8))
e1 = extr(np.mean(x61x, axis=0))
e2 = extr(np.mean(x62x, axis=0))
e3 = extr(np.mean(x63x, axis=0))
e4 = extr(np.mean(x64x, axis=0))
m1 = maxs(e1)
m2 = maxs(e2)
m3 = maxs(e3)
m4 = maxs(e4)
plt.plot(x61[0],np.mean(x61x, axis=0), label='mean')
plt.plot(x62[0],np.mean(x62x, axis=0), label='mean')
plt.plot(x63[0],np.mean(x63x, axis=0), label='mean')
plt.plot(x64[0],np.mean(x64x, axis=0), label='mean')
#plt.plot(e1[0],e1[1], 'o',label='extrema')
#plt.plot(m1[0],m1[1],'+',label='maxima')
for i in [e1,e2,e3,e4]:
    plt.plot(i[0],i[1],'o', label='extrema')
for i in [m1,m2,m3,m4]:
    plt.plot(i[0],i[1],'+', label = 'maxima')


plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
e1 = extr(np.mean(x61x, axis=0))
e2 = extr(np.mean(x62x, axis=0))
e3 = extr(np.mean(x63x, axis=0))
e4 = extr(np.mean(x64x, axis=0))
m1 = maxs(e1)
m2 = maxs(e2)
m3 = maxs(e3)
m4 = maxs(e4)
plt.plot(x61[0],np.mean(x61x, axis=0), label='mean')
plt.plot(x62[0],np.mean(x62x, axis=0), label='mean')
plt.plot(x63[0],np.mean(x63x, axis=0), label='mean')
plt.plot(x64[0],np.mean(x64x, axis=0), label='mean')
#plt.plot(e1[0],e1[1], 'o',label='extrema')
#plt.plot(m1[0],m1[1],'+',label='maxima')
for i in [e1,e2,e3,e4]:
    plt.plot(i[0],i[1],'o', label='extrema')
for i in [m1,m2,m3,m4]:
    plt.plot(i[0],i[1],'+', label = 'maxima')


plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.title('Mean(x), extrema and maxima')
plt.legend()

runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.figure(figsize=(16,8))

m4good = me(run_mean(np.mean(x4x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x1x, axis=0))
m2 = me(np.mean(x2x, axis=0))
m3 = me(np.mean(x3x, axis=0))
m4 = me(np.mean(x4x, axis=0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

m1 = me(np.mean(x61x,axis=0))
plt.plot(m1[0],m1[1])

m1 = me(np.mean(x61x,axis=0))
plt.plot(m1[0],m1[1], 'o')

m1 = me(np.mean(x61x,axis=0))
plt.plot(m1[0],m1[1], '-')
plt.xlim(270,400)

m1 = me(np.mean(x61x,axis=0))
plt.plot(m1[0],m1[1], '-')
plt.xlim(270,400)
plt.ylim(0.88,0.93)

m1 = me(np.mean(x61x,axis=0))
plt.plot(m1[0],m1[1], '-')
plt.xlim(280,390)
plt.ylim(0.885,0.92)

m1 = me(np.mean(x61x,axis=0))
plt.plot(m1[0],m1[1], '-o')
plt.xlim(280,390)
plt.ylim(0.885,0.92)

plt.figure(figsize=(16,8))

m4good = me(run_mean(np.mean(x4x, axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me(np.mean(x1x, axis=0))
m2 = me(np.mean(x2x, axis=0))
m3 = me(np.mean(x3x, axis=0))
m4 = me(np.mean(x4x, axis=0))


plt.plot(m1[0], m1[1],'o', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))
e1 = extr(np.mean(x61x, axis=0))
e2 = extr(np.mean(x62x, axis=0))
e3 = extr(np.mean(x63x, axis=0))
e4 = extr(np.mean(x64x, axis=0))
m1 = maxs(e1)
m2 = maxs(e2)
m3 = maxs(e3)
m4 = maxs(e4)
plt.plot(x61[0],np.mean(x61x, axis=0), label='mean')
plt.plot(x62[0],np.mean(x62x, axis=0), label='mean')
plt.plot(x63[0],np.mean(x63x, axis=0), label='mean')
plt.plot(x64[0],np.mean(x64x, axis=0), label='mean')
#plt.plot(e1[0],e1[1], 'o',label='extrema')
#plt.plot(m1[0],m1[1],'+',label='maxima')
for i in [e1,e2,e3,e4]:
    plt.plot(i[0],i[1],'o-', label='extrema')
for i in [m1,m2,m3,m4]:
    plt.plot(i[0],i[1],'+', label = 'maxima')


plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.title('Mean(x), extrema and maxima')
plt.legend()

plt.figure(figsize=(16,8))
e1 = extr(np.mean(x61x, axis=0))
e2 = extr(np.mean(x62x, axis=0))
e3 = extr(np.mean(x63x, axis=0))
e4 = extr(np.mean(x64x, axis=0))
m1 = maxs(e1)
m2 = maxs(e2)
m3 = maxs(e3)
m4 = maxs(e4)
#plt.plot(x61[0],np.mean(x61x, axis=0), label='mean')
#plt.plot(x62[0],np.mean(x62x, axis=0), label='mean')
#plt.plot(x63[0],np.mean(x63x, axis=0), label='mean')
#plt.plot(x64[0],np.mean(x64x, axis=0), label='mean')
#plt.plot(e1[0],e1[1], 'o',label='extrema')
#plt.plot(m1[0],m1[1],'+',label='maxima')
for i in [e1,e2,e3,e4]:
    plt.plot(i[0],i[1],'o-', label='extrema')
#for i in [m1,m2,m3,m4]:
    #plt.plot(i[0],i[1],'+-', label = 'maxima')


plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.title('Mean(x), extrema and maxima')
plt.legend()

plt.figure(figsize=(16,8))
e1 = extr(np.mean(x61x, axis=0))
e2 = extr(np.mean(x62x, axis=0))
e3 = extr(np.mean(x63x, axis=0))
e4 = extr(np.mean(x64x, axis=0))
m1 = maxs(e1)
m2 = maxs(e2)
m3 = maxs(e3)
m4 = maxs(e4)
#plt.plot(x61[0],np.mean(x61x, axis=0), label='mean')
#plt.plot(x62[0],np.mean(x62x, axis=0), label='mean')
#plt.plot(x63[0],np.mean(x63x, axis=0), label='mean')
#plt.plot(x64[0],np.mean(x64x, axis=0), label='mean')
#plt.plot(e1[0],e1[1], 'o',label='extrema')
#plt.plot(m1[0],m1[1],'+',label='maxima')
#for i in [e1,e2,e3,e4]:
    #plt.plot(i[0],i[1],'o-', label='extrema')
for i in [m1,m2,m3,m4]:
    plt.plot(i[0],i[1],'+-', label = 'maxima')


plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.title('Mean(x), extrema and maxima')
plt.legend()

plt.figure(figsize=(16,8))
e1 = extr(np.mean(x61x, axis=0))
e2 = extr(np.mean(x62x, axis=0))
e3 = extr(np.mean(x63x, axis=0))
e4 = extr(np.mean(x64x, axis=0))
m1 = maxs(e1)
m2 = maxs(e2)
m3 = maxs(e3)
m4 = maxs(e4)
plt.plot(x61[0],np.mean(x61x, axis=0), label='mean')
plt.plot(x62[0],np.mean(x62x, axis=0), label='mean')
plt.plot(x63[0],np.mean(x63x, axis=0), label='mean')
plt.plot(x64[0],np.mean(x64x, axis=0), label='mean')
#plt.plot(e1[0],e1[1], 'o',label='extrema')
#plt.plot(m1[0],m1[1],'+',label='maxima')
for i in [e1,e2,e3,e4]:
    plt.plot(i[0],i[1],'o', label='extrema')
for i in [m1,m2,m3,m4]:
    plt.plot(i[0],i[1],'+', label = 'maxima')


plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.title('Mean(x), extrema and maxima')
plt.legend()

e1[0]
m1[0]
m1[1]
np.argsort(m1[0])
ind = np.argpartition(e3[1], -l)[-l:]
ind
ind.sort()
ind
np.array(e1[0])[ind]
ind

def maxs(list_extr):
    """Returns maxima in the form [values,timepoints]. 
    Designed to be used in combination with extr(), e.g. maxs(extr(solutions)).

    Use only with oscillatory functions. Expects input to be list"""


    l = int(len(list_extr[0])/2) # l is total number of extrema/2. In other words, for even number of extrema its number of maxima or minima.
    ind = np.argpartition(list_extr[1], -l)[-l:].sort() # Extract indices of the first "l" extrema (they will be maxima) out of the extrVal
    return [np.array(list_extr[0])[ind], np.array(list_extr[1])[ind]]

plt.figure(figsize=(16,8))
e1 = extr(np.mean(x61x, axis=0))
e2 = extr(np.mean(x62x, axis=0))
e3 = extr(np.mean(x63x, axis=0))
e4 = extr(np.mean(x64x, axis=0))
m1 = maxs(e1)
m2 = maxs(e2)
m3 = maxs(e3)
m4 = maxs(e4)
plt.plot(x61[0],np.mean(x61x, axis=0), label='mean')
plt.plot(x62[0],np.mean(x62x, axis=0), label='mean')
plt.plot(x63[0],np.mean(x63x, axis=0), label='mean')
plt.plot(x64[0],np.mean(x64x, axis=0), label='mean')
#plt.plot(e1[0],e1[1], 'o',label='extrema')
#plt.plot(m1[0],m1[1],'+',label='maxima')
for i in [e1,e2,e3,e4]:
    plt.plot(i[0],i[1],'o', label='extrema')
for i in [m1,m2,m3,m4]:
    plt.plot(i[0],i[1],'+', label = 'maxima')


plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.title('Mean(x), extrema and maxima')
plt.legend()

plt.figure(figsize=(16,8))
e1 = extr(np.mean(x61x, axis=0))
e2 = extr(np.mean(x62x, axis=0))
e3 = extr(np.mean(x63x, axis=0))
e4 = extr(np.mean(x64x, axis=0))
m1 = maxs(e1)
m2 = maxs(e2)
m3 = maxs(e3)
m4 = maxs(e4)
plt.plot(x61[0],np.mean(x61x, axis=0), label='mean')
plt.plot(x62[0],np.mean(x62x, axis=0), label='mean')
plt.plot(x63[0],np.mean(x63x, axis=0), label='mean')
plt.plot(x64[0],np.mean(x64x, axis=0), label='mean')
#plt.plot(e1[0],e1[1], 'o',label='extrema')
#plt.plot(m1[0],m1[1],'+',label='maxima')
for i in [e1,e2,e3,e4]:
    plt.plot(i[0],i[1],'o', label='extrema')
#for i in [m1,m2,m3,m4]:
    plt.plot(i[0],i[1],'+', label = 'maxima')


plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.title('Mean(x), extrema and maxima')
plt.legend()

plt.figure(figsize=(16,8))
e1 = extr(np.mean(x61x, axis=0))
e2 = extr(np.mean(x62x, axis=0))
e3 = extr(np.mean(x63x, axis=0))
e4 = extr(np.mean(x64x, axis=0))
m1 = maxs(e1)
m2 = maxs(e2)
m3 = maxs(e3)
m4 = maxs(e4)
plt.plot(x61[0],np.mean(x61x, axis=0), label='mean')
plt.plot(x62[0],np.mean(x62x, axis=0), label='mean')
plt.plot(x63[0],np.mean(x63x, axis=0), label='mean')
plt.plot(x64[0],np.mean(x64x, axis=0), label='mean')
#plt.plot(e1[0],e1[1], 'o',label='extrema')
#plt.plot(m1[0],m1[1],'+',label='maxima')
for i in [e1,e2,e3,e4]:
    plt.plot(i[0],i[1],'o', label='extrema')
#for i in [m1,m2,m3,m4]:
    #plt.plot(i[0],i[1],'+', label = 'maxima')


plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.title('Mean(x), extrema and maxima')
plt.legend()

maxs(e1)
e1
np.array(e1)
maxs(e1)
plt.plot(m1[0],m1[1])
ind = np.argpartition(e1[1], -l)[-l:]
ind
e1
e1 = np.array(e1)
clear
ind
e1
e1[0] = np.array(e1[0])
e1[1] = np.array(e1[1])
e1
e1[0]
e1
clear
e1
ind
e1[0][ind]
e1[0][ind].sort()
e1[0][ind]
e1ind = e1[0][ind]
e1ind
sort(e1ind)
np.sort(e1ind)
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
clear
a = [0.0027,0.0062,0.0099,0.0133]
a/sum(a)
for i in a:
    print (i/sum(a))
    
for i in a:
    print (i/a[0])
    
clear
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
a = [1,2,4,3,2,6,8,9,4,3]
maxs3(a)
maxs3(extr(a))
t = np.linspace(0,10,len(a))
maxs3(extr(a))
maxs(extr(a))
extr(a)
(2+4+3)/3
plt.plot(a)
plt.plot(a)
plt.plot(extr(a),'o')
plt.plot(maxs3(extr(a)),'+')

plt.plot(a)
plt.plot(extr(a)[0],extr(a)[1],'o')
plt.plot(maxs3(extr(a))[0],maxs3(extr(a))[1],'+')

runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
clear
##############################
# STARTING THE ENGINE
#############################
n = 1000
t = np.linspace(0, 400, 4000)
state0 = [1,0]*n

x1 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/Other state0/1000 oscillators with sigma 0.5 and state0 [1,0].npy")
x2 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/Other state0/1000 oscillators with sigma 1 and state0 [1,0].npy")
x3 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/Other state0/1000 oscillators with sigma 1.5 and state0 [1,0].npy")
x4 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/Other state0/1000 oscillators with sigma 2 and state0 [1,0].npy")

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]

t[0]
plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.plot(t,np.mean(x1x,axis=0), label="sigma 0.5")
plt.plot(t,np.mean(x2x,axis=0), label="sigma 1.0")
plt.plot(t,np.mean(x3x,axis=0), label="sigma 1.5")
plt.plot(t,np.mean(x4x,axis=0), label="sigma 2.0")

plt.plot(me(np.mean(x1x,axis=0))[0], me(np.mean(x1x,axis=0))[1], label="maxima sigma 0.5")
plt.plot(me(np.mean(x2x,axis=0))[0], me(np.mean(x2x,axis=0))[1], label="maxima sigma 1.0")
plt.plot(me(np.mean(x3x,axis=0))[0], me(np.mean(x3x,axis=0))[1], "+", label="maxima sigma 1.5")
plt.plot(me(np.mean(x4x,axis=0))[0], me(np.mean(x4x,axis=0))[1], "+", label="maxima sigma 2.0")

plt.legend()

runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
plt.plot(t,np.mean(x1x,axis=0), label="sigma 0.5")
plt.plot(t,np.mean(x2x,axis=0), label="sigma 1.0")
plt.plot(t,np.mean(x3x,axis=0), label="sigma 1.5")
plt.plot(t,np.mean(x4x,axis=0), label="sigma 2.0")

plt.plot(me(np.mean(x1x,axis=0))[0], me(np.mean(x1x,axis=0))[1], label="maxima sigma 0.5")
plt.plot(me(np.mean(x2x,axis=0))[0], me(np.mean(x2x,axis=0))[1], label="maxima sigma 1.0")
plt.plot(me(np.mean(x3x,axis=0))[0], me(np.mean(x3x,axis=0))[1], "+", label="maxima sigma 1.5")
plt.plot(me(np.mean(x4x,axis=0))[0], me(np.mean(x4x,axis=0))[1], "+", label="maxima sigma 2.0")

plt.legend()

def me4(x):
    return maxs3(extr(x))

plt.figure(figsize=(20,8))

plt.plot(t,np.mean(x1x,axis=0), label="sigma 0.5")
plt.plot(t,np.mean(x2x,axis=0), label="sigma 1.0")
plt.plot(t,np.mean(x3x,axis=0), label="sigma 1.5")
plt.plot(t,np.mean(x4x,axis=0), label="sigma 2.0")

plt.plot(me4(np.mean(x1x,axis=0))[0], me(np.mean(x1x,axis=0))[1], '+', label="maxima sigma 0.5")
plt.plot(me4(np.mean(x2x,axis=0))[0], me(np.mean(x2x,axis=0))[1], '+', label="maxima sigma 1.0")
plt.plot(me4(np.mean(x3x,axis=0))[0], me(np.mean(x3x,axis=0))[1], "+", label="maxima sigma 1.5")
plt.plot(me4(np.mean(x4x,axis=0))[0], me(np.mean(x4x,axis=0))[1], "+", label="maxima sigma 2.0")

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.legend()

np.shape(x1x)
np.shape(np.mean(x1x,axis=0))
maxs3(np.mean(x1x,axis=0))
maxs3(extr(np.mean(x1x,axis=0)))
np.shape(maxs3(extr(np.mean(x1x,axis=0))))
plt.figure(figsize=(20,8))

plt.plot(t,np.mean(x1x,axis=0), label="sigma 0.5")
plt.plot(t,np.mean(x2x,axis=0), label="sigma 1.0")
plt.plot(t,np.mean(x3x,axis=0), label="sigma 1.5")
plt.plot(t,np.mean(x4x,axis=0), label="sigma 2.0")

plt.plot(me4(np.mean(x1x,axis=0))[0], me4(np.mean(x1x,axis=0))[1], '+', label="maxima sigma 0.5")
plt.plot(me4(np.mean(x2x,axis=0))[0], me4(np.mean(x2x,axis=0))[1], '+', label="maxima sigma 1.0")
plt.plot(me4(np.mean(x3x,axis=0))[0], me4(np.mean(x3x,axis=0))[1], "+", label="maxima sigma 1.5")
plt.plot(me4(np.mean(x4x,axis=0))[0], me4(np.mean(x4x,axis=0))[1], "+", label="maxima sigma 2.0")

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.legend()

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0),'r-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'m-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'b-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'k-', label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot(t,np.mean(x1x,axis=0),'r-', label="sigma 0.5")
plt.plot(t,np.mean(x2x,axis=0),'m-', label="sigma 1.0")
plt.plot(t,np.mean(x3x,axis=0),'b-', label="sigma 1.5")
plt.plot(t,np.mean(x4x,axis=0),'k-', label="sigma 2.0")

plt.plot(me4(np.mean(x1x,axis=0))[0], me4(np.mean(x1x,axis=0))[1], 'ro', label="maxima sigma 0.5")
plt.plot(me4(np.mean(x2x,axis=0))[0], me4(np.mean(x2x,axis=0))[1], 'mo', label="maxima sigma 1.0")
plt.plot(me4(np.mean(x3x,axis=0))[0], me4(np.mean(x3x,axis=0))[1], 'bo', label="maxima sigma 1.5")
plt.plot(me4(np.mean(x4x,axis=0))[0], me4(np.mean(x4x,axis=0))[1], 'ko', label="maxima sigma 2.0")

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.legend()

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0),'r-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'m-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'b-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'k-', label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0),'b-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'-', color='orange', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'g-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot(t,np.mean(x1x,axis=0),'k-', label="sigma 0.5")
plt.plot(t,np.mean(x2x,axis=0),'b-', label="sigma 1.0")
plt.plot(t,np.mean(x3x,axis=0),'m-', label="sigma 1.5")
plt.plot(t,np.mean(x4x,axis=0),'r-', label="sigma 2.0")

plt.plot(me4(np.mean(x1x,axis=0))[0], me4(np.mean(x1x,axis=0))[1], 'ko', label="maxima sigma 0.5")
plt.plot(me4(np.mean(x2x,axis=0))[0], me4(np.mean(x2x,axis=0))[1], 'bo', label="maxima sigma 1.0")
plt.plot(me4(np.mean(x3x,axis=0))[0], me4(np.mean(x3x,axis=0))[1], 'mo', label="maxima sigma 1.5")
plt.plot(me4(np.mean(x4x,axis=0))[0], me4(np.mean(x4x,axis=0))[1], 'ro', label="maxima sigma 2.0")

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])


popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)


plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])


popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)


plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-10,200)
plt.ylim(-0.4,1.3)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])


popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)


plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
#plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
#plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
#plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
#plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-10,200)
plt.ylim(-0.4,1.3)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])


popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)


plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
#plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
#plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
#plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
#plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-10,300)
plt.ylim(-0.4,1.3)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])


popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)


plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-10,300)
plt.ylim(-0.4,1.3)
plt.legend()

rt
rt/rt[0]
xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])


popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)


plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-10,400)
plt.ylim(-0.4,1.3)
plt.legend()

xdata1 = np.array(me(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me(np.mean(x4x, axis=0))[1])


popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)


plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-10,400)
plt.ylim(-0.4,1.3)
plt.legend()

xdata1 = np.array(me(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me(np.mean(x4x, axis=0))[1])


popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)


plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-10,400)
plt.ylim(-0.4,1.3)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])


popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)


plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-10,400)
plt.ylim(-0.4,1.3)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])


popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)


plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-10,200)
plt.ylim(-0.4,1.3)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])


popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)


plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-10,200)
plt.ylim(-0.4,1.3)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])


popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)


plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-10,200)
plt.ylim(0.2,1.3)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])


popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)


plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-10,200)
plt.ylim(0,1.15)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])


popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)


plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-10,200)
plt.ylim(0.2,1.3)
plt.legend()

popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)


plt.figure(figsize=(10,6))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(15,200)
plt.ylim(-0.4,1.3)
plt.legend()

plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-5,200)
plt.ylim(-0.2,1.2)
plt.legend()

plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-5,220)
plt.ylim(-0.2,1.2)
plt.legend()

plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-10,220)
plt.ylim(-0.2,1.2)
plt.legend()

plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(133,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.legend()

plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.legend()

plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
SMALL_SIZE = 8
MEDIUM_SIZE = 10
BIGGER_SIZE = 12

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
plt.legend()

plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
SMALL_SIZE = 10
MEDIUM_SIZE = 12
BIGGER_SIZE = 14

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
plt.legend()

plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
SMALL_SIZE = 12
MEDIUM_SIZE = 14
BIGGER_SIZE = 16

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
plt.legend()

plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
SMALL_SIZE = 10
MEDIUM_SIZE = 14
BIGGER_SIZE = 18

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
plt.legend()

plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)

SMALL_SIZE = 20
#MEDIUM_SIZE = 14
#BIGGER_SIZE = 18

#plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
#plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
#plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
#plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
#plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
#plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
plt.legend()

plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)

SMALL_SIZE = 20
#MEDIUM_SIZE = 14
#BIGGER_SIZE = 18

#plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
#plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
#plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
#plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
#plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
#plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
plt.legend()

plt.figure(figsize=(10,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title
plt.legend()

plt.figure(figsize=(10,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')

plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')

plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')

plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])

plt.ylabel ('Maxima of mean(x-coordinate) of 1000 oscillators fitted to line')
plt.xlabel ('time, hours')

texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)


plt.legend()

plt.figure(figsize=(10,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')
# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,1.1,'The slopes of curves are\n' + texttang)
plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Maxima of mean(x-coordinate) of 1000 oscillators fitted to the line')
plt.legend()

plt.figure(figsize=(10,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=30)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')
# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,1.1,'The slopes of curves are\n' + texttang)
plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Maxima of mean(x-coordinate) of 1000 oscillators fitted to the line')
plt.legend()

plt.figure(figsize=(10,8))
plt.rc('font', size=16)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=18)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')
# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,1.1,'The slopes of curves are\n' + texttang)
plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Maxima of mean(x-coordinate) of 1000 oscillators fitted to the line')
plt.legend()

plt.figure(figsize=(10,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=18)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')
# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,1.1,'The slopes of curves are\n' + texttang)
plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Maxima of mean(x-coordinate) of 1000 oscillators fitted to the line', fontsize=16)
plt.legend()

plt.figure(figsize=(10,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')
# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,1.1,'The slopes of curves are\n' + texttang)
plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Maxima of mean(x-coordinate) of 1000 oscillators fitted to the line', fontsize=16)
plt.grid()
plt.legend()

plt.figure(figsize=(10,8))
plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')
# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(90,1.1,'The slopes of curves are\n' + texttang)
plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Maxima of mean(x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=16)
plt.legend()

plt.figure(figsize=(10,8))
plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')
# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(90,1.1,'The slopes of curves are\n' + texttang)
plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean(x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

plt.figure(figsize=(10,8))
plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=14)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')
# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(90,1.1,'The slopes of curves are\n' + texttang)
plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean(x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

plt.figure(figsize=(10,8))
plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=20)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')
# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(90,1.1,'The slopes of curves are\n' + texttang)
plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean(x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

plt.figure(figsize=(10,8))
plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')
# These things need to be applied after xlim() and ylim()
#plt.text(70,1.1,str(rt[0]), rotation=np.rad2deg(np.arctan(rt)))
#plt.text(70,1.03,str(rt[0]) + ' incorrect rotation', rotation=angles[0])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(90,1.1,'The slopes of curves are\n' + texttang)
plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean(x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

plt.figure(figsize=(20,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('Mean of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,300)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=15)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,300)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=15)
plt.legend()
plt.grid()
plt.show()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,300)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=15)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=15)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=17)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(t,np.mean(x1x,axis=0),'k-', label="sigma 0.5")
plt.plot(t,np.mean(x2x,axis=0),'b-', label="sigma 1.0")
plt.plot(t,np.mean(x3x,axis=0),'m-', label="sigma 1.5")
plt.plot(t,np.mean(x4x,axis=0),'r-', label="sigma 2.0")

plt.plot(me4(np.mean(x1x,axis=0))[0], me4(np.mean(x1x,axis=0))[1], 'ko', label="maxima sigma 0.5")
plt.plot(me4(np.mean(x2x,axis=0))[0], me4(np.mean(x2x,axis=0))[1], 'bo', label="maxima sigma 1.0")
plt.plot(me4(np.mean(x3x,axis=0))[0], me4(np.mean(x3x,axis=0))[1], 'mo', label="maxima sigma 1.5")
plt.plot(me4(np.mean(x4x,axis=0))[0], me4(np.mean(x4x,axis=0))[1], 'ro', label="maxima sigma 2.0")

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title('Mean and its maxima (x-coordinate) of 1000 heterogenous oscillators', fontsize=16)
plt.legend()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(t,np.mean(x1x,axis=0),'k-', label="sigma 0.5")
plt.plot(t,np.mean(x2x,axis=0),'b-', label="sigma 1.0")
plt.plot(t,np.mean(x3x,axis=0),'m-', label="sigma 1.5")
plt.plot(t,np.mean(x4x,axis=0),'r-', label="sigma 2.0")

plt.plot(me4(np.mean(x1x,axis=0))[0], me4(np.mean(x1x,axis=0))[1], 'ko', label="maxima sigma 0.5")
plt.plot(me4(np.mean(x2x,axis=0))[0], me4(np.mean(x2x,axis=0))[1], 'bo', label="maxima sigma 1.0")
plt.plot(me4(np.mean(x3x,axis=0))[0], me4(np.mean(x3x,axis=0))[1], 'mo', label="maxima sigma 1.5")
plt.plot(me4(np.mean(x4x,axis=0))[0], me4(np.mean(x4x,axis=0))[1], 'ro', label="maxima sigma 2.0")

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.xlim(-10,350)
plt.title('Mean and its maxima (x-coordinate) of 1000 heterogenous oscillators', fontsize=16)
plt.legend()

plt.figure(figsize=(10,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(90,1.1,'The slopes of curves are\n' + texttang)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean(x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean(x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

plt.figure(figsize=(12,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)

plt.xlim(-5,270)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

plt.figure(figsize=(12,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)

#plt.xlim(-5,270)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

plt.figure(figsize=(12,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')
plt.plot([0]*400, [0.3]*400, '-')
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)

#plt.xlim(-5,270)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

plt.figure(figsize=(12,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.plot(np.linspace(0,400,400), [0.3]*400, '-')
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)

#plt.xlim(-5,270)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

plt.figure(figsize=(12,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.plot(np.linspace(0,400,400), [0.23]*400, '-')
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)

#plt.xlim(-5,270)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

nt = rt/rt[0]

plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,0.8,'Normalized\n' + texttang2)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

nt
rt
type(rt/rt[0])
(rt/rt[0]).tolist()
rt = roundl(tangents,4)
nt = (rt/rt[0]).tolist()

plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,0.8,'Normalized\n' + texttang2)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

rt = roundl(tangents,4)
nt = (rt/rt[0]).tolist()

plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,1.0,'Normalized\n' + texttang2)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,1.0,'Normalized\n' + texttang2)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,1.0,'Normalized\n' + texttang2)

#plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

plt.figure(figsize=(14,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,1.0,'Normalized\n' + texttang2)

#plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

plt.figure(figsize=(14,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
plt.plot(np.linspace(0,400,400), [0.90]*400, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,1.0,'Normalized\n' + texttang2)

#plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

plt.figure(figsize=(14,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
plt.plot(np.linspace(0,400,400), [0.93]*400, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,1.0,'Normalized\n' + texttang2)

#plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

plt.figure(figsize=(14,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
plt.plot(np.linspace(0,400,400), [0.945]*400, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,1.0,'Normalized\n' + texttang2)

#plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

plt.figure(figsize=(14,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.plot(np.linspace(0,180,180), [0.23]*180, '-', label = 'Lowest cut-off limit')
plt.plot(np.linspace(0,400,400), [0.945]*400, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,1.0,'Normalized\n' + texttang2)

#plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

plt.figure(figsize=(14,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,1.0,'Normalized\n' + texttang2)

#plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=15)
plt.legend()

rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

plt.figure(figsize=(14,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,1.0,'Normalized\n' + texttang2)

#plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=16)
plt.legend()

plt.figure(figsize=(20,8))

plt.plot (t[:3462], run_mean(np.var(x1x,axis=0),120,1), label = 'sigma=0.5')
plt.plot (t[:3462], run_mean(np.var(x2x,axis=0),120,1), label = 'sigma=1')
plt.plot (t[:3462], run_mean(np.var(x3x,axis=0),120,1), label = 'sigma=1.5')
plt.plot (t[:3462], run_mean(np.var(x4x,axis=0),120,1), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(20,8))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.var(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.var(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.var(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-1.5,2.5)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.var(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.var(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.var(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-0.5,1.5)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.var(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.var(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.var(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-0.5,0.65)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.var(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.var(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.var(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators')
plt.xlabel ('time, hours')

plt.ylim(-0.05,0.65)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), label = 'sigma=2')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (72,4)')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (smoothened)')
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (smoothened)', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(12,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (smoothened)', fontsize=16)
plt.xlim(-10,250)
plt.legend()
plt.show()

plt.figure(figsize=(12,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (smoothened)', fontsize=16)
#plt.xlim(-10,250)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(12,10))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of x-coordinate of 1000 oscillators with running average (12h,2) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(12,10))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to quadratic', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(12,10))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to quadratic', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(12,10))
plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,170)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to quadratic', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))
plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0], label = 'sigma=1')
plt.plot (t, phvar(x3)[0], label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0], label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))
plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0], label = 'sigma=1')
plt.plot (t, phvar(x3)[0], label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0], label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators')
plt.xlabel ('time, hours')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))
plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0], label = 'sigma=1')
plt.plot (t, phvar(x3)[0], label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0], label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of 1000 heterogenous oscillators')
plt.legend()
plt.show()

plt.figure(figsize=(16,8))
plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0], label = 'sigma=1')
plt.plot (t, phvar(x3)[0], label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0], label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of 1000 heterogenous oscillators', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))
plt.plot (t[:3462], run_mean(phvar(x1)[0],120,1), label = 'sigma=0.5')
plt.plot (t[:3462], run_mean(phvar(x2)[0],120,1), label = 'sigma=1')
plt.plot (t[:3462], run_mean(phvar(x3)[0],120,1), label = 'sigma=1.5')
plt.plot (t[:3462], run_mean(phvar(x4)[0],120,1), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2)')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))
plt.plot (t[:3762], run_mean(phvar(x1)[0],120,1), label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(phvar(x2)[0],120,1), label = 'sigma=1')
plt.plot (t[:3762], run_mean(phvar(x3)[0],120,1), label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(phvar(x4)[0],120,1), label = 'sigma=2')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2)')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

plt.figure(figsize=(16,8))
plt.plot (t[:3762], run_mean(phvar(x1)[0],120,1), label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(phvar(x2)[0],120,1), label = 'sigma=1')
plt.plot (t[:3762], run_mean(phvar(x3)[0],120,1), label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(phvar(x4)[0],120,1), label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')
plt.title('Variance of phase of 1000 heterogenous oscillators (smoothened)', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))
plt.plot (t[:3762], run_mean(phvar(x1)[0],120,1),'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(phvar(x2)[0],120,1),'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(phvar(x3)[0],120,1),'m-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(phvar(x4)[0],120,1),'r-', label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
#plt.yscale('log')
#plt.xscale('log')
plt.title('Variance of phase of 1000 heterogenous oscillators (smoothened)', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(12,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,quad(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to quadratic', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(12,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), 'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), 'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), 'm-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), 'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (smoothened)', fontsize=16)
plt.xlim(-10,250)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))
plt.plot (t, phvar(x1)[0],'k-', label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0],'b-', label = 'sigma=1')
plt.plot (t, phvar(x3)[0],'m-', label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0],'r-', label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of 1000 heterogenous oscillators', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))
plt.plot (t[:3762], run_mean(phvar(x1)[0],120,1),'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(phvar(x2)[0],120,1),'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(phvar(x3)[0],120,1),'m-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(phvar(x4)[0],120,1),'r-', label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of 1000 heterogenous oscillators (smoothened)', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(lin,xdata[40:2000],ydata1[40:2000])
popt2,pcov2 = curve_fit(lin,xdata[:800],ydata2[:800])
popt3,pcov3 = curve_fit(lin,xdata[:700],ydata3[:700])
popt4,pcov4 = curve_fit(lin,xdata[:500],ydata4[:500])

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2) fitted to linear function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(lin,xdata[40:2000],ydata1[40:2000])
popt2,pcov2 = curve_fit(lin,xdata[:800],ydata2[:800])
popt3,pcov3 = curve_fit(lin,xdata[:700],ydata3[:700])
popt4,pcov4 = curve_fit(lin,xdata[:500],ydata4[:500])

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')

plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')

plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')

plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2) fitted to linear function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')

plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(lin,xdata[40:2000],ydata1[40:2000])
popt2,pcov2 = curve_fit(lin,xdata[:800],ydata2[:800])
popt3,pcov3 = curve_fit(lin,xdata[:700],ydata3[:700])
popt4,pcov4 = curve_fit(lin,xdata[:500],ydata4[:500])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)

for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(200,1000,'Slopes\n' + texttang)
plt.text(200,500,'Normalized\n' + texttang2)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to linear function', fontsize=16)
plt.legend()
plt.show()

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),3)

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)

for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(200,1000,'Slopes\n' + texttang)
plt.text(200,500,'Normalized\n' + texttang2)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to linear function', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(lin,xdata[40:2000],ydata1[40:2000])
popt2,pcov2 = curve_fit(lin,xdata[:800],ydata2[:800])
popt3,pcov3 = curve_fit(lin,xdata[:700],ydata3[:700])
popt4,pcov4 = curve_fit(lin,xdata[:500],ydata4[:500])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),3)

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)

texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(200,1000,'Slopes\n' + texttang)
plt.text(200,500,'Normalized\n' + texttang2)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to linear function', fontsize=16)
plt.legend()
plt.show()

xdata[500]
xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(lin,xdata[500:1900],ydata1[500:1900])
popt2,pcov2 = curve_fit(lin,xdata[100:800],ydata2[100:800])
popt3,pcov3 = curve_fit(lin,xdata[60:600],ydata3[60:600])
popt4,pcov4 = curve_fit(lin,xdata[10:400],ydata4[10:400])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),3)

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)

texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(200, 1000, 'Slopes\n' + texttang)
plt.text(200, 500, 'Normalized\n' + texttang2)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to linear function', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(lin,xdata[500:1900],ydata1[500:1900])
popt2,pcov2 = curve_fit(lin,xdata[200:800],ydata2[200:800])
popt3,pcov3 = curve_fit(lin,xdata[100:600],ydata3[100:600])
popt4,pcov4 = curve_fit(lin,xdata[10:400],ydata4[10:400])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),3)

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)

texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(200, 1000, 'Slopes\n' + texttang)
plt.text(200, 500, 'Normalized\n' + texttang2)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to linear function', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(lin,xdata[550:1700],ydata1[550:1700])
popt2,pcov2 = curve_fit(lin,xdata[200:800],ydata2[200:800])
popt3,pcov3 = curve_fit(lin,xdata[130:600],ydata3[130:600])
popt4,pcov4 = curve_fit(lin,xdata[40:400],ydata4[40:400])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),3)

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)

texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(200, 1000, 'Slopes\n' + texttang)
plt.text(200, 500, 'Normalized\n' + texttang2)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to linear function', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(lin,xdata[550:1700],ydata1[550:1700])
popt2,pcov2 = curve_fit(lin,xdata[200:800],ydata2[200:800])
popt3,pcov3 = curve_fit(lin,xdata[150:580],ydata3[150:580])
popt4,pcov4 = curve_fit(lin,xdata[40:400],ydata4[40:400])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),3)

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)

texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(200, 1000, 'Slopes\n' + texttang)
plt.text(200, 500, 'Normalized\n' + texttang2)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to linear function', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(lin,xdata[550:1700],ydata1[550:1700])
popt2,pcov2 = curve_fit(lin,xdata[200:800],ydata2[200:800])
popt3,pcov3 = curve_fit(lin,xdata[200:580],ydata3[200:580])
popt4,pcov4 = curve_fit(lin,xdata[40:400],ydata4[40:400])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),3)

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)

texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(200, 1000, 'Slopes\n' + texttang)
plt.text(200, 500, 'Normalized\n' + texttang2)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to linear function', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(lin,xdata[550:1700],ydata1[550:1700])
popt2,pcov2 = curve_fit(lin,xdata[200:800],ydata2[200:800])
popt3,pcov3 = curve_fit(lin,xdata[200:500],ydata3[200:500])
popt4,pcov4 = curve_fit(lin,xdata[40:380],ydata4[40:380])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),3)

plt.figure(figsize=(16,8))

plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)

texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(200, 1000, 'Slopes\n' + texttang)
plt.text(200, 500, 'Normalized\n' + texttang2)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to linear function', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(quad,xdata[:800],ydata1[:800])
popt2,pcov2 = curve_fit(quad,xdata[:400],ydata2[:400])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,4)

plt.figure(figsize=(10,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,50,'The coefficients of curves are\n' + texttang)

plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(quad,xdata[:800],ydata1[:800])
popt2,pcov2 = curve_fit(quad,xdata[:400],ydata2[:400])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,4)

plt.figure(figsize=(10,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase of 1000 oscillators with running average (120,2) fitted to quadratic function')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(65,50,'The coefficients of curves are\n' + texttang)

plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(quad,xdata[:800],ydata1[:800])
popt2,pcov2 = curve_fit(quad,xdata[:400],ydata2[:400])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,3)

plt.figure(figsize=(10,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5 data')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(60,50,'The coefficients of curves are\n' + texttang)
plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to quadratic', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(quad,xdata[:800],ydata1[:800])
popt2,pcov2 = curve_fit(quad,xdata[:400],ydata2[:400])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,3)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')

plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')

plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')

plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,180)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(60,50,'The coefficients of curves are\n' + texttang)
plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to quadratic', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

curve_fit?
max_nfev=30
clear
popt1,pcov1 = curve_fit(expon,xdata,ydata1, max_nfev=30)
popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

popt3
popt1,pcov1 = curve_fit(expon,xdata,ydata1, maxfev=850)
popt1,pcov1 = curve_fit(expon,xdata,ydata1, maxfev=10000)
curve_fit?
plt.figure(figsize=(16,8))
plt.plot (t[:3762], run_mean(phvar(x1)[0],120,1),'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(phvar(x2)[0],120,1),'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(phvar(x3)[0],120,1),'m-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(phvar(x4)[0],120,1),'r-', label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of 1000 heterogenous oscillators (smoothened)', fontsize=16)
plt.legend()
plt.show()

expon?
popt1,pcov1 = curve_fit(expon,xdata,ydata1, p0=[400,-0.015,100])
popt2,pcov2 = curve_fit(expon,xdata,ydata2, p0=[400,-0.015,100])
popt3,pcov3 = curve_fit(expon,xdata,ydata3, p0=[400,-0.015,100])
popt4,pcov4 = curve_fit(expon,xdata,ydata4, p0=[400,-0.015,100])

popt1,pcov1 = curve_fit(expon,xdata,ydata1, p0=[400,-0.015,100],maxfev=1000)
popt2,pcov2 = curve_fit(expon,xdata,ydata2, p0=[400,-0.015,100],maxfev=1000)
popt3,pcov3 = curve_fit(expon,xdata,ydata3, p0=[400,-0.015,100],maxfev=1000)
popt4,pcov4 = curve_fit(expon,xdata,ydata4, p0=[400,-0.015,100],maxfev=1000)

popt1,pcov1 = curve_fit(expon,xdata,ydata1, p0=[400,-0.005,100])
popt1,pcov1 = curve_fit(expon,xdata,ydata1)
import bigfloat
from bigfloat import *
def expon2(x, a, b, c):
    """Returns ae^(-bx) + c"""
    return BigFloat(a) * np.exp(-BigFloat(b) * BigFloat(x)) + c

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt1,pcov1 = curve_fit(expon2,xdata,ydata1)
from math import exp
def expon2(x, a, b, c):
    """Returns ae^(-bx) + c"""
    return BigFloat(a) * exp(-BigFloat(b) * BigFloat(x)) + c

popt1,pcov1 = curve_fit(expon2,xdata,ydata1)
type(xdata)
xdata
BigFloat(xdata)
BigFloat(xdata.tolist())
def expon2(x, a, b, c):
    """Returns ae^(-bx) + c"""
    for i in x:
        i = BigFloat(i)
    return BigFloat(a) * exp(-BigFloat(b) * BigFloat(x)) + c

popt1,pcov1 = curve_fit(expon2,xdata,ydata1)
def expon2(x, a, b, c):
    """Returns ae^(-bx) + c"""
    for i in x:
        i = BigFloat(i)
    return BigFloat(a*exp(-b*x) + c)

popt1,pcov1 = curve_fit(expon2,xdata,ydata1)
def expon3(x):
    y=[]
    for i in x:
        y.append(expon2(i))
    return y

popt1,pcov1 = curve_fit(expon3,xdata,ydata1)
ydata1_l = np.log(ydata1)
popt1,pcov1 = curve_fit(lin,xdata,ydata1)
plt.plot(xdata,ydata1_l, label='ydata1_l')
plt.figure(figsize=(16,8))
plt.plot(xdata,ydata1_l, label='ydata1_l')
plt.plot(xdata,lin(xdata,*popt1),'r-', label = 'fit')
plt.legend()

plt.figure(figsize=(16,8))
plt.plot(xdata,ydata1_l, label='ydata1_l')
plt.plot(xdata,lin(xdata,*popt1),'r-', label = 'fit')
plt.yscale('log')
plt.legend()

plt.figure(figsize=(16,8))
plt.plot (t[:3762], run_mean(phvar(x1)[0],120,1),'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(phvar(x2)[0],120,1),'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(phvar(x3)[0],120,1),'m-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(phvar(x4)[0],120,1),'r-', label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of 1000 heterogenous oscillators (smoothened)', fontsize=16)
plt.yscale('log')
plt.legend()
plt.show()

del bigfloat
bigflota?
bigfloat?
import bigfloat
bigfloat?
del bigflota
del bigfloat
plt.figure(figsize=(16,8))
plt.plot (t[:3762], run_mean(phvar(x1)[0],120,1),'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(phvar(x2)[0],120,1),'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(phvar(x3)[0],120,1),'m-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(phvar(x4)[0],120,1),'r-', label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of 1000 heterogenous oscillators (smoothened)', fontsize=16)
plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(16,8))
plt.plot (t[:3762], run_mean(phvar(x1)[0],120,1),'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(phvar(x2)[0],120,1),'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(phvar(x3)[0],120,1),'m-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(phvar(x4)[0],120,1),'r-', label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of 1000 heterogenous oscillators (smoothened)', fontsize=16)
plt.yscale('log')
plt.legend()
plt.show()

bigfloat?
import bigfloat
clear
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
n = 1000
t = np.linspace(0, 400, 4000)
state0 = [1,0]*n

x1 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/Other state0/1000 oscillators with sigma 0.5 and state0 [1,0].npy")
x2 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/Other state0/1000 oscillators with sigma 1 and state0 [1,0].npy")
x3 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/Other state0/1000 oscillators with sigma 1.5 and state0 [1,0].npy")
x4 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/Other state0/1000 oscillators with sigma 2 and state0 [1,0].npy")

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]


def me4(x):
    return maxs3(extr(x))

plt.figure(figsize=(16,8))
plt.plot (t[:3762], run_mean(phvar(x1)[0],120,1),'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(phvar(x2)[0],120,1),'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(phvar(x3)[0],120,1),'m-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(phvar(x4)[0],120,1),'r-', label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of 1000 heterogenous oscillators (smoothened)', fontsize=16)
plt.yscale('log')
plt.legend()
plt.show()

plt.figure(figsize=(16,8))
plt.plot (t[:3762], run_mean(phvar(x1)[0],120,1),'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(phvar(x2)[0],120,1),'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(phvar(x3)[0],120,1),'m-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(phvar(x4)[0],120,1),'r-', label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of 1000 heterogenous oscillators (smoothened)', fontsize=16)
#plt.yscale('log')
plt.legend()
plt.show()


popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(quad,xdata[:800],ydata1[:800])
popt2,pcov2 = curve_fit(quad,xdata[:400],ydata2[:400])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3)
popt4,pcov4 = curve_fit(expon,xdata,ydata4)

popt1,pcov1 = curve_fit(expon,xdata,ydata1)
popt2,pcov2 = curve_fit(expon,xdata,ydata2)
popt3,pcov3 = curve_fit(expon,xdata,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata,ydata4, maxfev=10000)

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,3)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(60,50,'The coefficients of curves are\n' + texttang)
plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,3)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
#plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(60,50,'The coefficients of curves are\n' + texttang)
plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[:1500],ydata1[:1500])
popt2,pcov2 = curve_fit(expon,xdata[:1100],ydata2[:1100])
popt3,pcov3 = curve_fit(expon,xdata[:800],ydata3[:800], maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:800],ydata4[:800], maxfev=10000)

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,3)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
#plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(60,50,'The coefficients of curves are\n' + texttang)
plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[:1500],ydata1[:1500], maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:1100],ydata2[:1100], maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:800],ydata3[:800], maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:800],ydata4[:800], maxfev=10000)

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,3)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
#plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(60,50,'The coefficients of curves are\n' + texttang)
plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[:1500],ydata1[:1500], maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:1100],ydata2[:1100], maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:500],ydata3[:800], maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:500],ydata4[:800], maxfev=10000)

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,3)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
#plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(60,50,'The coefficients of curves are\n' + texttang)
plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[:1500],ydata1[:1500], maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:1100],ydata2[:1100], maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:500],ydata3[:500], maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:500],ydata4[:500], maxfev=10000)

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,3)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
#plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(60,50,'The coefficients of curves are\n' + texttang)
plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[:1500],ydata1[:1500], maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:1100],ydata2[:1100], maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:500],ydata3[:500], maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:500],ydata4[:500], maxfev=10000)

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,3)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(60,50,'The coefficients of curves are\n' + texttang)
plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[500:1500],ydata1[500:1500], maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:1100],ydata2[:1100], maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:500],ydata3[:500], maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:500],ydata4[:500], maxfev=10000)

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,3)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(60,50,'The coefficients of curves are\n' + texttang)
plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[500:1000],ydata1[500:1000], maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:1100],ydata2[:1100], maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:500],ydata3[:500], maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:500],ydata4[:500], maxfev=10000)

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,3)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(60,50,'The coefficients of curves are\n' + texttang)
plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[200:1000],ydata1[200:1000], maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:1100],ydata2[:1100], maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:500],ydata3[:500], maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:500],ydata4[:500], maxfev=10000)

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,3)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(60,50,'The coefficients of curves are\n' + texttang)
plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1,maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata,ydata2,maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata,ydata3,maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata,ydata4,maxfev=10000)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[:500],ydata1[:500],maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:500],ydata2[:500],maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:500],ydata3[:500],maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:500],ydata4[:500],maxfev=10000)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[:800],ydata1[:800],maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:500],ydata2[:500],maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:500],ydata3[:500],maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:500],ydata4[:500],maxfev=10000)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1
popt2
double?
popt1,pcov1 = curve_fit(expon,xdata[:800],ydata1[:800],maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:500],ydata2[:500],maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:500],ydata3[:500],maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:500],ydata4[:500],maxfev=10000)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[300:800],ydata1[300:800],maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:500],ydata2[:500],maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:500],ydata3[:500],maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:500],ydata4[:500],maxfev=10000)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[300:800],ydata1[300:800],maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:500],ydata2[:500],maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:500],ydata3[:500],maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:500],ydata4[:500],maxfev=10000)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
#plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[500:1000],ydata1[500:1000],maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:500],ydata2[:500],maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:500],ydata3[:500],maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:500],ydata4[:500],maxfev=10000)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[100:1000],ydata1[100:1000],maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:500],ydata2[:500],maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:500],ydata3[:500],maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:500],ydata4[:500],maxfev=10000)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[10:1000],ydata1[10:1000],maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:500],ydata2[:500],maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:500],ydata3[:500],maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:500],ydata4[:500],maxfev=10000)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata[:1000],ydata1[:1000],maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:500],ydata2[:500],maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:500],ydata3[:500],maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:500],ydata4[:500],maxfev=10000)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

def r_squared(function, xdata, ydata, popt):
    """Computes R^2 statistical metric using 'popt' parameter from scipy.optimize.curve_fit() function.
    The formula it uses is:
        r_squared = 1 - (residual sum of squares/total sum of squares)"""
    residuals = ydata - function(xdata,popt)
    ss_res = np.sum(residuals**2)
    ss_tot = np.sum((ydata-np.mean(ydata))**2)
    return (1-(ss_res/ss_tot))

def r_sq(function, xdata, ydata, popt):
    """Computes R^2 statistical metric using 'popt' parameter from scipy.optimize.curve_fit() function.
    The formula it uses is:
        r_squared = 1 - (residual sum of squares/total sum of squares)"""
    residuals = ydata - function(xdata,popt)
    ss_res = np.sum(residuals**2)
    ss_tot = np.sum((ydata-np.mean(ydata))**2)
    return (1-(ss_res/ss_tot))

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])

xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])

xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])

xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

r_sq(lin,lin,xdata1[3:10],ydata1[3:10],popt1)
r_sq(lin,xdata1[3:10],ydata1[3:10],popt1)
def r_sq(function, xdata, ydata, popt):
    """Computes R^2 statistical metric using 'popt' parameter from scipy.optimize.curve_fit() function.
    The formula it uses is:
        r_squared = 1 - (residual sum of squares/total sum of squares)"""
    residuals = ydata - function(xdata, *popt)
    ss_res = np.sum(residuals**2)
    ss_tot = np.sum((ydata-np.mean(ydata))**2)
    return (1-(ss_res/ss_tot))

r_sq(lin,xdata1[3:10],ydata1[3:10],popt1)
r_sq(lin,xdata1,ydata1,popt1)
r_sq(lin,xdata2,ydata2,popt2)
clear
xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])

r_sq(lin,xdata2,ydata2,popt2)
r_sq(lin,xdata2[2:8],ydata2[2:8],popt2)
r_sq(lin,xdata3[1:5],ydata3[1:5],popt3)
r_sq(lin,xdata3,ydata3,popt3)
rsq = []
rsq.append(r_sq(lin,xdata1[3:10],ydata1[3:10],popt1))
rsq.append(r_sq(lin,xdata2[2:8],ydata2[2:8],popt2))
rsq.append(r_sq(lin,xdata3[1:5],ydata3[1:5],popt3))
rsq.append(r_sq(lin,xdata4[1:4],ydata4[1:4],popt4))

rsq
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
r_sq(lin,xdata3,ydata3,popt3)
clear
x1=[[],[]]
x2=[[],[]]
x3=[[],[]]
x4=[[],[]]

x1[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0].npy")
x2[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0].npy")
x3[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0].npy")
x4[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0].npy")

x1[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0] time.npy")
x2[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0] time.npy")
x3[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0] time.npy")
x4[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0] time.npy")

x1x = sep(x1[1])[0]
x2x = sep(x2[1])[0]
x3x = sep(x3[1])[0]
x4x = sep(x4[1])[0]

n=1000
t = np.linspace(0,600,600*20)
state0 = [1,0]*n
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)

plt.figure(figsize=(16,8))
for i in range(len(x2x)):
    plt.plot(t[0:x2[1].shape[0]], x2x[i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.legend()

clear
x1=[[],[]]
x2=[[],[]]
x3=[[],[]]
x4=[[],[]]

x1[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0].npy")
x2[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0].npy")
x3[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0].npy")
x4[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0].npy")

x1[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0] time.npy")
x2[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0] time.npy")
x3[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0] time.npy")
x4[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0] time.npy")

x1x = sep(x1[1])[0]
x2x = sep(x2[1])[0]
x3x = sep(x3[1])[0]
x4x = sep(x4[1])[0]

clear
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
clear
x1=[[],[]]
x2=[[],[]]
x3=[[],[]]
x4=[[],[]]

x1[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0].npy")
x2[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0].npy")
x3[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0].npy")
x4[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0].npy")

x1[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0] time.npy")
x2[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0] time.npy")
x3[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0] time.npy")
x4[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0] time.npy")

x1x = sep(x1[1])[0]
x2x = sep(x2[1])[0]
x3x = sep(x3[1])[0]
x4x = sep(x4[1])[0]

n=1000
t = np.linspace(0,600,600*20)
state0 = [1,0]*n
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)

plt.figure(figsize=(16,8))
for i in range(10):
    plt.plot(t[0:x2[1].shape[0]], x2x[i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.legend()

plt.figure(figsize=(16,8))
for i in range(5):
    plt.plot(t[0:x2[1].shape[0]], x2x[i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.legend()

plt.figure(figsize=(16,8))
for i in range(5):
    plt.plot(t[0:x2[1].shape[0]], x1x[i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.legend()

plt.plot(x1[1][:,0])
plt.plot(x1x[0])
plt.plot(x1x[:,0])
x1x = np.array(x1x)
plt.plot(x1x)
plt.figure(figsize=20,8))
plt.plot(x1x)
plt.xlim(-20,2000)
plt.figure(figsize=(20,8)))
plt.plot(x1x)
plt.xlim(-20,2000)
plt.figure(figsize=(20,8))
plt.plot(x1x)
plt.xlim(-20,2000)

plt.plot(x1x[1])
plt.plot(x1x[0])
plt.plot(x1x[:,0])
plt.plot(np.mean(x1x,axis=0))
plt.plot(np.mean(x1x,axis=1))
plt.plot(np.mean(x2x,axis=1))
plt.plot(np.mean(x3x,axis=1))
plt.plot(np.mean(x4x,axis=1))
x1x = np.array(x1x)
x2x = np.array(x2x)
x3x = np.array(x3x)
x4x = np.array(x4x)

x1[1].shape
x1[1].shape[0]
t
len(t)
plt.figure(figsize=(16,8))
for i in range(10):
    plt.plot(t[0:x2[1].shape[0]], x2x[:,i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.legend()

areeq?
areeq(x1[0],x2[0])
clear

## ---(Tue May 15 10:23:22 2018)---
n=1000
t = np.linspace(0,600,600*20)
state0 = [1,0]*n
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)


x1=[[],[]]
x2=[[],[]]
x3=[[],[]]
x4=[[],[]]

x1[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0].npy")
x2[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0].npy")
x3[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0].npy")
x4[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0].npy")

x1[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0] time.npy")
x2[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0] time.npy")
x3[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0] time.npy")
x4[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0] time.npy")

x1x = sep(x1[1])[0]
x2x = sep(x2[1])[0]
x3x = sep(x3[1])[0]
x4x = sep(x4[1])[0]



x1x = np.array(x1x)
x2x = np.array(x2x)
x3x = np.array(x3x)
x4x = np.array(x4x)

runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
n=1000
t = np.linspace(0,600,600*20)
state0 = [1,0]*n
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)


x1=[[],[]]
x2=[[],[]]
x3=[[],[]]
x4=[[],[]]

x1[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0].npy")
x2[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0].npy")
x3[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0].npy")
x4[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0].npy")

x1[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0] time.npy")
x2[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0] time.npy")
x3[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0] time.npy")
x4[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0] time.npy")

x1x = sep(x1[1])[0]
x2x = sep(x2[1])[0]
x3x = sep(x3[1])[0]
x4x = sep(x4[1])[0]



x1x = np.array(x1x)
x2x = np.array(x2x)
x3x = np.array(x3x)
x4x = np.array(x4x)

plt.figure(figsize=(16,8))
for i in range(10):
    plt.plot(x2[0], x2x[:,i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.legend()

len(x1[0])
len(x1[1])
len(x1[1][1])
len(x1[1][0])
len(x1x[:,0])
plt.plot(x3[0], x3[1][0], label='x3[1][0]')
plt.plot(x3x[:,0],label='x3x[:,0]')
plt.legend()

plt.plot(x3[0], x3[1][0], label='x3[1][0]')
plt.plot(x3x[:,0],label='x3x[:,0]')
plt.xlim(0,1000)
plt.legend()

plt.plot(x3[0], x3[1][0], label='x3[1][0]')
plt.plot(np.linspace(0,5400,5400),x3x[:,0],label='x3x[:,0]')
plt.xlim(0,1000)
plt.legend()

plt.plot(x3[0], x3[1][0], label='x3[1][0]')
plt.plot(np.linspace(0,5400,5400),x3x[:,0],label='x3x[:,0]')
plt.xlim(0,1000)
plt.legend()

np.linspace(0,5400,5400)
plt.plot(x3[0], x3[1][0], label='x3[1][0]')
plt.xlim(0,1000)
plt.legend()

plt.plot(x3[0], x3[1][0], label='x3[1][0]')
plt.xlim(0,550)
plt.legend()

plt.plot(np.mean(x1x,axis=1))
plt.plot(t,np.mean(x1x,axis=1))
plt.plot(np.mean(x1x,axis=1))
plt.plot(np.mean(x3x,axis=1))
plt.plot(np.mean(x3[1],axis=0))
plt.plot(np.mean(x3[1],axis=0))
plt.xlim(2000,2300)

plt.plot(np.mean(x3x,axis=1))
plt.xlim(100,115)

plt.plot(x3[0],np.mean(x3[1],axis=0))
plt.figure(figsize=(16,8))
for i in range(10):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.legend()

plt.figure(figsize=(16,8))
for i in range(10):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.xlim(-10,200)
plt.legend()

plt.figure(figsize=(16,8))
for i in range(10):
    plt.plot(x1[0], x1[1][i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.xlim(-10,200)
plt.legend()

plt.figure(figsize=(20,8))
for i in range(10):
    plt.plot(x1[0], x1[1][i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.xlim(-10,300)
plt.legend()

plt.figure(figsize=(16,8))
for i in range(10):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.xlim(-10,150)
plt.legend()

plt.figure(figsize=(16,8))
for i in range(10):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.xlim(-10,250)
plt.legend()

plt.figure(figsize=(21,8))
for i in range(10):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.xlim(-10,250)
plt.legend()

plt.figure(figsize=(22,8))
for i in range(10):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.xlim(-10,350)
plt.legend()

plt.figure(figsize=(22,8))
for i in range(10):
    plt.plot(x2[0], x2[1][i], label='x(t) of osc # ' + str(i))
plt.xlabel('time, hours')
plt.ylabel('X-coordinate of 10 oscillators with E=0.1')
plt.xlim(-10,350)
plt.legend()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

for i in range(10):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=16)
plt.legend()

plt.figure(figsize=(20,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

for i in range(10):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=16)
plt.xlim(-10,300)
plt.legend()

plt.figure(figsize=(20,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

for i in range(10):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=16)
plt.xlim(-10,300)
#plt.legend()

np.mean(x3[1],axis=0)
np.mean(x3[1],axis=1)
np.mean(x3[1],axis=1)[0]
np.mean(x3[1],axis=0)[0]
plt.figure(figsize=(16,8))

plt.plot(x1[0], np.mean(x1[1], axis=0), label='E=0.05')
plt.plot(x2[0], np.mean(x2[1], axis=0), label='E=0.1')
plt.plot(x3[0], np.mean(x3[1], axis=0), label='E=0.2')
plt.plot(x4[0], np.mean(x4[1], axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities')
plt.legend()

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.figure(figsize=(16,8))

plt.plot(x1[0], np.mean(x1[1], axis=0), label='E=0.05')
plt.plot(x2[0], np.mean(x2[1], axis=0), label='E=0.1')
plt.plot(x3[0], np.mean(x3[1], axis=0), label='E=0.2')
plt.plot(x4[0], np.mean(x4[1], axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Mean (x-coodrinate) of 1000 noisy oscillators with different noise intensities')
plt.legend()


plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.figure(figsize=(16,8))

plt.plot(x1[0], np.mean(x1[1], axis=0), label='E=0.05')
plt.plot(x2[0], np.mean(x2[1], axis=0), label='E=0.1')
plt.plot(x3[0], np.mean(x3[1], axis=0), label='E=0.2')
plt.plot(x4[0], np.mean(x4[1], axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Mean (x-coodrinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)
plt.legend()


plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.figure(figsize=(16,8))

plt.plot(x1[0], np.mean(x1[1], axis=0), label='E=0.05')
plt.plot(x2[0], np.mean(x2[1], axis=0), label='E=0.1')
plt.plot(x3[0], np.mean(x3[1], axis=0), label='E=0.2')
plt.plot(x4[0], np.mean(x4[1], axis=0), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Mean (x-coodrinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)
plt.xlim(-10,300)
plt.legend()

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.figure(figsize=(16,8))

plt.plot(x1[0], np.mean(x1[1], axis=0), 'k-', label='E=0.05')
plt.plot(x2[0], np.mean(x2[1], axis=0), 'b-', label='E=0.1')
plt.plot(x3[0], np.mean(x3[1], axis=0), 'm-', label='E=0.2')
plt.plot(x4[0], np.mean(x4[1], axis=0), 'r-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Mean (x-coodrinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(x1[0], np.mean(x1[1], axis=0), 'k-', label='E=0.05')
plt.plot(x2[0], np.mean(x2[1], axis=0), 'b-', label='E=0.1')
plt.plot(x3[0], np.mean(x3[1], axis=0), 'm-', label='E=0.2')
plt.plot(x4[0], np.mean(x4[1], axis=0), 'r-', label='E=0.5')

plt.plot(me4(np.mean(x1[1],axis=0))[0], me4(np.mean(x1[1],axis=0))[1], 'ko', label="maxima sigma 0.5")
plt.plot(me4(np.mean(x2[1],axis=0))[0], me4(np.mean(x2[1],axis=0))[1], 'bo', label="maxima sigma 1.0")
plt.plot(me4(np.mean(x3[1],axis=0))[0], me4(np.mean(x3[1],axis=0))[1], 'mo', label="maxima sigma 1.5")
plt.plot(me4(np.mean(x4[1],axis=0))[0], me4(np.mean(x4[1],axis=0))[1], 'ro', label="maxima sigma 2.0")

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Mean (x-coodrinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)
plt.legend()

def me4(x):
    return maxs3(extr(x))

plt.figure(figsize=(16,8))

plt.plot(x1[0], np.mean(x1[1], axis=0), 'k-', label='E=0.05')
plt.plot(x2[0], np.mean(x2[1], axis=0), 'b-', label='E=0.1')
plt.plot(x3[0], np.mean(x3[1], axis=0), 'm-', label='E=0.2')
plt.plot(x4[0], np.mean(x4[1], axis=0), 'r-', label='E=0.5')

plt.plot(me4(np.mean(x1[1],axis=0))[0], me4(np.mean(x1[1],axis=0))[1], 'ko', label="maxima sigma 0.5")
plt.plot(me4(np.mean(x2[1],axis=0))[0], me4(np.mean(x2[1],axis=0))[1], 'bo', label="maxima sigma 1.0")
plt.plot(me4(np.mean(x3[1],axis=0))[0], me4(np.mean(x3[1],axis=0))[1], 'mo', label="maxima sigma 1.5")
plt.plot(me4(np.mean(x4[1],axis=0))[0], me4(np.mean(x4[1],axis=0))[1], 'ro', label="maxima sigma 2.0")

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Mean (x-coodrinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me4(run_mean(np.mean(x4[1], axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me4(np.mean(x1[1], axis=0))
m2 = me4(np.mean(x2[1], axis=0))
m3 = me4(np.mean(x3[1], axis=0))
m4 = me4(np.mean(x4[1], axis=0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0))
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0))
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.ylim(-0.73,1.05)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0))
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.ylim(-0.70,1.05)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0))
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.ylim(-0.80,1.05)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me4(run_mean(np.mean(x4[1], axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me4(np.mean(x1[1], axis=0))
m2 = me4(np.mean(x2[1], axis=0))
m3 = me4(np.mean(x3[1], axis=0))
m4 = me4(np.mean(x4[1], axis=0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0))
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.ylim(-0.80,1.05)
plt.legend()
plt.grid()

plt.figure(figsize=(16,8))

m4good = me4(run_mean(np.mean(x4[1], axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me4(np.mean(x1[1], axis=0))
m2 = me4(np.mean(x2[1], axis=0))
m3 = me4(np.mean(x3[1], axis=0))
m4 = me4(np.mean(x4[1], axis=0))


plt.plot(m1[0], m1[1],'o-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'o-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'o-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'o-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.legend()
plt.grid()

plt.figure(figsize=(16,8))

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0))
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'ko-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'bo-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'mo-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'ro-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
plt.ylim(-0.80,1.05)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0))
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'ko-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'bo-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'mo-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'ro-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
#plt.ylim(-0.80,1.05)
plt.legend()

plt.figure(figsize=(16,8))

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened x4 data - E=0.5
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0))
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'ko-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'bo-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'mo-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'ro-', label='E=0.5 smoothened (30,2), maxima') # This one performs better than anything else

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
#plt.ylim(-0.80,1.05)
plt.legend(loc=1)

plt.figure(figsize=(16,8))

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'ko-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'bo-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'mo-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'ro-', label='E=0.5') 

plt.xlabel('time, hours')
plt.ylabel('Mean of 1000 oscillators with different noise intensities - maxima only')
#plt.xlim(0,150)
#plt.ylim(-0.80,1.05)
plt.legend(loc=1)

plt.figure(figsize=(16,8))

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'ko-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'bo-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'mo-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'ro-', label='E=0.5') 

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
#plt.xlim(0,150)
#plt.ylim(-0.80,1.05)

plt.title('Maxima of means (x-coordinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)
plt.legend(loc=1)

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'ko-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'bo-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'mo-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'ro-', label='E=0.5') 

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
#plt.xlim(0,150)
#plt.ylim(-0.80,1.05)

plt.title('Maxima of means (x-coordinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)
plt.legend(loc=1)

type(m1)
type(m1[0])
type(m1[0][0])
xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'r--', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'm--', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'b--', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'k--', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(1,1,'The slopes of curves are\n' + texttang)

plt.ylim(-1.5,1.5)
plt.xlim(10,160)
plt.legend()
plt.title('Maxima of means (x-coordinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(1,1,'The slopes of curves are\n' + texttang)

plt.ylim(-0.05,1.5)
plt.xlim(-10,160)
plt.legend()
plt.title('Maxima of means (x-coordinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(1,1.2,'The slopes of curves are\n' + texttang)

#plt.ylim(-0.05,1.5)
#plt.xlim(-10,160)
plt.legend()
plt.title('Maxima of means (x-coordinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[0:5],ydata2[0:5])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(1,1.1,'The slopes of curves are\n' + texttang)

plt.ylim(-0.05,1.3)
#plt.xlim(-10,160)
plt.legend()
plt.title('Maxima of means (x-coordinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:6],ydata2[1:6])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.05,1.2)
plt.xlim(-5,300)
plt.legend(loc=1)
plt.title('Maxima of means (x-coordinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)

rt
rt/rt[0]
plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:6],ydata2[1:6])
popt3,pcov3 = curve_fit(lin,xdata3[0:4],ydata3[0:4])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.05,1.2)
#plt.xlim(-5,300)
plt.legend(loc=1)
plt.title('Maxima of means (x-coordinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.05,1.2)
#plt.xlim(-5,300)
plt.legend(loc=1)
plt.title('Maxima of means (x-coordinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)

popt1,pcov1 = curve_fit(expon,xdata1,ydata1)
popt2,pcov2 = curve_fit(expon,xdata2,ydata2)
popt3,pcov3 = curve_fit(expon,xdata3,ydata3)
popt4,pcov4 = curve_fit(expon,xdata4,ydata4)

popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev = 10000)
popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev = 10000)
popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev = 10000)
popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev = 10000)

popt1
popt2
popt3
popt4
pcov1
pcov2
curve_fit?
np.mean?
type(ydata1)
type(ydata1[0])
type(ydata1[0][0])
plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev = 10000)
popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev = 10000)
popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev = 10000)
popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev = 10000)


plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')

plt.legend(loc=1)
plt.title('Maxima of means (x-coordinate) of 1000 noisy oscillators with different noise intensities, exponential fit', fontsize=16)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(expon,xdata1[0:4],ydata1[0:4], maxfev = 1000)
popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev = 1000)
popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev = 1000)
popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev = 1000)


plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')

plt.legend(loc=1)
plt.title('Maxima of means (x-coordinate) of 1000 noisy oscillators with different noise intensities, exponential fit', fontsize=16)

expon?
t000= np.linspace(0,400,400)
xdata000 = expon(t000,4.1,0.0007,-3)
plt.plot(t000,xdata000)
plt.plot(t000,expon(t000,4.4,0.0007,-3))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

plt.plot(xdata3, ydata3)
ydata3[10]
clear
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.figure(figsize=(16,8))

plt.plot(x1[0], np.mean(x1[1], axis=0), 'k-', label='E=0.05')
plt.plot(x2[0], np.mean(x2[1], axis=0), 'b-', label='E=0.1')
plt.plot(x3[0], np.mean(x3[1], axis=0), 'm-', label='E=0.2')
plt.plot(x4[0], np.mean(x4[1], axis=0), 'r-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Mean (x-coodrinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)
plt.legend()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'ko-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'bo-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'mo-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'ro-', label='E=0.5') 

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
#plt.xlim(0,150)
#plt.ylim(-0.80,1.05)

plt.title('Maxima of means (x-coordinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)
plt.legend(loc=1)

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'ko-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'bo-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'mo-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'ro-', label='E=0.5') 
plt.plot(xdata3, expon(xdata3, [1.04445, 0.0052881, -0.032042]), label='fit fot E=0.2')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
#plt.xlim(0,150)
#plt.ylim(-0.80,1.05)

plt.title('Maxima of means (x-coordinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)
plt.legend(loc=1)

popt3
popt300 = [1.04445, 0.0052881, -0.032042]
plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'ko-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'bo-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'mo-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'ro-', label='E=0.5') 
plt.plot(xdata3, expon(xdata3, *popt300), label='fit fot E=0.2')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
#plt.xlim(0,150)
#plt.ylim(-0.80,1.05)

plt.title('Maxima of means (x-coordinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)
plt.legend(loc=1)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

# This shit won't work as predicted
#popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev = 10000)
#popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev = 10000)
#popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev = 10000)
#popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev = 10000)

popt1 = [0.362215, 0.00099855, 0.637115] # R2 = 0.9982
popt2 = [1.27066, 0.000797632, -0.282885] # R2 = 0.9983
popt3 = [1.04445, 0.0052881, -0.032042] # R2 = 0.9984
popt4 = [1.00651, 0.0325793, 0.00844607] # R2 = 0.9837


plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')

plt.legend(loc=1)
plt.title('Maxima of means (x-coordinate) of 1000 noisy oscillators with different noise intensities, exponential fit', fontsize=16)

popt1,pcov1 = curve_fit(expon,xdata,ydata1,maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata,ydata2,maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata,ydata3,maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata,ydata4,maxfev=10000)

plt.figure(figsize=(12,8))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

clear
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.figure(figsize=(16,8))

plt.plot(x1[0], np.var(x1[1], axis=0), 'k-', label='E=0.05')
plt.plot(x2[0], np.var(x2[1], axis=0), 'b-', label='E=0.1')
plt.plot(x3[0], np.var(x3[1], axis=0), 'm-', label='E=0.2')
plt.plot(x4[0], np.var(x4[1], axis=0), 'r-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Variance (x-coodrinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)
plt.legend()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (x1[0][:10562], run_mean(np.var(x1x,axis=0),240), label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1x,axis=0),240,1), label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1x,axis=0),240,2), label = 'E=0.05')
plt.plot (x1[0][:10562], run_mean(np.var(x2x,axis=0),240), label = 'E=0.1')
plt.plot (x1[0][:10562], run_mean(np.var(x3x,axis=0),240), label = 'E=0.2')
plt.plot (x1[0][:10562], run_mean(np.var(x4x,axis=0),240), label = 'E=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of 1000 noisy oscillators with different noise intensities (smoothened)', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1), label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2), label = 'E=0.05')
plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), label = 'E=0.1')
plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), label = 'E=0.2')
plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), label = 'E=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of 1000 noisy oscillators with different noise intensities (smoothened)', fontsize=16)
plt.legend()
plt.show()

plt.plot(x1[0], np.var(x1[1], axis=0), 'k-', label='E=0.05')
plt.plot(x3[0], np.var(x3[1], axis=0), 'm-', label='E=0.2')
plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1), label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2), label = 'E=0.05')
plt.plot (x2[0][:10562], run_mean(np.var(x2[1],axis=0),240), label = 'E=0.1')
plt.plot (x3[0][:10562], run_mean(np.var(x3[1],axis=0),240), label = 'E=0.2')
plt.plot (x4[0][:10562], run_mean(np.var(x4[1],axis=0),240), label = 'E=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of 1000 noisy oscillators with different noise intensities (smoothened)', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1), label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2), label = 'E=0.05')
plt.plot (x2[0][:10562], run_mean(np.var(x2[1],axis=0),240), label = 'E=0.1')
plt.plot (x3[0][:10562], run_mean(np.var(x3[1],axis=0),240), label = 'E=0.2')
plt.plot (x4[0][:10562], run_mean(np.var(x4[1],axis=0),240), label = 'E=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of 1000 noisy oscillators with different noise intensities (smoothened)', fontsize=16)
plt.legend(loc=1)
plt.show()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), 'k-', label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1),'k-', label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2),'k-', label = 'E=0.05')
plt.plot (x2[0][:10562], run_mean(np.var(x2[1],axis=0),240), 'b-',label = 'E=0.1')
plt.plot (x3[0][:10562], run_mean(np.var(x3[1],axis=0),240),'m-', label = 'E=0.2')
plt.plot (x4[0][:10562], run_mean(np.var(x4[1],axis=0),240),'r-', label = 'E=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of 1000 noisy oscillators with different noise intensities (smoothened)', fontsize=16)
plt.legend(loc=1)
plt.show()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), 'k-', label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1),'k-', label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2),'k-', label = 'E=0.05')
plt.plot (x2[0][:10562], run_mean(np.var(x2[1],axis=0),240), 'b-',label = 'E=0.1')
plt.plot (x3[0][:10562], run_mean(np.var(x3[1],axis=0),240),'m-', label = 'E=0.2')
plt.plot (x4[0][:10562], run_mean(np.var(x4[1],axis=0),240),'r-', label = 'E=0.5')
plt.plot(x4[0][0:100],[x4[1][0:100]], 'r-')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of 1000 noisy oscillators with different noise intensities (smoothened)', fontsize=16)
plt.legend(loc=1)
plt.show()

plt.plot(x4[0][0:100],x4[1][0:100], 'r-')
runfile('/home/kalashnikov/Code/n_coupled_oscillators.py', wdir='/home/kalashnikov/Code')
n=1000
t = np.linspace(0,600,600*20)
state0 = [1,0]*n
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)


x1=[[],[]]
x2=[[],[]]
x3=[[],[]]
x4=[[],[]]

x1[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0].npy")
x2[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0].npy")
x3[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0].npy")
x4[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0].npy")

x1[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0] time.npy")
x2[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0] time.npy")
x3[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0] time.npy")
x4[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0] time.npy")

clear

def me4(x):
    return maxs3(extr(x))

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), 'k-', label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1),'k-', label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2),'k-', label = 'E=0.05')
plt.plot (x2[0][:10562], run_mean(np.var(x2[1],axis=0),240), 'b-',label = 'E=0.1')
plt.plot (x3[0][:10562], run_mean(np.var(x3[1],axis=0),240),'m-', label = 'E=0.2')
plt.plot (x4[0][:10562], run_mean(np.var(x4[1],axis=0),240),'r-', label = 'E=0.5')
plt.plot(x4[0][0:100],x4[1][0:100], 'r-')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of 1000 noisy oscillators with different noise intensities (smoothened)', fontsize=16)
plt.legend(loc=1)
plt.show()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), 'k-', label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1),'k-', label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2),'k-', label = 'E=0.05')
plt.plot (x2[0][:10562], run_mean(np.var(x2[1],axis=0),240), 'b-',label = 'E=0.1')
plt.plot (x3[0][:10562], run_mean(np.var(x3[1],axis=0),240),'m-', label = 'E=0.2')
plt.plot (x4[0][:10562], run_mean(np.var(x4[1],axis=0),240),'r-', label = 'E=0.5')
plt.plot(x4[0][0:100],np.var(x4[1][0:100], axis=0), 'r-')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of 1000 noisy oscillators with different noise intensities (smoothened)', fontsize=16)
plt.legend(loc=1)
plt.show()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), 'k-', label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1),'k-', label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2),'k-', label = 'E=0.05')
plt.plot (x2[0][:10562], run_mean(np.var(x2[1],axis=0),240), 'b-',label = 'E=0.1')
plt.plot (x3[0][:10562], run_mean(np.var(x3[1],axis=0),240),'m-', label = 'E=0.2')
plt.plot (x4[0][:10562], run_mean(np.var(x4[1],axis=0),240),'r-', label = 'E=0.5')
plt.plot(x4[0][0:100],np.var(x4[1][0:100]), axis=0), 'r-')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of 1000 noisy oscillators with different noise intensities (smoothened)', fontsize=16)
plt.legend(loc=1)
plt.show()
plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), 'k-', label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1),'k-', label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2),'k-', label = 'E=0.05')
plt.plot (x2[0][:10562], run_mean(np.var(x2[1],axis=0),240), 'b-',label = 'E=0.1')
plt.plot (x3[0][:10562], run_mean(np.var(x3[1],axis=0),240),'m-', label = 'E=0.2')
plt.plot (x4[0][:10562], run_mean(np.var(x4[1],axis=0),240),'r-', label = 'E=0.5')
plt.plot(x4[0][0:100],np.var(x4[1][0:100], axis=0), 'r-')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of 1000 noisy oscillators with different noise intensities (smoothened)', fontsize=16)
plt.legend(loc=1)
plt.show()

x4[0][0:100].shape?
x4[0][0:100].shape
plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), 'k-', label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1),'k-', label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2),'k-', label = 'E=0.05')
plt.plot (x2[0][:10562], run_mean(np.var(x2[1],axis=0),240), 'b-',label = 'E=0.1')
plt.plot (x3[0][:10562], run_mean(np.var(x3[1],axis=0),240),'m-', label = 'E=0.2')
plt.plot (x4[0][:10562], run_mean(np.var(x4[1],axis=0),240),'r-', label = 'E=0.5')
plt.plot(x4[0][0:100],np.var(x4[1])[0:100], axis=0), 'r-')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of 1000 noisy oscillators with different noise intensities (smoothened)', fontsize=16)
plt.legend(loc=1)
plt.show()
plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), 'k-', label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1),'k-', label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2),'k-', label = 'E=0.05')
plt.plot (x2[0][:10562], run_mean(np.var(x2[1],axis=0),240), 'b-',label = 'E=0.1')
plt.plot (x3[0][:10562], run_mean(np.var(x3[1],axis=0),240),'m-', label = 'E=0.2')
plt.plot (x4[0][:10562], run_mean(np.var(x4[1],axis=0),240),'r-', label = 'E=0.5')
plt.plot(x4[0][0:100],np.var(x4[1], axis=0)[0:100], 'r-')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of 1000 noisy oscillators with different noise intensities (smoothened)', fontsize=16)
plt.legend(loc=1)
plt.show()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), 'k-', label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1),'k-', label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2),'k-', label = 'E=0.05')
plt.plot (x2[0][:10562], run_mean(np.var(x2[1],axis=0),240), 'b-',label = 'E=0.1')
plt.plot (x3[0][:10562], run_mean(np.var(x3[1],axis=0),240),'m-', label = 'E=0.2')
plt.plot (x4[0][:10562], run_mean(np.var(x4[1],axis=0),240),'r-', label = 'E=0.5')
#plt.plot(x4[0][0:100],np.var(x4[1], axis=0)[0:100], 'r-')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of 1000 noisy oscillators with different noise intensities (smoothened)', fontsize=16)
plt.legend(loc=1)
plt.show()

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.figure(figsize=(16,8))

plt.plot(x1[0], np.var(x1[1], axis=0), 'k-', label='E=0.05')
plt.plot(x2[0], np.var(x2[1], axis=0), 'b-', label='E=0.1')
plt.plot(x3[0], np.var(x3[1], axis=0), 'm-', label='E=0.2')
plt.plot(x4[0], np.var(x4[1], axis=0), 'r-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Variance (x-coodrinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)
plt.legend()

len(x1[0])
len(run_mean(np.var(x1[1],axis=0),240))
xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(quad,xdata1[:7000],ydata1[:7000])
popt2,pcov2 = curve_fit(quad,xdata2[:5000],ydata2[:5000])
popt3,pcov3 = curve_fit(quad,xdata3[:3000],ydata3[:3000])
popt4,pcov4 = curve_fit(quad,xdata4[:1000],ydata4[:1000])


plt.figure(figsize=(16,8))

plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,quad(xdata1,*popt1),'k-', label = 'fit')

plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,quad(xdata2,*popt2),'b-', label = 'fit')

plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,quad(xdata3,*popt3),'m-', label = 'fit')

plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,quad(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
plt.xlim(-5,150)
plt.title('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function', fontsize=16)
plt.legend(loc=1)
plt.show()

plt.plot(xdata1,ydata1)
xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(quad,xdata1[:7000],ydata1[:7000])
popt2,pcov2 = curve_fit(quad,xdata2[:5000],ydata2[:5000])
popt3,pcov3 = curve_fit(quad,xdata3[:3000],ydata3[:3000])
popt4,pcov4 = curve_fit(quad,xdata4[:1000],ydata4[:1000])


plt.figure(figsize=(16,8))

plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,quad(xdata1,*popt1),'k-', label = 'fit')

plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,quad(xdata2,*popt2),'b-', label = 'fit')

plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,quad(xdata3,*popt3),'m-', label = 'fit')

plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,quad(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
#plt.xlim(-5,150)
plt.title('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function', fontsize=16)
plt.legend(loc=1)
plt.show()

[xdata1[i] for i in range(len(xdata1)) if i%=3]
xdata1[0]
xdata1[1]
6%=3
[xdata1[i] for i in range(len(xdata1)) if i%3==0]
xdata01 = [xdata1[i] for i in range(len(xdata1)) if i%10==0]
len(xdata01)
xdata01 = [xdata1[i] for i in range(len(xdata1)) if i%20==0]
xdata01 = [xdata1[i] for i in range(len(xdata1)) if i%30==0]
ydata01 = [ydata1[i] for i in range(len(ydata1)) if i%30==0]
clear
xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(quad,xdata1[:7000],ydata1[:7000])
popt2,pcov2 = curve_fit(quad,xdata2[:5000],ydata2[:5000])
popt3,pcov3 = curve_fit(quad,xdata3[:3000],ydata3[:3000])
popt4,pcov4 = curve_fit(quad,xdata4[:1000],ydata4[:1000])


plt.figure(figsize=(16,8))

plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,quad(xdata1,*popt1),'k-', label = 'fit')

plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,quad(xdata2,*popt2),'b-', label = 'fit')

plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,quad(xdata3,*popt3),'m-', label = 'fit')

plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,quad(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
plt.xlim(-5,150)
plt.title('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function', fontsize=16)
plt.legend(loc=1)
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(quad,xdata1[:7000],ydata1[:7000])
popt2,pcov2 = curve_fit(quad,xdata2[:5000],ydata2[:5000])
popt3,pcov3 = curve_fit(quad,xdata3[:3000],ydata3[:3000])
popt4,pcov4 = curve_fit(quad,xdata4[:1000],ydata4[:1000])


plt.figure(figsize=(16,8))

plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,quad(xdata1,*popt1),'k-', label = 'fit')

plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,quad(xdata2,*popt2),'b-', label = 'fit')

plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,quad(xdata3,*popt3),'m-', label = 'fit')

plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,quad(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
#plt.xlim(-5,150)
plt.title('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to quadratic function', fontsize=16)
plt.legend(loc=1)
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:7000],ydata1[:7000])
popt2,pcov2 = curve_fit(lin,xdata2[:5000],ydata2[:5000])
popt3,pcov3 = curve_fit(lin,xdata3[:3000],ydata3[:3000])
popt4,pcov4 = curve_fit(lin,xdata4[:1000],ydata4[:1000])


plt.figure(figsize=(16,8))

plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')

plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')

plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')

plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
#plt.xlim(-5,150)
plt.title('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to linear function', fontsize=16)
plt.legend(loc=1)
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:700],ydata4[:700])

plt.figure(figsize=(16,8))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
#plt.xlim(-5,150)
plt.title('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to linear function', fontsize=16)
plt.legend(loc=1)
plt.show()


xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.figure(figsize=(16,8))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
#plt.xlim(-5,150)
plt.title('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to linear function', fontsize=16)
plt.legend(loc=1)
plt.show()

popt1,pcov1 = curve_fit(expon,xdata1[:6000],ydata1[:6000])
popt1,pcov1 = curve_fit(expon,xdata1[:6000],ydata1[:6000], maxfev = 10000)
popt1,pcov1 = curve_fit(expon,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(expon,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(expon,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(expon,xdata4[:400],ydata4[:400])

plt.figure(figsize=(16,8))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,expon(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,expon(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,expon(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,expon(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
#plt.xlim(-5,150)
plt.title('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to exponential function', fontsize=16)
plt.legend(loc=1)
plt.show()

popt1
popt1,pcov1 = curve_fit(expon,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata2[:4000],ydata2[:4000], maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata3[:2000],ydata3[:2000], maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata4[:400],ydata4[:400], maxfev=10000)

plt.figure(figsize=(16,8))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,expon(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,expon(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,expon(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,expon(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
#plt.xlim(-5,150)
plt.title('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to exponential function', fontsize=16)
plt.legend(loc=1)
plt.show()

popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev=10000)


#popt1,pcov1 = curve_fit(expon,xdata1[:6000],ydata1[:6000], maxfev=10000)
#popt2,pcov2 = curve_fit(expon,xdata2[:4000],ydata2[:4000], maxfev=10000)
#popt3,pcov3 = curve_fit(expon,xdata3[:2000],ydata3[:2000], maxfev=10000)
#popt4,pcov4 = curve_fit(expon,xdata4[:400],ydata4[:400], maxfev=10000)

plt.figure(figsize=(16,8))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,expon(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,expon(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,expon(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,expon(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
#plt.xlim(-5,150)
plt.title('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to exponential function', fontsize=16)
plt.legend(loc=1)
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev=10000)

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,expon(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,expon(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,expon(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,expon(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
#plt.xlim(-5,150)
plt.title('Variance of x-coordinate of 1000 oscillators with running average (12h,1) fitted to exponential function', fontsize=16)
plt.legend(loc=1)
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev=10000)

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,expon(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,expon(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,expon(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,expon(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
#plt.xlim(-5,150)
plt.title('Variance of x-coordinate of 1000 oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend(loc=1)
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev=10000)

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,expon(xdata1,*popt1),'k-', label = 'E=0.05 fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,expon(xdata2,*popt2),'b-', label = 'E=0.1 fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,expon(xdata3,*popt3),'m-', label = 'E=0.2 fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,expon(xdata4,*popt4),'r-', label = 'E=0.5 fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.8)
#plt.xlim(-5,150)
plt.title('Variance of x-coordinate of 1000 oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend(loc=1)
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev=10000)

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,expon(xdata1,*popt1),'k-', label = 'E=0.05 fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,expon(xdata2,*popt2),'b-', label = 'E=0.1 fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,expon(xdata3,*popt3),'m-', label = 'E=0.2 fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,expon(xdata4,*popt4),'r-', label = 'E=0.5 fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.1,1.1)
#plt.xlim(-5,150)
plt.title('Variance of x-coordinate of 1000 oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend(loc=1)
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev=10000)

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,expon(xdata1,*popt1),'k-', label = 'E=0.05 fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,expon(xdata2,*popt2),'b-', label = 'E=0.1 fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,expon(xdata3,*popt3),'m-', label = 'E=0.2 fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,expon(xdata4,*popt4),'r-', label = 'E=0.5 fit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
plt.ylim(-0.1,0.9)
#plt.xlim(-5,150)
plt.title('Variance of x-coordinate of 1000 oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend(loc=1)
plt.show()

r_sq?
r_sq(expon,xdata1,ydata1,pop1)
r_sq(expon,xdata1,ydata1,popt1)
r_sq(expon,xdata2,ydata2,popt2)
r_sq(expon,[xdata2,xdata3],[ydata2,ydata3],[popt2,popt3])
r_sq([expon,expon],[xdata2,xdata3],[ydata2,ydata3],[popt2,popt3])
rsq=[]
rsq.append(r_sq(expon,xdata1,ydata1,popt1))
rsq.append(r_sq(expon,xdata2,ydata2,popt2))
rsq.append(r_sq(expon,xdata3,ydata3,popt3))
rsq.append(r_sq(expon,xdata4,ydata4,popt4))

rsq
plt.figure(figsize=(16,8))

plt.plot(t[0:x1[1].shape[0]], phvar(x1[1])[0], label='E=0.05')
plt.plot(t[0:x2[1].shape[0]], phvar(x2[1])[0], label='E=0.1')
plt.plot(t[0:x3[1].shape[0]], phvar(x3[1])[0], label='E=0.2')
plt.plot(t[0:x4[1].shape[0]], phvar(x4[1])[0], label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Variance of phase of 1000 oscillators with different noise intensities')
plt.legend()

a = phvar(x1[1])
n=3
params6 = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
x61 = ode_rand3(3,np.linspace(0,5,7),[1,0]*3,params6,0.05)

x61
n=10
t6 = np.linspace(0,60,60*20)
state06 = [1,0]*n
params6 = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
x63 = ode_rand3(n,t6,state06,params6,0.2)

x63
np.shape(x1)
np.shape(x61)
np.shape(x61[1])
np.shape(x1[1])
clear
np.shape(x1[1])
np.shape(x61[1])
np.shape(x63[1])
np.shape(x1[1])
x63x = sep(x63[1])[0]
np.shape(x63x)
n=1000
t6 = np.linspace(0,600,600*20)
state06 = [1,0]*n
params6 = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
x61 = ode_rand3(n,t6,state06,params6,0.05)
x62 = ode_rand3(n,t6,state06,params6,0.1)
x63 = ode_rand3(n,t6,state06,params6,0.2)
x64 = ode_rand3(n,t6,state06,params6,0.5)

clear
del x61,x63
del x63x
del t
del x1,x2,x3,x4
# This is the last time I start the model, I HOPE (at least until the day of handing the thesis)
n=1000
t6 = np.linspace(0,600,600*20)
state06 = [1,0]*n
params6 = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
x61 = ode_rand3(n,t6,state06,params6,0.05)
x62 = ode_rand3(n,t6,state06,params6,0.1)
x63 = ode_rand3(n,t6,state06,params6,0.2)
x64 = ode_rand3(n,t6,state06,params6,0.5)

np.save("/home/kalashnikov/Code/Variables for my code/2nd attempt/1000 oscillators with E 0.05 and state0 [1,0]",x61[1])
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.05 and state0 [1,0] v2",x61[1])
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.1 and state0 [1,0] v2",x62[1])
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.2 and state0 [1,0] v2",x63[1])
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.5 and state0 [1,0] v2",x64[1])
x1 = x61
x2 = x62
x3 = x63
x4 = x64
plt.figure(figsize=(16,8))

plt.plot(x1[0], phvar(x1[1])[0], label='E=0.05')
plt.plot(x2[0], phvar(x2[1])[0], label='E=0.1')
plt.plot(x3[0], phvar(x3[1])[0], label='E=0.2')
plt.plot(x4[0], phvar(x4[1])[0], label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Variance of phase of 1000 oscillators with different noise intensities')
plt.legend()

t = t6
plt.figure(figsize=(16,8))

plt.plot(x1[0], phvar(x1[1])[0], label='E=0.05')
plt.plot(x2[0], phvar(x2[1])[0], label='E=0.1')
plt.plot(x3[0], phvar(x3[1])[0], label='E=0.2')
plt.plot(x4[0], phvar(x4[1])[0], label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Variance of phase of 1000 oscillators with different noise intensities')
plt.legend()

ph?
plt.figure(figsize=(16,8))

plt.plot(x1[0][:10562], run_mean(ph1, 240), label='E=0.05')
plt.plot(x2[0][:10562], run_mean(ph2, 240), label='E=0.1')
plt.plot(x3[0][:10562], run_mean(ph3, 240), label='E=0.2')
plt.plot(x4[0][:10562], run_mean(ph4, 240), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 oscillators with different noise intensities', fontsize=16)
plt.legend()

ph1 = phvar(x1[1])[0]
ph2 = phvar(x2[1])[0]
ph3 = phvar(x3[1])[0]
ph4 = phvar(x4[1])[0]

plt.figure(figsize=(16,8))

plt.plot(x1[0][:10562], run_mean(ph1, 240), label='E=0.05')
plt.plot(x2[0][:10562], run_mean(ph2, 240), label='E=0.1')
plt.plot(x3[0][:10562], run_mean(ph3, 240), label='E=0.2')
plt.plot(x4[0][:10562], run_mean(ph4, 240), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 oscillators with different noise intensities', fontsize=16)
plt.legend()

plt.figure(figsize=(10,8))

plt.plot(x1[0][:10562], run_mean(ph1, 240), label='E=0.05')
plt.plot(x2[0][:10562], run_mean(ph2, 240), label='E=0.1')
plt.plot(x3[0][:10562], run_mean(ph3, 240), label='E=0.2')
plt.plot(x4[0][:10562], run_mean(ph4, 240), label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 oscillators with different noise intensities', fontsize=16)
plt.legend()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

len(xdata)
len(xdata1)
len(ydata1)
popt1,pcov1 = curve_fit(lin,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4,ydata4, maxfev=10000)

plt.figure(figsize=(16,8))


plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'E=0.5 fit')


plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 noisy oscillators fitted to line', fontsize=16)
plt.legend()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)


popt1,pcov1 = curve_fit(lin,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4,ydata4, maxfev=10000)

plt.figure(figsize=(16,8))


plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'E=0.5 fit')


plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 noisy oscillators fitted to line', fontsize=16)
plt.legend()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(lin,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4,ydata4, maxfev=10000)

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
popt1
lin?
xdata1?
lin(xdata1,*popt1)
lin(xdata1,popt1[0], popt1[1])
type(xdata1)
type(xdata1[0])
lin(np.array(xdata1),popt1[0], popt1[1])
xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(lin,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4,ydata4, maxfev=10000)

plt.figure(figsize=(16,8))


plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'E=0.5 fit')


plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 noisy oscillators fitted to line', fontsize=16)
plt.legend()

popt1,pcov1 = curve_fit(lin,xdata1[:3000],ydata1[:3000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4,ydata4, maxfev=10000)

plt.figure(figsize=(16,8))
plt.plot(xdata1[:3000],ydata1[:3000], 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 noisy oscillators fitted to line', fontsize=16)
plt.legend()

len(xdata1)
popt1,pcov1 = curve_fit(lin,xdata1[:3000],ydata1[:3000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4,ydata4, maxfev=10000)

plt.figure(figsize=(16,8))
plt.plot(xdata1[:3000],ydata1[:3000], 'k--', label = 'E=0.05')
#plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
#plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
#plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
#plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
#plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'E=0.2 fit')
#plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
#plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 noisy oscillators fitted to line', fontsize=16)
plt.legend()

popt1,pcov1 = curve_fit(lin,xdata1[:3000],ydata1[:3000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4,ydata4, maxfev=10000)

plt.figure(figsize=(16,8))
plt.plot(xdata1[:3000],ydata1[:3000], 'k--', label = 'E=0.05')
#plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
#plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
#plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
#plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'E=0.2 fit')
#plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
#plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 noisy oscillators fitted to line', fontsize=16)
plt.legend()

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2[:6000],ydata2[:6000], maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3[:6000],ydata3[:6000], maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4[:6000],ydata4[:6000], maxfev=10000)

plt.figure(figsize=(16,8))
plt.plot(xdata1[:3000],ydata1[:3000], 'k--', label = 'E=0.05')
#plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
#plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
#plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
#plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'E=0.2 fit')
#plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
#plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 noisy oscillators fitted to line', fontsize=16)
plt.legend()

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2[:6000],ydata2[:6000], maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3[:6000],ydata3[:6000], maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4[:6000],ydata4[:6000], maxfev=10000)

plt.figure(figsize=(16,8))
plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 noisy oscillators fitted to line', fontsize=16)
plt.legend()

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000], maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000], maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4[:1000],ydata4[:1000], maxfev=10000)

plt.figure(figsize=(16,8))
plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 noisy oscillators fitted to line', fontsize=16)
plt.legend()

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000], maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000], maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4[:1000],ydata4[:1000], maxfev=10000)

plt.figure(figsize=(16,8))
plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-10,350)
plt.ylim(-50,3000)
plt.title('Variance of phase of 1000 noisy oscillators fitted to line', fontsize=16)
plt.legend()

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000], maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000], maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4[:1000],ydata4[:1000], maxfev=10000)

plt.figure(figsize=(16,8))
plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-50,3000)
plt.title('Variance of phase of 1000 noisy oscillators fitted to line', fontsize=16)
plt.legend(loc=1)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2[:3000],ydata2[:3000], maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3[:1500],ydata3[:1500], maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4[:500],ydata4[:500], maxfev=10000)

plt.figure(figsize=(16,8))
plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to line', fontsize=16)
plt.legend(loc=1)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2[:3000],ydata2[:3000], maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3[:700],ydata3[:700], maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4[:300],ydata4[:300], maxfev=10000)

plt.figure(figsize=(16,8))
plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to line', fontsize=16)
plt.legend(loc=1)

popt1,pcov1 = curve_fit(quad,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2[:3000],ydata2[:3000], maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3[:700],ydata3[:700], maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4[:300],ydata4[:300], maxfev=10000)


plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, quad(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, quad(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, quad(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, quad(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to quadratic', fontsize=16)
plt.legend(loc=1)

popt1,pcov1 = curve_fit(quad,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2[:4000],ydata2[:4000], maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3[:1500],ydata3[:1500], maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4[:500],ydata4[:500], maxfev=10000)


plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, quad(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, quad(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, quad(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, quad(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to quadratic', fontsize=16)
plt.legend(loc=1)

popt1,pcov1 = curve_fit(quad,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2[:5000],ydata2[:5000], maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3[:2000],ydata3[:2000], maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4[:800],ydata4[:800], maxfev=10000)


plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, quad(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, quad(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, quad(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, quad(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to quadratic', fontsize=16)
plt.legend(loc=1)

popt1,pcov1 = curve_fit(quad,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2[:5000],ydata2[:5000], maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3[:2000],ydata3[:2000], maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4[:1100],ydata4[:1100], maxfev=10000)


plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, quad(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, quad(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, quad(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, quad(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to quadratic', fontsize=16)
plt.legend(loc=1)

popt1,pcov1 = curve_fit(quad,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2[:5000],ydata2[:5000], maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3[:2500],ydata3[:2500], maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4[:1100],ydata4[:1100], maxfev=10000)


plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, quad(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, quad(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, quad(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, quad(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to quadratic', fontsize=16)
plt.legend(loc=1)

popt1,pcov1 = curve_fit(quad,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2[:5000],ydata2[:5000], maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3[:2500],ydata3[:2500], maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4[:700],ydata4[:700], maxfev=10000)


plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, quad(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, quad(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, quad(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, quad(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to quadratic', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(expon, xdata1[:6000], ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:3000], ydata2[:3000], maxfev=10000)
popt3,pcov3 = curve_fit(expon, xdata3[:700], ydata3[:700], maxfev=10000)
popt4,pcov4 = curve_fit(expon, xdata4[:300], ydata4[:300], maxfev=10000)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(expon, xdata1, ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2, ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(expon, xdata3, ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(expon, xdata4, ydata4, maxfev=10000)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(expon, xdata1[:10000], ydata1[:10000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:6000], ydata2[:6000], maxfev=10000)
popt3,pcov3 = curve_fit(expon, xdata3[:4000], ydata3[:4000], maxfev=10000)
popt4,pcov4 = curve_fit(expon, xdata4[:2000], ydata4[:2000], maxfev=10000)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(expon, xdata1[:10000], ydata1[:10000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:6000], ydata2[:6000], maxfev=10000)
popt3,pcov3 = curve_fit(expon, xdata3[:4000], ydata3[:4000], maxfev=10000)
popt4,pcov4 = curve_fit(expon, xdata4[:2000], ydata4[:2000], maxfev=10000)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
#plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(expon, xdata1[:10000], ydata1[:10000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:6000], ydata2[:6000], maxfev=10000)
popt3,pcov3 = curve_fit(expon, xdata3[:4000], ydata3[:4000], maxfev=100000)
popt4,pcov4 = curve_fit(expon, xdata4[:2000], ydata4[:2000], maxfev=100000)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
#plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(expon, xdata1[:10000], ydata1[:10000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:6000], ydata2[:6000], maxfev=10000)
popt3,pcov3 = curve_fit(expon, xdata3[:1000], ydata3[:1000], maxfev=100000)
popt4,pcov4 = curve_fit(expon, xdata4[:1000], ydata4[:1000], maxfev=100000)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
#plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(expon, xdata1[:10000], ydata1[:10000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:6000], ydata2[:6000], maxfev=10000)
popt3,pcov3 = curve_fit(expon, xdata3[:1000], ydata3[:1000], maxfev=100000)
popt4,pcov4 = curve_fit(expon, xdata4[:1000], ydata4[:1000], maxfev=100000)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(expon, xdata1[:10000], ydata1[:10000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:6000], ydata2[:6000], maxfev=10000)
popt3,pcov3 = curve_fit(expon, xdata3[:1000], ydata3[:1000], maxfev=100000)
popt4,pcov4 = curve_fit(expon, xdata4[:1000], ydata4[:1000], maxfev=100000)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

#plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
#plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
#plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
#plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
#plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
#plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
#plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(expon, xdata1[:10000], ydata1[:10000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:6000], ydata2[:6000], maxfev=10000)
popt3,pcov3 = curve_fit(expon, xdata3[:1000], ydata3[:1000], maxfev=100000)
popt4,pcov4 = curve_fit(expon, xdata4[:1000], ydata4[:1000], maxfev=100000)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

#plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
#plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
#plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
#plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
#plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
#plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
#plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
#plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(expon, xdata1[:10000], ydata1[:10000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:6000], ydata2[:6000], maxfev=10000)
popt3,pcov3 = curve_fit(expon, xdata3[:1000], ydata3[:1000], maxfev=100000)
popt4,pcov4 = curve_fit(expon, xdata4[:1000], ydata4[:1000], maxfev=100000)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

#plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
#plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
#plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
#plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
#plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
#plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
#plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
plt.ylim(-100,100800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(expon, xdata1[:10000], ydata1[:10000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:6000], ydata2[:6000], maxfev=10000)
popt3,pcov3 = curve_fit(expon, xdata3[:1000], ydata3[:1000], maxfev=100000)
popt4,pcov4 = curve_fit(expon, xdata4[:1000], ydata4[:1000],p0=(1, 1e-6, 1), maxfev=100000)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

#plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
#plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
#plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
#plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
#plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
#plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
#plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
plt.ylim(-100,100800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

ydata4Desmos = [ydata4[i] for i in range(len(ydata4)) if i%100==0]
len(ydata4)
len(ydata4Desmos)
ydata4Desmos = [ydata4[i] for i in range(2000) if i%50==0]
len(ydata4Desmos)
xdata4Desmos = [xdata4[i] for i in range(2000) if i%50==0]
xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 120)
ydata2 = run_mean(ph2, 120)
ydata3 = run_mean(ph3, 120)
ydata4 = run_mean(ph4, 120)

popt1,pcov1 = curve_fit(expon, xdata1[:6000], ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:3000], ydata2[:3000], maxfev=10000)
popt3,pcov3 = curve_fit(expon, xdata3[:700], ydata3[:700], maxfev=10000)
popt4,pcov4 = curve_fit(expon, xdata4[:300], ydata4[:300], maxfev=10000)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10682])
xdata2 = np.array(x2[0][:10682])
xdata3 = np.array(x3[0][:10682])
xdata4 = np.array(x4[0][:10682])

ydata1 = run_mean(ph1, 120)
ydata2 = run_mean(ph2, 120)
ydata3 = run_mean(ph3, 120)
ydata4 = run_mean(ph4, 120)

popt1,pcov1 = curve_fit(expon, xdata1[:6000], ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:3000], ydata2[:3000], maxfev=10000)
popt3,pcov3 = curve_fit(expon, xdata3[:700], ydata3[:700], maxfev=10000)
popt4,pcov4 = curve_fit(expon, xdata4[:300], ydata4[:300], maxfev=10000)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata3Desmos = [xdata3[i] for i in range(4000) if i%50==0]
ydata3Desmos = [ydata3[i] for i in range(4000) if i%50==0]
xdata3Desmos = [xdata3[i] for i in range(4000) if i%70==0]
ydata3Desmos = [ydata3[i] for i in range(4000) if i%70==0]
len(ydata3Desmos)
xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

xdata3Desmos = [xdata3[i] for i in range(4000) if i%70==0]
ydata3Desmos = [ydata3[i] for i in range(4000) if i%70==0]
popt1,pcov1 = curve_fit(expon, xdata1[:6000], ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:3000], ydata2[:3000], maxfev=10000)
popt3,pcov3 = curve_fit(expon, xdata3[:700], ydata3[:700], maxfev=10000)
popt4,pcov4 = curve_fit(expon, xdata4[:300], ydata4[:300], maxfev=10000)

# Coefficients and R2 are from Desmos.com
# Using ydata4Desmos = [ydata4[i] for i in range(2000) if i%50==0]
# xdata4Desmos = [xdata4[i] for i in range(2000) if i%50==0]

popt3 = []
popt4 = [-1828.32, 0.0711882, 2660.94]

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

popt1,pcov1 = curve_fit(expon, xdata1[:6000], ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:3000], ydata2[:3000], maxfev=10000)
popt3,pcov3 = curve_fit(expon, xdata3[:700], ydata3[:700], maxfev=10000)
popt4,pcov4 = curve_fit(expon, xdata4[:300], ydata4[:300], maxfev=10000)

# Coefficients and R2 are from Desmos.com
# Using ydata4Desmos = [ydata4[i] for i in range(2000) if i%50==0]
# xdata4Desmos = [xdata4[i] for i in range(2000) if i%50==0]

#popt3 = []
popt4 = [-1828.32, 0.0711882, 2660.94]

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

ydata3Desmos = [ydata3[i] for i in range(4000) if i%70==0]
xdata3Desmos = [xdata3[i] for i in range(4000) if i%70==0]
len(ydata3Desmos)
ydata3Desmos = [ydata3[i] for i in range(8000) if i%90==0]
len(ydata3Desmos)
xdata3Desmos = [xdata3[i] for i in range(8000) if i%90==0]
ydata3Desmos = [ydata3[i] for i in range(8000) if i%120==0]
xdata3Desmos = [xdata3[i] for i in range(8000) if i%120==0]
len(ydata3Desmos)
ydata3Desmos = [ydata3[i] for i in range(8000) if i%170==0]
len(ydata3Desmos)
xdata3Desmos = [xdata3[i] for i in range(8000) if i%170==0]
xdata4Desmos = [xdata4[i] for i in range(5000) if i%120==0]
len(xdata4Desmos)
ydata4Desmos = [ydata4[i] for i in range(5000) if i%120==0]
xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(expon, xdata1[:6000], ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:3000], ydata2[:3000], maxfev=10000)
#popt3,pcov3 = curve_fit(expon, xdata3[:700], ydata3[:700], maxfev=10000)
#popt4,pcov4 = curve_fit(expon, xdata4[:300], ydata4[:300], maxfev=10000)
popt3 = [-2592.47, 0.0109569, 2708.4] R^2=0.9993
popt4 = [-1828.32, 0.0711882, 2660.94] R^2=0.9978

# Coefficients and R2 are from Desmos.com
# Using ydata4Desmos = [ydata4[i] for i in range(2000) if i%50==0]
# xdata4Desmos = [xdata4[i] for i in range(2000) if i%50==0]
# ydata3Desmos = [ydata3[i] for i in range(8000) if i%170==0]
# xdata3Desmos = [xdata3[i] for i in range(8000) if i%170==0]


plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)
xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(expon, xdata1[:6000], ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(expon, xdata2[:3000], ydata2[:3000], maxfev=10000)
#popt3,pcov3 = curve_fit(expon, xdata3[:700], ydata3[:700], maxfev=10000)
#popt4,pcov4 = curve_fit(expon, xdata4[:300], ydata4[:300], maxfev=10000)
popt3 = [-2592.47, 0.0109569, 2708.4]   #R^2=0.9993
popt4 = [-1828.32, 0.0711882, 2660.94]  #R^2=0.9978

# Coefficients and R2 are from Desmos.com
# Using ydata4Desmos = [ydata4[i] for i in range(2000) if i%50==0]
# xdata4Desmos = [xdata4[i] for i in range(2000) if i%50==0]
# ydata3Desmos = [ydata3[i] for i in range(8000) if i%170==0]
# xdata3Desmos = [xdata3[i] for i in range(8000) if i%170==0]


plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1Desmos = [xdata1[i] for i in range(9000) if i%190==0]
len(xdata1Desmos)
ydata1Desmos = [ydata1[i] for i in range(9000) if i%190==0]
ydata2Desmos = [ydata2[i] for i in range(9000) if i%190==0]
xdata2Desmos = [xdata2[i] for i in range(9000) if i%190==0]
xdata1Desmos = [xdata1[i] for i in range(10500) if i%220==0]
ydata1Desmos = [ydata1[i] for i in range(10500) if i%220==0]
xdata2Desmos = [xdata2[i] for i in range(9000) if i%190==0]
ydata2Desmos = [ydata2[i] for i in range(9000) if i%190==0]
plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

ydata2Desmos = [ydata2[i] for i in range(10560) if i%210==0]
xdata2Desmos = [xdata2[i] for i in range(10560) if i%210==0]
xdata2Desmos = [xdata2[i] for i in range(10560) if i%220==0]
ydata2Desmos = [ydata2[i] for i in range(10560) if i%220==0]
xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

#popt1,pcov1 = curve_fit(expon, xdata1[:6000], ydata1[:6000], maxfev=10000)
#popt2,pcov2 = curve_fit(expon, xdata2[:3000], ydata2[:3000], maxfev=10000)
#popt3,pcov3 = curve_fit(expon, xdata3[:700], ydata3[:700], maxfev=10000)
#popt4,pcov4 = curve_fit(expon, xdata4[:300], ydata4[:300], maxfev=10000)

popt1 = [-4838.26, 0.000317081, 4856.2] #R^2 = 0.9994
popt2 = [-2840, 0.0022, 2900] #R2 = 0.9984

popt3 = [-2592.47, 0.0109569, 2708.4]   #R^2 = 0.9993
popt4 = [-1828.32, 0.0711882, 2660.94]  #R^2 = 0.9978

# Coefficients and R2 are from Desmos.com
# Using ydata4Desmos = [ydata4[i] for i in range(2000) if i%50==0]
# xdata4Desmos = [xdata4[i] for i in range(2000) if i%50==0]
# ydata3Desmos = [ydata3[i] for i in range(8000) if i%170==0]
# xdata3Desmos = [xdata3[i] for i in range(8000) if i%170==0]
# ydata1Desmos = [ydata1[i] for i in range(9000) if i%190==0]
# xdata1Desmos = [xdata1[i] for i in range(9000) if i%190==0]


plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

#popt1,pcov1 = curve_fit(expon, xdata1[:6000], ydata1[:6000], maxfev=10000)
#popt2,pcov2 = curve_fit(expon, xdata2[:3000], ydata2[:3000], maxfev=10000)
#popt3,pcov3 = curve_fit(expon, xdata3[:700], ydata3[:700], maxfev=10000)
#popt4,pcov4 = curve_fit(expon, xdata4[:300], ydata4[:300], maxfev=10000)

popt1 = [-4838.26, 0.000317081, 4856.2] #R^2 = 0.9994
popt2 = [-2840, 0.0022, 2900] #R2 = 0.9984

popt3 = [-2592.47, 0.0109569, 2708.4]   #R^2 = 0.9993
popt4 = [-1828.32, 0.0711882, 2660.94]  #R^2 = 0.9978

# Coefficients and R2 are from Desmos.com
# Using ydata4Desmos = [ydata4[i] for i in range(2000) if i%50==0]
# xdata4Desmos = [xdata4[i] for i in range(2000) if i%50==0]
# ydata3Desmos = [ydata3[i] for i in range(8000) if i%170==0]
# xdata3Desmos = [xdata3[i] for i in range(8000) if i%170==0]
# ydata1Desmos = [ydata1[i] for i in range(9000) if i%190==0]
# xdata1Desmos = [xdata1[i] for i in range(9000) if i%190==0]


plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)


popt1 = [-4838.26, 0.000317081, 4856.2] #R^2 = 0.9994
popt2 = [-2840, 0.0022, 2900] #R2 = 0.9984
popt3 = [-2592.47, 0.0109569, 2708.4]   #R^2 = 0.9993
popt4 = [-1828.32, 0.0711882, 2660.94]  #R^2 = 0.9978

plt.figure(figsize=(12,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)


popt1 = [-4838.26, 0.000317081, 4856.2] #R^2 = 0.9994
popt2 = [-2840, 0.0022, 2900] #R2 = 0.9984
popt3 = [-2592.47, 0.0109569, 2708.4]   #R^2 = 0.9993
popt4 = [-1828.32, 0.0711882, 2660.94]  #R^2 = 0.9978

plt.figure(figsize=(12,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=14)     # fontsize of the axes title
plt.rc('axes', labelsize=16)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=14)    # fontsize of the tick labels
plt.rc('ytick', labelsize=14)    # fontsize of the tick labels
plt.rc('legend', fontsize=11)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=17)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)


popt1 = [-4838.26, 0.000317081, 4856.2] #R^2 = 0.9994
popt2 = [-2840, 0.0022, 2900] #R2 = 0.9984
popt3 = [-2592.47, 0.0109569, 2708.4]   #R^2 = 0.9993
popt4 = [-1828.32, 0.0711882, 2660.94]  #R^2 = 0.9978

plt.figure(figsize=(12,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=14)     # fontsize of the axes title
plt.rc('axes', labelsize=16)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=14)    # fontsize of the tick labels
plt.rc('ytick', labelsize=14)    # fontsize of the tick labels
plt.rc('legend', fontsize=11)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=17)
plt.legend(loc=3)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)


popt1 = [-4838.26, 0.000317081, 4856.2] #R^2 = 0.9994
popt2 = [-2840, 0.0022, 2900] #R2 = 0.9984
popt3 = [-2592.47, 0.0109569, 2708.4]   #R^2 = 0.9993
popt4 = [-1828.32, 0.0711882, 2660.94]  #R^2 = 0.9978

plt.figure(figsize=(12,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=14)     # fontsize of the axes title
plt.rc('axes', labelsize=16)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=14)    # fontsize of the tick labels
plt.rc('ytick', labelsize=14)    # fontsize of the tick labels
plt.rc('legend', fontsize=11)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=17)
plt.legend(loc=2)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)


popt1 = [-4838.26, 0.000317081, 4856.2] #R^2 = 0.9994
popt2 = [-2840, 0.0022, 2900] #R2 = 0.9984
popt3 = [-2592.47, 0.0109569, 2708.4]   #R^2 = 0.9993
popt4 = [-1828.32, 0.0711882, 2660.94]  #R^2 = 0.9978

plt.figure(figsize=(12,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=14)     # fontsize of the axes title
plt.rc('axes', labelsize=16)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=14)    # fontsize of the tick labels
plt.rc('ytick', labelsize=14)    # fontsize of the tick labels
plt.rc('legend', fontsize=11)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=17)
plt.legend(loc=4)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)


popt1 = [-4838.26, 0.000317081, 4856.2] #R^2 = 0.9994
popt2 = [-2840, 0.0022, 2900] #R2 = 0.9984
popt3 = [-2592.47, 0.0109569, 2708.4]   #R^2 = 0.9993
popt4 = [-1828.32, 0.0711882, 2660.94]  #R^2 = 0.9978

plt.figure(figsize=(12,10))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=14)     # fontsize of the axes title
plt.rc('axes', labelsize=16)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=14)    # fontsize of the tick labels
plt.rc('ytick', labelsize=14)    # fontsize of the tick labels
plt.rc('legend', fontsize=11)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=17)
plt.legend(loc=4)

plt.figure(figsize=(16,8))

plt.plot(x1[0][:10562], run_mean(ph1, 240), 'k-', label='E=0.05')
plt.plot(x2[0][:10562], run_mean(ph2, 240), 'b-', label='E=0.1')
plt.plot(x3[0][:10562], run_mean(ph3, 240), 'm-', label='E=0.2')
plt.plot(x4[0][:10562], run_mean(ph4, 240), 'r-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 oscillators with different noise intensities', fontsize=16)
plt.legend()

plt.figure(figsize=(12,8))

plt.plot(x1[0][:10562], run_mean(ph1, 240), 'k-', label='E=0.05')
plt.plot(x2[0][:10562], run_mean(ph2, 240), 'b-', label='E=0.1')
plt.plot(x3[0][:10562], run_mean(ph3, 240), 'm-', label='E=0.2')
plt.plot(x4[0][:10562], run_mean(ph4, 240), 'r-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 oscillators with different noise intensities', fontsize=16)
plt.legend()

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

#popt1,pcov1 = curve_fit(expon, xdata1[:6000], ydata1[:6000], maxfev=10000)
#popt2,pcov2 = curve_fit(expon, xdata2[:3000], ydata2[:3000], maxfev=10000)
#popt3,pcov3 = curve_fit(expon, xdata3[:700], ydata3[:700], maxfev=10000)
#popt4,pcov4 = curve_fit(expon, xdata4[:300], ydata4[:300], maxfev=10000)

popt1 = [-4838.26, 0.000317081, 4856.2] #R^2 = 0.9994
popt2 = [-2840, 0.0022, 2900] #R2 = 0.9984 # This one I fitted almost manually

popt3 = [-2592.47, 0.0109569, 2708.4]   #R^2 = 0.9993
popt4 = [-1828.32, 0.0711882, 2660.94]  #R^2 = 0.9978

# Coefficients and R2 are from Desmos.com
# Using ydata4Desmos = [ydata4[i] for i in range(2000) if i%50==0]
# xdata4Desmos = [xdata4[i] for i in range(2000) if i%50==0]
# ydata3Desmos = [ydata3[i] for i in range(8000) if i%170==0]
# xdata3Desmos = [xdata3[i] for i in range(8000) if i%170==0]
# ydata1Desmos = [ydata1[i] for i in range(9000) if i%190==0]
# xdata1Desmos = [xdata1[i] for i in range(9000) if i%190==0]


plt.figure(figsize=(16,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

#popt1,pcov1 = curve_fit(expon, xdata1[:6000], ydata1[:6000], maxfev=10000)
#popt2,pcov2 = curve_fit(expon, xdata2[:3000], ydata2[:3000], maxfev=10000)
#popt3,pcov3 = curve_fit(expon, xdata3[:700], ydata3[:700], maxfev=10000)
#popt4,pcov4 = curve_fit(expon, xdata4[:300], ydata4[:300], maxfev=10000)

popt1 = [-4838.26, 0.000317081, 4856.2] #R^2 = 0.9994
popt2 = [-2840, 0.0022, 2900] #R2 = 0.9984 # This one I fitted almost manually

popt3 = [-2592.47, 0.0109569, 2708.4]   #R^2 = 0.9993
popt4 = [-1828.32, 0.0711882, 2660.94]  #R^2 = 0.9978

# Coefficients and R2 are from Desmos.com
# Using ydata4Desmos = [ydata4[i] for i in range(2000) if i%50==0]
# xdata4Desmos = [xdata4[i] for i in range(2000) if i%50==0]
# ydata3Desmos = [ydata3[i] for i in range(8000) if i%170==0]
# xdata3Desmos = [xdata3[i] for i in range(8000) if i%170==0]
# ydata1Desmos = [ydata1[i] for i in range(9000) if i%190==0]
# xdata1Desmos = [xdata1[i] for i in range(9000) if i%190==0]


plt.figure(figsize=(12,8))
plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
#plt.xlim(-20,350)
plt.ylim(-100,2800)
plt.title('Variance of phase of 1000 noisy oscillators fitted to exponential', fontsize=16)
plt.legend(loc=1)

a = areeq(x61[0],x62[0])
np.save("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.05-0.1-0.2-0.5 and state0 [1,0] v2 time",x61[0])
e = np.load("/home/kalashnikov/Code/Variables for my code/1000 oscillators with E 0.05-0.1-0.2-0.5 and state0 [1,0] v2 time.npy")
e
areeq(e,x64[0])
clear
n = 1000
t = np.linspace(0, 400, 4000)
state0 = [1,0]*n
# Example of the execution:
# x51 = odeint(oscillator_system, state05, t5, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n, [0.0]*n)))


x1 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/Other state0/1000 oscillators with sigma 0.5 and state0 [1,0].npy")
x2 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/Other state0/1000 oscillators with sigma 1 and state0 [1,0].npy")
x3 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/Other state0/1000 oscillators with sigma 1.5 and state0 [1,0].npy")
x4 = np.load("/home/kalashnikov/Code/Variables for my code/Heterogeneity/Other state0/1000 oscillators with sigma 2 and state0 [1,0].npy")

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]


def me4(x):
    return maxs3(extr(x))

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

# R-squared metric
rsq = []
rsq.append(r_sq(lin,xdata1[3:10],ydata1[3:10],popt1))
rsq.append(r_sq(lin,xdata2[2:8],ydata2[2:8],popt2))
rsq.append(r_sq(lin,xdata3[1:5],ydata3[1:5],popt3))
rsq.append(r_sq(lin,xdata4[1:4],ydata4[1:4],popt4))


plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,1.0,'Normalized\n' + texttang2)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=16)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(expon,xdata1[3:10],ydata1[3:10], maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata2[2:8],ydata2[2:8], maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata3[1:5],ydata3[1:5], maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata4[1:4],ydata4[1:4], maxfev=10000)
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

# R-squared metric
rsq = []
rsq.append(r_sq(lin,xdata1[3:10],ydata1[3:10],popt1))
rsq.append(r_sq(lin,xdata2[2:8],ydata2[2:8],popt2))
rsq.append(r_sq(lin,xdata3[1:5],ydata3[1:5],popt3))
rsq.append(r_sq(lin,xdata4[1:4],ydata4[1:4],popt4))


plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,1.0,'Normalized\n' + texttang2)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=16)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(expon,xdata1[3:10],ydata1[3:10], maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata2[2:8],ydata2[2:8], maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata3[1:5],ydata3[1:5], maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata4[1:4],ydata4[1:4], maxfev=10000)
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

# R-squared metric
#rsq = []
#rsq.append(r_sq(lin,xdata1[3:10],ydata1[3:10],popt1))
#rsq.append(r_sq(lin,xdata2[2:8],ydata2[2:8],popt2))
#rsq.append(r_sq(lin,xdata3[1:5],ydata3[1:5],popt3))
#rsq.append(r_sq(lin,xdata4[1:4],ydata4[1:4],popt4))


plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,1.0,'Normalized\n' + texttang2)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=16)
plt.legend()

xdata1
ydata1
xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

#popt1,pcov1 = curve_fit(expon,xdata1[3:10],ydata1[3:10], maxfev=10000)
#popt2,pcov2 = curve_fit(expon,xdata2[2:8],ydata2[2:8], maxfev=10000)
#popt3,pcov3 = curve_fit(expon,xdata3[1:5],ydata3[1:5], maxfev=10000)
#popt4,pcov4 = curve_fit(expon,xdata4[1:4],ydata4[1:4], maxfev=10000)

popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the exponential', fontsize=16)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

#popt1,pcov1 = curve_fit(expon,xdata1[3:10],ydata1[3:10], maxfev=10000)
#popt2,pcov2 = curve_fit(expon,xdata2[2:8],ydata2[2:8], maxfev=10000)
#popt3,pcov3 = curve_fit(expon,xdata3[1:5],ydata3[1:5], maxfev=10000)
#popt4,pcov4 = curve_fit(expon,xdata4[1:4],ydata4[1:4], maxfev=10000)

popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')

#plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the exponential', fontsize=16)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(quad,xdata1[3:10],ydata1[3:10], maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2[2:8],ydata2[2:8], maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3[1:5],ydata3[1:5], maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4[1:4],ydata4[1:4], maxfev=10000)

#popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
#popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
#popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
#popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, quad(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, quad(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, quad(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, quad(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')

#plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the quadratic', fontsize=16)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(quad,xdata1[3:10],ydata1[3:10], maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2[2:8],ydata2[2:8], maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3[1:5],ydata3[1:5], maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4[1:4],ydata4[1:4], maxfev=10000)

#popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
#popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
#popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
#popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, quad(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, quad(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, quad(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, quad(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')

#plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the quadratic', fontsize=16)
plt.legend(loc=1)

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(quad,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4,ydata4, maxfev=10000)

#popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
#popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
#popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
#popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(11,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, quad(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, quad(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, quad(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, quad(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')

#plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the quadratic', fontsize=16)
plt.legend(loc=1)

popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev=10000)

#popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
#popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
#popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
#popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(11,8))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the exponential', fontsize=16)
plt.legend()

plt.figure(figsize=(12,8))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), 'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), 'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), 'm-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), 'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (smoothened)', fontsize=16)
plt.xlim(-10,250)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(12,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,quad(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to quadratic', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(expon,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(expon,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(expon,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(expon,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(12,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to exponentia;', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(expon,xdata[:1000],ydata1[:1000], maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[:500],ydata2[:500], maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[:300],ydata3[:300], maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:200],ydata4[:200], maxfev=10000)

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(12,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to exponentia;', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(expon,xdata[200:],ydata1[200:], maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[200:],ydata2[200:], maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[200:],ydata3[200:], maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[:200],ydata4[200:], maxfev=10000)

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(12,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to exponentia;', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(expon,xdata[200:],ydata1[200:], maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[200:],ydata2[200:], maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[200:],ydata3[200:], maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[200:],ydata4[200:], maxfev=10000)

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(12,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to exponentia;', fontsize=16)
plt.legend()
plt.show()

xdata0Desmos = [xdata[i] for i in range(3762) if i%100==0]
ydata1Desmos = [ydata1[i] for i in range(3762) if i%100==0]
xdata0Desmos = [xdata[i] for i in range(3762) if i%100==0]
ydata1Desmos = [ydata1[i] for i in range(3762) if i%100==0]
ydata2Desmos = [ydata2[i] for i in range(3762) if i%100==0]
ydata3Desmos = [ydata3[i] for i in range(3762) if i%100==0]
ydata4Desmos = [ydata4[i] for i in range(3762) if i%100==0]

popt1 = [-0.768452, 0.00391461, 0.714247] #R^2=0.9828
popt2 = [-0.576554, 0.0135749, 0.520838] #R^2=0.9773
popt3 = [-0.536825, 0.0224373, 0.50659] #R^2=0.9803
popt4 = [-0.495557, 0.030814, 0.503681] #R^2=0.9878

plt.figure(figsize=(12,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1 = [-0.768452, 0.00391461, 0.714247] #R^2=0.9828
popt2 = [-0.576554, 0.0135749, 0.520838] #R^2=0.9773
popt3 = [-0.536825, 0.0224373, 0.50659] #R^2=0.9803
popt4 = [-0.495557, 0.030814, 0.503681] #R^2=0.9878

plt.figure(figsize=(12,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
#plt.xlim(-5,150)

#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1 = [-0.768452, 0.00391461, 0.714247] #R^2=0.9828
popt2 = [-0.576554, 0.0135749, 0.520838] #R^2=0.9773
popt3 = [-0.536825, 0.0224373, 0.50659] #R^2=0.9803
popt4 = [-0.495557, 0.030814, 0.503681] #R^2=0.9878

plt.figure(figsize=(12,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,200)

#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to exponential', fontsize=16)
plt.legend()
plt.show()

popt1 = [-0.746697, 0.00543704, 0.623379]
popt2 = [-0.760352, 0.0182613, 0.5087]
popt3 = [-0.719447, 0.0293259, 0.501899]
popt4 = [-0.691959, 0.0408108, 0.500804]

plt.figure(figsize=(12,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,150)

#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to exponential', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(16,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=14)     # fontsize of the axes title
plt.rc('axes', labelsize=16)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=14)    # fontsize of the tick labels
plt.rc('ytick', labelsize=14)    # fontsize of the tick labels
plt.rc('legend', fontsize=14)    # legend fontsize
plt.rc('figure', titlesize=18)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,350)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=18)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=14)     # fontsize of the axes title
plt.rc('axes', labelsize=16)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=14)    # fontsize of the tick labels
plt.rc('ytick', labelsize=14)    # fontsize of the tick labels
plt.rc('legend', fontsize=14)    # legend fontsize
plt.rc('figure', titlesize=18)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,300)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=18)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=14)     # fontsize of the axes title
plt.rc('axes', labelsize=16)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=14)    # fontsize of the tick labels
plt.rc('ytick', labelsize=14)    # fontsize of the tick labels
plt.rc('legend', fontsize=14)    # legend fontsize
plt.rc('figure', titlesize=18)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=18)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.rc('font', size=16)          # controls default text sizes
plt.rc('axes', titlesize=16)     # fontsize of the axes title
plt.rc('axes', labelsize=18)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=16)    # fontsize of the tick labels
plt.rc('ytick', labelsize=16)    # fontsize of the tick labels
plt.rc('legend', fontsize=16)    # legend fontsize
plt.rc('figure', titlesize=20)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=20)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.rc('font', size=16)          # controls default text sizes
plt.rc('axes', titlesize=18)     # fontsize of the axes title
plt.rc('axes', labelsize=20)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=18)    # fontsize of the tick labels
plt.rc('ytick', labelsize=18)    # fontsize of the tick labels
plt.rc('legend', fontsize=18)    # legend fontsize
plt.rc('figure', titlesize=22)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=22)
plt.legend()
plt.show()

plt.rcParams["font.family"] = "Times New Roman"
plt.figure(figsize=(14,10))

plt.rc('font', size=16)          # controls default text sizes
plt.rc('axes', titlesize=18)     # fontsize of the axes title
plt.rc('axes', labelsize=20)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=18)    # fontsize of the tick labels
plt.rc('ytick', labelsize=18)    # fontsize of the tick labels
plt.rc('legend', fontsize=18)    # legend fontsize
plt.rc('figure', titlesize=22)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(10,8))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(8,6))

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.rc('font', size=20)          # controls default text sizes
plt.rc('axes', titlesize=22)     # fontsize of the axes title
plt.rc('axes', labelsize=24)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=22)    # fontsize of the tick labels
plt.rc('ytick', labelsize=22)    # fontsize of the tick labels
plt.rc('legend', fontsize=22)    # legend fontsize
plt.rc('figure', titlesize=24)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=24)
plt.legend()
plt.show()

font?
plt.folt?
plt.font?
plt.rc?
plt.rcParams?
plt.rcsetup?
font = {'family' : 'normal',
        'weight' : 'bold'}
        
plt.rc('font', **font)
plt.figure(figsize=(14,10))

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=24)
plt.legend()
plt.show()

font = {'style' : 'normal',
        'weight' : 'normal'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=24)
plt.legend()
plt.show()

font = {'style' : 'normal',
        'weight' : 'normal',
        'font.family' : 'Times New Roman'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=24)
plt.legend()
plt.show()

font = {'style' : 'normal',
        'weight' : 'normal',
        'family' : 'Times New Roman'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=24)
plt.legend()
plt.show()

font = {'style' : 'italic',
        'weight' : 'normal',
        'family' : 'Times New Roman'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=24)
plt.legend()
plt.show()

font = {'style' : 'normal',
        'weight' : 'light',
        'family' : 'Times New Roman'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=24)
plt.legend()
plt.show()

font = {'style' : 'normal',
        'weight' : 'medium',
        'family' : 'Times New Roman'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=24)
plt.legend()
plt.show()

font = {'style' : 'normal',
        'weight' : 'black',
        'family' : 'Times New Roman'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=24)
plt.legend()
plt.show()

plt.rc('axes', titlesize=12, weight = 'light')
plt.rc?
plt.rc('axes', titlesize=12, style = 'normal')
plt.rc('axes', titlesize=12)?
plt.rc('axes')?
q = plt.rc('axes', titlesize=12)
q?
q
font = {'style' : 'normal',
        'weight' : 'medium',
        'family' : 'Times New Roman'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=24)
plt.legend()
plt.show()

font = {'style' : 'bold',
        'weight' : 'medium',
        'family' : 'Times New Roman'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=24)
plt.legend()
plt.show()

font = {'style' : 'oblique',
        'weight' : 'medium',
        'family' : 'Times New Roman'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=24)
plt.legend()
plt.show()

font = {'style' : 'normal',
        'weight' : 'light',
        'family' : 'Times New Roman'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma=0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma=1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma=1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=24)
plt.legend()
plt.show()

font = {'style' : 'normal',
        'weight' : 'light',
        'family' : 'Times New Roman'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma = 0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma = 1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma = 1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma = 2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=24)
plt.legend()
plt.show()

font = {'style' : 'normal',
        'weight' : 'light',
        'family' : 'Times New Roman'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.rc('font', size=20)          # controls default text sizes
plt.rc('axes', titlesize=22)     # fontsize of the axes title
plt.rc('axes', labelsize=24)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=24)    # fontsize of the tick labels
plt.rc('ytick', labelsize=24)    # fontsize of the tick labels
plt.rc('legend', fontsize=26)    # legend fontsize
plt.rc('figure', titlesize=26)  # fontsize of the figure title
        
plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma = 0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma = 1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma = 1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma = 2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=26)
plt.legend()
plt.show()

n2=1000
t7 = np.linspace(0,1400,1400*20)
state07 = [1,0]*n2
params7 = ([0.1]*n2,[1]*n2,[(np.pi*2)/24]*n2,[0.0]*n2,[0.0]*n2)

x72 = ode_rand3(n2,t7,state07,params7,0.1)
x73 = ode_rand3(n2,t7,state07,params7,0.2)

np.save("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/3rd attempt/1000 oscillators with E 0.1 and state0 [1,0] v3",x72[1])
np.save("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/3rd attempt/1000 oscillators with E 0.2 and state0 [1,0] v3",x73[1])
x72x = sep(x72[1])[0]
x73x = sep(x73[1])[0]
x64x = sep(x64[1])[0]
plt.figure(figsize=(14,10))

plt.plot(x72[0][:-239], run_mean(np.var(x72x, axis=0),240), label = 'E = 0.1')
plt.plot(x73[0], run_mean(np.var(x73x,axis=0),240), label = 'E = 0.2')
plt.plot(x64[0], run_mean(np.var(x64x,axis=0),240), labe = 'E = 0.5')
plt.legend()
plt.xlabel('time, hours')
plt.ylabel('Variance of x-coordinate')


plt.figure(figsize=(14,10))

plt.plot(x72[0][:24962], run_mean(np.var(x72x, axis=0),240), label = 'E = 0.1')
plt.plot(x73[0][:24962], run_mean(np.var(x73x,axis=0),240), label = 'E = 0.2')
plt.plot(x64[0], run_mean(np.var(x64x,axis=0),240), labe = 'E = 0.5')
plt.legend()
plt.xlabel('time, hours')
plt.ylabel('Variance of x-coordinate')


plt.figure(figsize=(14,10))

plt.plot(x72[0][:24962], run_mean(np.var(x72x, axis=0),240), label = 'E = 0.1')
plt.plot(x73[0][:24962], run_mean(np.var(x73x,axis=0),240), label = 'E = 0.2')
plt.plot(x64[0][:10562], run_mean(np.var(x64x,axis=0),240), labe = 'E = 0.5')
plt.legend()
plt.xlabel('time, hours')
plt.ylabel('Variance of x-coordinate')


len(x72[0][:24962])
v2 = run_mean(np.var(x72x, axis=0),240)
v3 = run_mean(np.var(x73x, axis=0),240)
v4 = run_mean(np.var(x64x, axis=0),240)
len(v2)
len(v3)
len(v4)
t6 = np.linspace(0,600,600*20)
plt.plot(t6[:10562], v4)
plt.figure(figsize=(14,10))
plt.plot(t6[:10562], v4, label = 'E = 0.5')
plt.plot(t7[:24962], v2, label = 'E = 0.1')
plt.plot(t7[:24962], v3, label = 'E = 0.2')
plt.legend()

v72 = run_mean(np.var(x72x, axis=0),240)
v73 = run_mean(np.var(x73x, axis=0),240)
v64 = run_mean(np.var(x64x, axis=0),240)
x62x = sep(x62[1])[0]
x63x = sep(x63[1])[0]
v63 = run_mean(np.var(x63x, axis=0),240)
v62 = run_mean(np.var(x62x, axis=0),240)
plt.figure(figsize=(14,10))
plt.plot(t6[:10562], v64, label = 'v64 - E=0.5')
plt.plot(t6[:10562], v63, label = 'v63 - E=0.2')
plt.plot(t6[:10562], v62, label = 'v62 - E=0.1')

plt.plot(t7[:24962], v72, label = 'v72 - E=0.1')
plt.plot(t7[:24962], v73, label = 'v73 - E=0.2')
plt.legend()

n2=1000
t7 = np.linspace(0,1400,1400*20)
state07 = [1,0]*n2
params7 = ([0.1]*n2,[1]*n2,[(np.pi*2)/24]*n2,[0.0]*n2,[0.0]*n2)

x74 = ode_rand3(n2,t7,state07,params7,0.5)

np.save("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/3rd attempt/1000 oscillators with E 0.5 and state0 [1,0] v3",x74[1])
np.save("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/3rd attempt/1000 oscillators with E 0.05-0.1-0.2-0.5 and state0 [1,0] v3 time",x74[0])
x74x = sep(x74[1])[0]
v74 = run_mean(np.var(x74x, axis=0),240)

plt.figure(figsize=(14,10))

plt.plot(t6[:10562], v62, label = 'v62 - E=0.1')
plt.plot(t6[:10562], v63, label = 'v63 - E=0.2')
plt.plot(t6[:10562], v64, label = 'v64 - E=0.5')

plt.plot(t7[:24962], v72, label = 'v72 - E=0.1')
plt.plot(t7[:24962], v73, label = 'v73 - E=0.2')
plt.plot(t7[:24962], v74, label = 'v74 - E=0.5')
plt.legend()

n2=1000
t8 = np.linspace(0,2500,2500*20)
state08 = [1,0]*n2
params8 = ([0.1]*n2,[1]*n2,[(np.pi*2)/24]*n2,[0.0]*n2,[0.0]*n2)

x82 = ode_rand3(n2,t8,state08,params8,0.1)

x82x = sep(x82[1])[0]
v82 = run_mean(np.var(x82x, axis=0),240)
plt.figure(figsize=(14,10))

plt.plot(t6[:10562], v62, label = 'v62 - E=0.1')
plt.plot(t6[:10562], v63, label = 'v63 - E=0.2')
plt.plot(t6[:10562], v64, label = 'v64 - E=0.5')

plt.plot(t7[:24962], v72, label = 'v72 - E=0.1')
plt.plot(t7[:24962], v73, label = 'v73 - E=0.2')
plt.plot(t7[:24962], v74, label = 'v74 - E=0.5')

plt.plot(t8[:44762], v82, label = 'v82 - E=0.1')
plt.legend()

v82[-10:-1]
v73[-10:-1]
np.mean(v82[-100:-1])
np.mean(v73[-100:-1])
np.mean(v72[-100:-1])
np.save("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/3rd attempt/1000 oscillators with E 0.1 and state0 [1,0] v4",x82[1])
np.save("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/3rd attempt/1000 oscillators with E 0.1 and state0 [1,0] v4 time",x82[0])
ph3 = phvar(x3[1])[0]
phvar(x1)[0]
ph3 = phvar(x3)[0]
ph3[-10:]
ph4 = phvar(x4)[0]
ph4[-10:]
np.mean(ph4[-100:])
np.mean(ph4[-50:])
np.mean(ph4[-200:])
plt.plot(ph4)
ph4 = run_mean(phvar(x4)[0],120,1)
plt.plot(ph4)
ph4[-1]
np.mean(ph4[-100:])
plt.plot(ph4, 'o')
plt.xlim(2000,2001)

plt.plot(ph4, 'o')
plt.xlim(2000,2010)

plt.plot(t[:3762], ph4, 'o')
plt.xlim(2000,2010)

plt.plot(t[:3762], ph4, 'o')
#plt.xlim(2000,2010)
plt.plot(t[:3762], ph4, 'o')
plt.xlim(200,201)

plt.plot(t[:3762], ph4, 'o')
plt.xlim(200,201)
plt.ylim(2690,2710)

plt.plot(t[:3762], ph4, 'o')
plt.xlim(200,201)
plt.ylim(2693,2698)

plt.plot(t[:3762], ph4, 'o')
plt.xlim(210,220)
plt.ylim(2693,2698)

plt.plot(t[:3762], ph4, 'o')
plt.xlim(210,220)
plt.ylim(2693,2705)

plt.plot(t[:3762], ph4, 'o')
plt.xlim(210,250)
plt.ylim(2693,2705)

plt.plot(t[:3762], ph4, 'o')
plt.xlim(210,280)
plt.ylim(2693,2705)

x001 = odeint(oscillator_system, [1,0] , t001, args=(params001))

fig, (ax1, ax2) = plt.subplots(2, sharey=True)
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

params001 = ([0.1],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x001 = odeint(oscillator_system, [1,0] , t001, args=(params001))

fig, (ax1, ax2) = plt.subplots(2, sharey=True)
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title

fig, (ax1, ax2) = plt.subplots(2, sharey=True)
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(14,10))
fig
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(10,8))
fig
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

plt.rc('font', size=12)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=16)  # fontsize of the figure title


fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(12,10))
fig
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

plt.rc('font', size=16)          # controls default text sizes
plt.rc('axes', titlesize=16)     # fontsize of the axes title
plt.rc('axes', labelsize=18)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=16)    # fontsize of the tick labels
plt.rc('ytick', labelsize=16)    # fontsize of the tick labels
plt.rc('legend', fontsize=16)    # legend fontsize
plt.rc('figure', titlesize=20)  # fontsize of the figure title


fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(12,10))
fig
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

plt.rc('font', size=20)          # controls default text sizes
plt.rc('axes', titlesize=20)     # fontsize of the axes title
plt.rc('axes', labelsize=22)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=20)    # fontsize of the tick labels
plt.rc('ytick', labelsize=20)    # fontsize of the tick labels
plt.rc('legend', fontsize=20)    # legend fontsize
plt.rc('figure', titlesize=24)  # fontsize of the figure title


fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(12,10))
fig
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

plt.rc('font', size=20)          # controls default text sizes
plt.rc('axes', titlesize=20)     # fontsize of the axes title
plt.rc('axes', labelsize=22)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=20)    # fontsize of the tick labels
plt.rc('ytick', labelsize=20)    # fontsize of the tick labels
plt.rc('legend', fontsize=20)    # legend fontsize
plt.rc('figure', titlesize=24)  # fontsize of the figure title


fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(12,10))
fig
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o', linewidth=2)
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o', linewidth=2)
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

plt.rc('font', size=20)          # controls default text sizes
plt.rc('axes', titlesize=20)     # fontsize of the axes title
plt.rc('axes', labelsize=22)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=20)    # fontsize of the tick labels
plt.rc('ytick', labelsize=20)    # fontsize of the tick labels
plt.rc('legend', fontsize=20)    # legend fontsize
plt.rc('figure', titlesize=24)  # fontsize of the figure title


fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(12,10))
fig
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o', linewidth=2.0)
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o', linewidth=2.0)
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

plt.rc('font', size=20)          # controls default text sizes
plt.rc('axes', titlesize=20)     # fontsize of the axes title
plt.rc('axes', labelsize=22)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=20)    # fontsize of the tick labels
plt.rc('ytick', labelsize=20)    # fontsize of the tick labels
plt.rc('legend', fontsize=20)    # legend fontsize
plt.rc('figure', titlesize=24)  # fontsize of the figure title


fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(12,10))
fig
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o', linewidth=2.0)
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o', linewidth=2.0)
plt.setp(lines, linewidth=2.0)
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

plt.rc('font', size=20)          # controls default text sizes
plt.rc('axes', titlesize=20)     # fontsize of the axes title
plt.rc('axes', labelsize=22)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=20)    # fontsize of the tick labels
plt.rc('ytick', labelsize=20)    # fontsize of the tick labels
plt.rc('legend', fontsize=20)    # legend fontsize
plt.rc('figure', titlesize=24)  # fontsize of the figure title


fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(12,10))
fig
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o', linewidth=10.0)
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o', linewidth=2.0)
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

plt.rc('font', size=20)          # controls default text sizes
plt.rc('axes', titlesize=20)     # fontsize of the axes title
plt.rc('axes', labelsize=22)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=20)    # fontsize of the tick labels
plt.rc('ytick', labelsize=20)    # fontsize of the tick labels
plt.rc('legend', fontsize=20)    # legend fontsize
plt.rc('figure', titlesize=24)  # fontsize of the figure title


fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(8,9.6))
fig
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o', linewidth=10.0)
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o', linewidth=2.0)
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

plt.rc('font', size=20)          # controls default text sizes
plt.rc('axes', titlesize=20)     # fontsize of the axes title
plt.rc('axes', labelsize=22)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=20)    # fontsize of the tick labels
plt.rc('ytick', labelsize=20)    # fontsize of the tick labels
plt.rc('legend', fontsize=20)    # legend fontsize
plt.rc('figure', titlesize=24)  # fontsize of the figure title


fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(9.6, 8))
fig
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o', linewidth=10.0)
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o', linewidth=2.0)
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

plt.rc('font', size=20)          # controls default text sizes
plt.rc('axes', titlesize=22)     # fontsize of the axes title
plt.rc('axes', labelsize=24)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=24)    # fontsize of the tick labels
plt.rc('ytick', labelsize=24)    # fontsize of the tick labels
plt.rc('legend', fontsize=26)    # legend fontsize
plt.rc('figure', titlesize=26)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma = 0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma = 1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma = 1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma = 2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=26)
plt.legend()
plt.show()

font = {'style' : 'normal',
        'weight' : 'light',
        'family' : 'Times New Roman'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.rc('font', size=20)          # controls default text sizes
plt.rc('axes', titlesize=22)     # fontsize of the axes title
plt.rc('axes', labelsize=24)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=24)    # fontsize of the tick labels
plt.rc('ytick', labelsize=24)    # fontsize of the tick labels
plt.rc('legend', fontsize=26)    # legend fontsize
plt.rc('figure', titlesize=26)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma = 0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma = 1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma = 1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma = 2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=26)
plt.legend()
plt.show()

font = {'style' : 'normal',
        'weight' : 'light',
        'family' : 'default'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.rc('font', size=20)          # controls default text sizes
plt.rc('axes', titlesize=22)     # fontsize of the axes title
plt.rc('axes', labelsize=24)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=24)    # fontsize of the tick labels
plt.rc('ytick', labelsize=24)    # fontsize of the tick labels
plt.rc('legend', fontsize=26)    # legend fontsize
plt.rc('figure', titlesize=26)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma = 0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma = 1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma = 1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma = 2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=26)
plt.legend()
plt.show()

font = {'style' : 'normal',
        'weight' : 'black',
        'family' : 'default'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.rc('font', size=20)          # controls default text sizes
plt.rc('axes', titlesize=22)     # fontsize of the axes title
plt.rc('axes', labelsize=24)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=24)    # fontsize of the tick labels
plt.rc('ytick', labelsize=24)    # fontsize of the tick labels
plt.rc('legend', fontsize=26)    # legend fontsize
plt.rc('figure', titlesize=26)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma = 0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma = 1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma = 1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma = 2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=26)
plt.legend()
plt.show()

font = {'style' : 'normal',
        'weight' : 'normal',
        'family' : 'DejaVu Sans'}
plt.rc('font', **font)      
plt.figure(figsize=(14,10))

plt.rc('font', size=20)          # controls default text sizes
plt.rc('axes', titlesize=22)     # fontsize of the axes title
plt.rc('axes', labelsize=24)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=24)    # fontsize of the tick labels
plt.rc('ytick', labelsize=24)    # fontsize of the tick labels
plt.rc('legend', fontsize=26)    # legend fontsize
plt.rc('figure', titlesize=26)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 'sigma = 0.5')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 'sigma = 1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 'sigma = 1.5')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 'sigma = 2')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=26)
plt.legend()
plt.show()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

# R-squared metric
rsq = []
rsq.append(r_sq(lin,xdata1[3:10],ydata1[3:10],popt1))
rsq.append(r_sq(lin,xdata2[2:8],ydata2[2:8],popt2))
rsq.append(r_sq(lin,xdata3[1:5],ydata3[1:5],popt3))
rsq.append(r_sq(lin,xdata4[1:4],ydata4[1:4],popt4))


plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
plt.text(90,1.0,'Normalized\n' + texttang2)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators fitted to the line', fontsize=16)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

# R-squared metric
rsq = []
rsq.append(r_sq(lin,xdata1[3:10],ydata1[3:10],popt1))
rsq.append(r_sq(lin,xdata2[2:8],ydata2[2:8],popt2))
rsq.append(r_sq(lin,xdata3[1:5],ydata3[1:5],popt3))
rsq.append(r_sq(lin,xdata4[1:4],ydata4[1:4],popt4))


plt.figure(figsize=(14,10))
plt.rc('legend', fontsize=22)    # legend fontsize
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
#plt.text(90,1.1,'Slopes\n' + texttang)
#plt.text(90,1.0,'Normalized\n' + texttang2)

plt.xlim(-5,230)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coord) of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

# R-squared metric
rsq = []
rsq.append(r_sq(lin,xdata1[3:10],ydata1[3:10],popt1))
rsq.append(r_sq(lin,xdata2[2:8],ydata2[2:8],popt2))
rsq.append(r_sq(lin,xdata3[1:5],ydata3[1:5],popt3))
rsq.append(r_sq(lin,xdata4[1:4],ydata4[1:4],popt4))


plt.figure(figsize=(14,10))
plt.rc('legend', fontsize=22)    # legend fontsize
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
#plt.text(90,1.1,'Slopes\n' + texttang)
#plt.text(90,1.0,'Normalized\n' + texttang2)

plt.xlim(-5,400)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coord) of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

# R-squared metric
rsq = []
rsq.append(r_sq(lin,xdata1[3:10],ydata1[3:10],popt1))
rsq.append(r_sq(lin,xdata2[2:8],ydata2[2:8],popt2))
rsq.append(r_sq(lin,xdata3[1:5],ydata3[1:5],popt3))
rsq.append(r_sq(lin,xdata4[1:4],ydata4[1:4],popt4))


plt.figure(figsize=(14,10))
plt.rc('legend', fontsize=22)    # legend fontsize
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
#plt.text(90,1.1,'Slopes\n' + texttang)
#plt.text(90,1.0,'Normalized\n' + texttang2)

plt.xlim(-15,400)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coord) of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

# R-squared metric
rsq = []
rsq.append(r_sq(lin,xdata1[3:10],ydata1[3:10],popt1))
rsq.append(r_sq(lin,xdata2[2:8],ydata2[2:8],popt2))
rsq.append(r_sq(lin,xdata3[1:5],ydata3[1:5],popt3))
rsq.append(r_sq(lin,xdata4[1:4],ydata4[1:4],popt4))


plt.figure(figsize=(14,10))
plt.rc('legend', fontsize=22)    # legend fontsize
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(90,1.1,'Slopes\n' + texttang)
#plt.text(90,1.0,'Normalized\n' + texttang2)

plt.xlim(-15,400)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coord) of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

#popt1,pcov1 = curve_fit(expon,xdata1[3:10],ydata1[3:10], maxfev=10000)
#popt2,pcov2 = curve_fit(expon,xdata2[2:8],ydata2[2:8], maxfev=10000)
#popt3,pcov3 = curve_fit(expon,xdata3[1:5],ydata3[1:5], maxfev=10000)
#popt4,pcov4 = curve_fit(expon,xdata4[1:4],ydata4[1:4], maxfev=10000)

popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')1

plt.xlim(-15,400)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coord) of heterogenous oscillators fitted to the exponential', fontsize=26)
plt.legend()
xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

#popt1,pcov1 = curve_fit(expon,xdata1[3:10],ydata1[3:10], maxfev=10000)
#popt2,pcov2 = curve_fit(expon,xdata2[2:8],ydata2[2:8], maxfev=10000)
#popt3,pcov3 = curve_fit(expon,xdata3[1:5],ydata3[1:5], maxfev=10000)
#popt4,pcov4 = curve_fit(expon,xdata4[1:4],ydata4[1:4], maxfev=10000)

popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')

plt.xlim(-15,400)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coord) of heterogenous oscillators fitted to the exponential', fontsize=26)
plt.legend()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

#popt1,pcov1 = curve_fit(expon,xdata1[3:10],ydata1[3:10], maxfev=10000)
#popt2,pcov2 = curve_fit(expon,xdata2[2:8],ydata2[2:8], maxfev=10000)
#popt3,pcov3 = curve_fit(expon,xdata3[1:5],ydata3[1:5], maxfev=10000)
#popt4,pcov4 = curve_fit(expon,xdata4[1:4],ydata4[1:4], maxfev=10000)

popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')

plt.xlim(-15,400)
plt.ylim(-0.2,1.2)
plt.title('Mean of heterogenous oscillators fitted to the exponential', fontsize=26)
#plt.legend()

popt1,pcov1 = curve_fit(quad,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4,ydata4, maxfev=10000)

#popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
#popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
#popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
#popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, quad(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, quad(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, quad(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, quad(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')

plt.xlim(-15,400)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coordinate) of heterogenous oscillators fitted to the quadratic', fontsize=26)
#plt.legend(loc=1)

popt1,pcov1 = curve_fit(quad,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4,ydata4, maxfev=10000)

#popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
#popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
#popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
#popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, quad(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, quad(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, quad(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, quad(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')

plt.xlim(-15,400)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coord) of heterogenous oscillators fitted to the quadratic', fontsize=26)
#plt.legend(loc=1)

popt1,pcov1 = curve_fit(quad,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4,ydata4, maxfev=10000)

#popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
#popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
#popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
#popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, quad(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, quad(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, quad(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, quad(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')

plt.xlim(-15,400)
plt.ylim(-0.2,1.2)
plt.title('Mean of heterogenous oscillators fitted to the quadratic', fontsize=26)
#plt.legend(loc=1)

popt1,pcov1 = curve_fit(quad,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4,ydata4, maxfev=10000)

#popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
#popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
#popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
#popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, quad(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, quad(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, quad(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, quad(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')

plt.xlim(-15,400)
plt.ylim(-0.2,1.2)
plt.title('Mean of heterogenous oscillators fitted to the quadratic', fontsize=26)
#plt.legend(loc=1)
plt.grid()

popt1,pcov1 = curve_fit(quad,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4,ydata4, maxfev=10000)

popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, quad(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, quad(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, quad(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, quad(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')

plt.xlim(-15,400)
plt.ylim(-0.2,1.2)
plt.title('Mean of heterogenous oscillators fitted to the quadratic', fontsize=26)
#plt.legend(loc=1)
plt.grid()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

#popt1,pcov1 = curve_fit(expon,xdata1[3:10],ydata1[3:10], maxfev=10000)
#popt2,pcov2 = curve_fit(expon,xdata2[2:8],ydata2[2:8], maxfev=10000)
#popt3,pcov3 = curve_fit(expon,xdata3[1:5],ydata3[1:5], maxfev=10000)
#popt4,pcov4 = curve_fit(expon,xdata4[1:4],ydata4[1:4], maxfev=10000)

popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')

plt.xlim(-15,400)
plt.ylim(-0.2,1.2)
plt.title('Mean of heterogenous oscillators fitted to the exponential', fontsize=26)
#plt.legend()

plt.figure(figsize=(14,10))

plt.plot (t, np.var(x1x,axis=0), label = 'sigma=0.5')
plt.plot (t, np.var(x2x,axis=0), label = 'sigma=1')
plt.plot (t, np.var(x3x,axis=0), label = 'sigma=1.5')
plt.plot (t, np.var(x4x,axis=0), label = 'sigma=2')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

plt.ylim(-0.05,0.65)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.rc('font', size=10)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=11.5)    # legend fontsize
plt.rc('figure', titlesize=15)  # fontsize of the figure title

plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), 'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), 'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), 'm-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), 'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (smoothened)', fontsize=16)
plt.xlim(-10,250)
plt.legend()
plt.show()

plt.rc('font', size=20)          # controls default text sizes
plt.rc('axes', titlesize=22)     # fontsize of the axes title
plt.rc('axes', labelsize=24)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=24)    # fontsize of the tick labels
plt.rc('ytick', labelsize=24)    # fontsize of the tick labels
plt.rc('legend', fontsize=26)    # legend fontsize
plt.rc('figure', titlesize=26)  # fontsize of the figure title

plt.figure(figsize=(14,10))

plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), 'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), 'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), 'm-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), 'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (smoothened)', fontsize=16)
plt.xlim(-10,250)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), 'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), 'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), 'm-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), 'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (smoothened)', fontsize=26)
plt.xlim(-10,250)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), 'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), 'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), 'm-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), 'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.title ('Variance of x-coord of heterogenous oscillators (smoothened)', fontsize=26)
plt.xlim(-10,250)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), 'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), 'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), 'm-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), 'r-', label = 'sigma=2')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.title ('Variance of x-coord of heterogenous oscillators (smoothened)', fontsize=26)
plt.xlim(-10,250)
plt.legend()
plt.grid()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,quad(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,250)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to quadratic', fontsize=26)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,quad(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,250)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to quadratic', fontsize=26)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(lin,xdata[300:1500],ydata1[300:1500])
popt2,pcov2 = curve_fit(lin,xdata[200:900],ydata2[200:900])
popt3,pcov3 = curve_fit(lin,xdata[150:500],ydata3[150:500])
popt4,pcov4 = curve_fit(lin,xdata[100:400],ydata4[100:400])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,250)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coord) of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(lin,xdata[300:1300],ydata1[300:1300])
popt2,pcov2 = curve_fit(lin,xdata[200:900],ydata2[200:900])
popt3,pcov3 = curve_fit(lin,xdata[150:500],ydata3[150:500])
popt4,pcov4 = curve_fit(lin,xdata[100:400],ydata4[100:400])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,250)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coord) of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(lin,xdata[500:1300],ydata1[500:1300])
popt2,pcov2 = curve_fit(lin,xdata[200:900],ydata2[200:900])
popt3,pcov3 = curve_fit(lin,xdata[150:500],ydata3[150:500])
popt4,pcov4 = curve_fit(lin,xdata[100:400],ydata4[100:400])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,250)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coord) of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(lin,xdata[500:1300],ydata1[500:1300])
popt2,pcov2 = curve_fit(lin,xdata[200:900],ydata2[200:900])
popt3,pcov3 = curve_fit(lin,xdata[150:500],ydata3[150:500])
popt4,pcov4 = curve_fit(lin,xdata[150:400],ydata4[150:400])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,250)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coord) of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(lin,xdata[600:1500],ydata1[600:1500])
popt2,pcov2 = curve_fit(lin,xdata[200:900],ydata2[200:900])
popt3,pcov3 = curve_fit(lin,xdata[150:500],ydata3[150:500])
popt4,pcov4 = curve_fit(lin,xdata[100:350],ydata4[100:350])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,250)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coord) of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(lin,xdata[600:1500],ydata1[600:1500])
popt2,pcov2 = curve_fit(lin,xdata[200:800],ydata2[200:800])
popt3,pcov3 = curve_fit(lin,xdata[150:500],ydata3[150:500])
popt4,pcov4 = curve_fit(lin,xdata[100:350],ydata4[100:350])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,250)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coord) of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(lin,xdata[600:1500],ydata1[600:1500])
popt2,pcov2 = curve_fit(lin,xdata[200:800],ydata2[200:800])
popt3,pcov3 = curve_fit(lin,xdata[150:500],ydata3[150:500])
popt4,pcov4 = curve_fit(lin,xdata[100:350],ydata4[100:350])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,250)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coord) of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()
plt.grid()
plt.show()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

# R-squared metric
rsq = []
rsq.append(r_sq(lin,xdata1[3:10],ydata1[3:10],popt1))
rsq.append(r_sq(lin,xdata2[2:8],ydata2[2:8],popt2))
rsq.append(r_sq(lin,xdata3[1:5],ydata3[1:5],popt3))
rsq.append(r_sq(lin,xdata4[1:4],ydata4[1:4],popt4))

plt.figure(figsize=(14,10))
#plt.rc('legend', fontsize=22)    # legend fontsize
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
#plt.text(90,1.1,'Slopes\n' + texttang)
#plt.text(90,1.0,'Normalized\n' + texttang2)

plt.xlim(-15,400)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coord) of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()
plt.grid()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

popt1,pcov1 = curve_fit(lin,xdata1[3:10],ydata1[3:10])
popt2,pcov2 = curve_fit(lin,xdata2[2:8],ydata2[2:8])
popt3,pcov3 = curve_fit(lin,xdata3[1:5],ydata3[1:5])
popt4,pcov4 = curve_fit(lin,xdata4[1:4],ydata4[1:4])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
rt = roundl(tangents,4)
nt = roundl((rt/rt[0]).tolist(),4)

# R-squared metric
rsq = []
rsq.append(r_sq(lin,xdata1[3:10],ydata1[3:10],popt1))
rsq.append(r_sq(lin,xdata2[2:8],ydata2[2:8],popt2))
rsq.append(r_sq(lin,xdata3[1:5],ydata3[1:5],popt3))
rsq.append(r_sq(lin,xdata4[1:4],ydata4[1:4],popt4))

plt.figure(figsize=(14,10))
plt.rc('legend', fontsize=22)    # legend fontsize
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
#plt.text(90,1.1,'Slopes\n' + texttang)
#plt.text(90,1.0,'Normalized\n' + texttang2)

plt.xlim(-15,400)
plt.ylim(-0.2,1.2)
plt.title('Mean (x-coord) of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()
plt.grid()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1 = [-0.746697, 0.00543704, 0.623379]
popt2 = [-0.760352, 0.0182613, 0.5087]
popt3 = [-0.719447, 0.0293259, 0.501899]
popt4 = [-0.691959, 0.0408108, 0.500804]

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,250)

#plt.yscale('log')
plt.title('Variance (x-coord) of heterogenous oscillators fitted to the exponential', fontsize=26)
#plt.legend()
plt.grid()
plt.show()

popt1 = [-0.746697, 0.00543704, 0.623379]
popt2 = [-0.760352, 0.0182613, 0.5087]
popt3 = [-0.719447, 0.0293259, 0.501899]
popt4 = [-0.691959, 0.0408108, 0.500804]

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-15,250)

#plt.yscale('log')
plt.title('Variance (x-coord) of heterogenous oscillators fitted to the exponential', fontsize=26)
#plt.legend()
plt.grid()
plt.show()

popt1 = [-0.746697, 0.00543704, 0.623379]
popt2 = [-0.760352, 0.0182613, 0.5087]
popt3 = [-0.719447, 0.0293259, 0.501899]
popt4 = [-0.691959, 0.0408108, 0.500804]

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-10,250)

#plt.yscale('log')
plt.title('Variance (x-coord) of heterogenous oscillators fitted to the exponential', fontsize=26)
#plt.legend()
plt.grid()
plt.show()

popt1 = [-0.746697, 0.00543704, 0.623379]
popt2 = [-0.760352, 0.0182613, 0.5087]
popt3 = [-0.719447, 0.0293259, 0.501899]
popt4 = [-0.691959, 0.0408108, 0.500804]

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,250)

#plt.yscale('log')
plt.title('Variance (x-coord) of heterogenous oscillators fitted to the exponential', fontsize=26)
#plt.legend()
plt.grid()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,quad(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,250)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to quadratic', fontsize=26)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,quad(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,250)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coordinate) of 1000 heterogenous oscillators fitted to quadratic', fontsize=26)
#plt.legend()
plt.grid()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,quad(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,250)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coord) of heterogenous oscillators fitted to quadratic', fontsize=26)
#plt.legend()
plt.grid()
plt.show()

xdata=t[:3762]
ydata1=run_mean(np.var(x1x,axis=0),120,1)
ydata2=run_mean(np.var(x2x,axis=0),120,1)
ydata3=run_mean(np.var(x3x,axis=0),120,1)
ydata4=run_mean(np.var(x4x,axis=0),120,1)

popt1,pcov1 = curve_fit(quad,xdata[:1000],ydata1[:1000])
popt2,pcov2 = curve_fit(quad,xdata[:500],ydata2[:500])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,6)

plt.figure(figsize=(14,10))
plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,quad(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.05,0.55)
plt.xlim(-5,250)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(100,0,'The first coefficients of curves are\n' + texttang)
#plt.yscale('log')
plt.title('Variance (x-coord) of heterogenous oscillators fitted to quadratic', fontsize=26)
#plt.legend()
#plt.grid()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t, phvar(x1)[0],'k-', label = 'sigma=0.5')
plt.plot (t, phvar(x2)[0],'b-', label = 'sigma=1')
plt.plot (t, phvar(x3)[0],'m-', label = 'sigma=1.5')
plt.plot (t, phvar(x4)[0],'r-', label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of heterogenous oscillators', fontsize=26)
plt.grid()
plt.legend()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t[:3762], run_mean(phvar(x1)[0],120,1),'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(phvar(x2)[0],120,1),'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(phvar(x3)[0],120,1),'m-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(phvar(x4)[0],120,1),'r-', label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of heterogenous oscillators (smoothened)', fontsize=26)
plt.grid()
plt.legend()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t[:3762], run_mean(phvar(x1)[0],120,1),'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(phvar(x2)[0],120,1),'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(phvar(x3)[0],120,1),'m-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(phvar(x4)[0],120,1),'r-', label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of heterogenous oscillators (smoothened)', fontsize=26)
plt.grid()
#plt.legend()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t[:3762], run_mean(phvar(x1)[0],120,1),'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(phvar(x2)[0],120,1),'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(phvar(x3)[0],120,1),'m-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(phvar(x4)[0],120,1),'r-', label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of heterogenous oscillators (smoothened)', fontsize=26)
plt.xlim(-10,250)
plt.grid()
#plt.legend()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t[:3762], run_mean(phvar(x1)[0],120,1),'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(phvar(x2)[0],120,1),'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(phvar(x3)[0],120,1),'m-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(phvar(x4)[0],120,1),'r-', label = 'sigma=2')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of heterogenous oscillators (smoothened)', fontsize=26)
#plt.xlim(-5,250)
plt.grid()
#plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(lin,xdata[40:2000],ydata1[40:2000])
popt2,pcov2 = curve_fit(lin,xdata[:800],ydata2[:800])
popt3,pcov3 = curve_fit(lin,xdata[:700],ydata3[:700])
popt4,pcov4 = curve_fit(lin,xdata[:500],ydata4[:500])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]

rt = roundl(tangents,3)
nt = roundl((rt/rt[0]).tolist(),3)

plt.figure(figsize=(14,10))

plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
plt.xlim(-5,250)
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(200,1000,'Slopes\n' + texttang)
plt.text(200,500,'Normalized\n' + texttang2)

plt.title ('Variance of phase of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(lin,xdata[550:1700],ydata1[550:1700])
popt2,pcov2 = curve_fit(lin,xdata[200:800],ydata2[200:800])
popt3,pcov3 = curve_fit(lin,xdata[200:500],ydata3[200:500])
popt4,pcov4 = curve_fit(lin,xdata[40:380],ydata4[40:380])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]

rt = roundl(tangents,3)
nt = roundl((rt/rt[0]).tolist(),3)

plt.figure(figsize=(14,10))

plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
plt.xlim(-5,250)
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(200,1000,'Slopes\n' + texttang)
#plt.text(200,500,'Normalized\n' + texttang2)

plt.title ('Variance of phase of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(lin,xdata[550:1700],ydata1[550:1700])
popt2,pcov2 = curve_fit(lin,xdata[200:800],ydata2[200:800])
popt3,pcov3 = curve_fit(lin,xdata[200:500],ydata3[200:500])
popt4,pcov4 = curve_fit(lin,xdata[40:380],ydata4[40:380])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]

rt = roundl(tangents,3)
nt = roundl((rt/rt[0]).tolist(),3)

plt.figure(figsize=(14,10))

plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,2900)
plt.xlim(-5,250)
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
plt.text(200,1000,'Slopes\n' + texttang)
#plt.text(200,500,'Normalized\n' + texttang2)

plt.title ('Variance of phase of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()
plt.show()

popt1,pcov1 = curve_fit(lin,xdata[550:1700],ydata1[550:1700])
popt2,pcov2 = curve_fit(lin,xdata[200:800],ydata2[200:800])
popt3,pcov3 = curve_fit(lin,xdata[200:500],ydata3[200:500])
popt4,pcov4 = curve_fit(lin,xdata[40:380],ydata4[40:380])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]

rt = roundl(tangents,3)
nt = roundl((rt/rt[0]).tolist(),3)

plt.figure(figsize=(14,10))

plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5 data')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,2900)
plt.xlim(-5,250)
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
#plt.text(200,1000,'Slopes\n' + texttang)
#plt.text(200,500,'Normalized\n' + texttang2)

plt.title ('Variance of phase of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()
plt.grid()
plt.show()

popt1,pcov1 = curve_fit(lin,xdata[550:1700],ydata1[550:1700])
popt2,pcov2 = curve_fit(lin,xdata[200:800],ydata2[200:800])
popt3,pcov3 = curve_fit(lin,xdata[200:500],ydata3[200:500])
popt4,pcov4 = curve_fit(lin,xdata[40:380],ydata4[40:380])
tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]

rt = roundl(tangents,3)
nt = roundl((rt/rt[0]).tolist(),3)

plt.figure(figsize=(14,10))

plt.plot (xdata, ydata1, 'k--',label = 'sigma=0.5')
plt.plot(xdata,lin(xdata,*popt1),'k-', label = 'fit')
plt.plot (xdata, ydata2,'b--', label = 'sigma=1')
plt.plot(xdata,lin(xdata,*popt2),'b-', label = 'fit')
plt.plot (xdata, ydata3,'m--', label = 'sigma=1.5')
plt.plot(xdata,lin(xdata,*popt3),'m-', label = 'fit')
plt.plot (xdata, ydata4, 'r--', label = 'sigma=2')
plt.plot(xdata,lin(xdata,*popt4),'r-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,2900)
plt.xlim(-5,250)
texttang = ''
texttang2 = ''
for i in rt:
    texttang = texttang+str(i)+' : '
for i in nt:
    texttang2 = texttang2+str(i)+' : '
texttang = texttang[:-3]
texttang2 = texttang2[:-3]
#plt.text(200,1000,'Slopes\n' + texttang)
#plt.text(200,500,'Normalized\n' + texttang2)

plt.title ('Variance of phase of heterogenous oscillators fitted to the line', fontsize=26)
plt.legend()
plt.grid()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), 'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), 'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), 'm-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), 'r-', label = 'sigma=2')
plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.title ('Variance of x-coord of heterogenous oscillators (smoothened)', fontsize=26)
plt.xlim(-10,250)
#plt.legend()
plt.grid()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), 'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), 'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), 'm-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), 'r-', label = 'sigma=2')
plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.title ('Variance of x-coord of heterogenous oscillators (smoothened)', fontsize=26)
plt.xlim(-5,250)
#plt.legend()
plt.grid()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t[:3762], run_mean(np.var(x1x,axis=0),120,1), 'k-', label = 'sigma=0.5')
plt.plot (t[:3762], run_mean(np.var(x2x,axis=0),120,1), 'b-', label = 'sigma=1')
plt.plot (t[:3762], run_mean(np.var(x3x,axis=0),120,1), 'm-', label = 'sigma=1.5')
plt.plot (t[:3762], run_mean(np.var(x4x,axis=0),120,1), 'r-', label = 'sigma=2')
plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.title ('Variance of x-coord of heterogenous oscillators (smoothened)', fontsize=26)
#plt.xlim(-5,250)
#plt.legend()
plt.grid()
plt.show()

xdata1 = np.array(me4(np.mean(x1x, axis=0))[0])
ydata1 = np.array(me4(np.mean(x1x, axis=0))[1])
xdata2 = np.array(me4(np.mean(x2x, axis=0))[0])
ydata2 = np.array(me4(np.mean(x2x, axis=0))[1])
xdata3 = np.array(me4(np.mean(x3x, axis=0))[0])
ydata3 = np.array(me4(np.mean(x3x, axis=0))[1])
xdata4 = np.array(me4(np.mean(x4x, axis=0))[0])
ydata4 = np.array(me4(np.mean(x4x, axis=0))[1])

#popt1,pcov1 = curve_fit(expon,xdata1[3:10],ydata1[3:10], maxfev=10000)
#popt2,pcov2 = curve_fit(expon,xdata2[2:8],ydata2[2:8], maxfev=10000)
#popt3,pcov3 = curve_fit(expon,xdata3[1:5],ydata3[1:5], maxfev=10000)
#popt4,pcov4 = curve_fit(expon,xdata4[1:4],ydata4[1:4], maxfev=10000)

popt1 = [700.76, 0.00000393338, -699.683] #R^2=0.9879
popt2 = [1.23586, 0.00727099, -0.107034] #R^2=0.9632
popt3 = [1.11169, 0.0120443, -0.00746322] #R^2=0.9699
popt4 = [1.08954, 0.0158688, -0.00718665] #R2 = 0.9743

plt.figure(figsize=(14,10))
plt.plot(xdata1,ydata1, 'ko', label = 's=0.5 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 's=0.5 fit')
plt.plot(xdata2,ydata2, 'bo', label = 's=1.0 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 's=1.0 fit')
plt.plot(xdata3,ydata3, 'mo', label = 's=1.5 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 's=1.5 fit')
plt.plot(xdata4,ydata4, 'ro', label = 's=2.0 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 's=2.0 fit')

#plt.plot(np.linspace(0,400,400), [0.23]*400, '-', label = 'Lowest cut-off limit')
#plt.plot(np.linspace(0,180,180), [0.945]*180, '-', label = 'Highest cut-off limit')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')

plt.xlim(-15,400)
plt.ylim(-0.2,1.2)
plt.title('Mean of heterogenous oscillators fitted to the exponential', fontsize=26)
plt.grid()
#plt.legend()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(quad,xdata[:800],ydata1[:800])
popt2,pcov2 = curve_fit(quad,xdata[:400],ydata2[:400])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,3)

plt.figure(figsize=(14,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,2900)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,250)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(60,50,'The coefficients of curves are\n' + texttang)
plt.title ('Variance of phase of heterogenous oscillators fitted to quadratic', fontsize=26)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)

popt1,pcov1 = curve_fit(quad,xdata[:800],ydata1[:800])
popt2,pcov2 = curve_fit(quad,xdata[:400],ydata2[:400])
popt3,pcov3 = curve_fit(quad,xdata[:300],ydata3[:300])
popt4,pcov4 = curve_fit(quad,xdata[:200],ydata4[:200])

coefficients = [popt1[0],popt2[0],popt3[0], popt4[0]]
ct = roundl(coefficients,3)

plt.figure(figsize=(14,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,quad(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,quad(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,quad(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,quad(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,2900)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,250)

texttang = ''
for i in ct:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(60,50,'The coefficients of curves are\n' + texttang)
plt.title ('Variance of phase of heterogenous oscillators fitted to quadratic', fontsize=26)
#plt.legend()
plt.grid()
plt.show()

popt1,pcov1 = curve_fit(expon,xdata,ydata1,maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata,ydata2,maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata,ydata3,maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata,ydata4,maxfev=10000)

plt.figure(figsize=(14,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

xdata=t[:3762]
ydata1=run_mean(phvar(x1)[0],120,1)
ydata2=run_mean(phvar(x2)[0],120,1)
ydata3=run_mean(phvar(x3)[0],120,1)
ydata4=run_mean(phvar(x4)[0],120,1)
popt1,pcov1 = curve_fit(expon,xdata,ydata1,maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata,ydata2,maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata,ydata3,maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata,ydata4,maxfev=10000)

plt.figure(figsize=(14,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()


popt1,pcov1 = curve_fit(expon,xdata[300:],ydata1[300:],maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[250:],ydata2[250:],maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[200:],ydata3[200:],maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[200:],ydata4[200:],maxfev=10000)

plt.figure(figsize=(14,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()


popt1,pcov1 = curve_fit(expon,xdata[300:1500],ydata1[300:1500],maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[250:1500],ydata2[250:1500],maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[200:1500],ydata3[200:1500],maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[200:1500],ydata4[200:1500],maxfev=10000)

plt.figure(figsize=(14,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()


popt1,pcov1 = curve_fit(expon,xdata[300:1000],ydata1[300:1000],maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata[250:1000],ydata2[250:1000],maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata[100:1000],ydata3[100:1000],maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata[100:1000],ydata4[100:1000],maxfev=10000)

plt.figure(figsize=(14,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()

ydata1Des = [ydata1[i] for i in range(len(ydata4)) if i%50==0]
len(ydata1Des)
ydata1Des = [ydata1[i] for i in range(len(ydata4)) if i%100==0]
len(ydata1Des)
ydata2Des = [ydata2[i] for i in range(len(ydata2)) if i%100==0]
ydata3Des = [ydata3[i] for i in range(len(ydata3)) if i%100==0]
ydata4Des = [ydata4[i] for i in range(len(ydata4)) if i%100==0]
xdataDes = [xdata[i] for i in range(len(xdata)) if i%100==0]
len(xdata)

popt1 = [-4077.84, 0.00401712, 3799.11]
popt2 = [-3656.12, 0.0166434, 2766]
popt3 = [-3279.32, 0.025868, 2720.34]
popt4 = [-2654.03, 0.0307767, 2723.9]


plt.figure(figsize=(14,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,3000)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of 1000 heterogenous oscillators (smoothened) fitted to exponential', fontsize=16)
plt.legend()
plt.show()


popt1 = [-4077.84, 0.00401712, 3799.11]
popt2 = [-3656.12, 0.0166434, 2766]
popt3 = [-3279.32, 0.025868, 2720.34]
popt4 = [-2654.03, 0.0307767, 2723.9]


plt.figure(figsize=(14,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,2900)
#plt.yscale('log')
#plt.xscale('log')
#plt.xlim(-5,150)

plt.title ('Variance of phase of heterogenous oscillators fitted to exponential', fontsize=26)
#plt.legend()
plt.grid()
plt.show()


popt1 = [-4077.84, 0.00401712, 3799.11]
popt2 = [-3656.12, 0.0166434, 2766]
popt3 = [-3279.32, 0.025868, 2720.34]
popt4 = [-2654.03, 0.0307767, 2723.9]


plt.figure(figsize=(14,10))

plt.plot (xdata, ydata1, 'r--',label = 'sigma=0.5')
plt.plot(xdata,expon(xdata,*popt1),'r-', label = 'fit')
plt.plot (xdata, ydata2,'m--', label = 'sigma=1')
plt.plot(xdata,expon(xdata,*popt2),'m-', label = 'fit')
plt.plot (xdata, ydata3,'b--', label = 'sigma=1.5')
plt.plot(xdata,expon(xdata,*popt3),'b-', label = 'fit')
plt.plot (xdata, ydata4, 'k--', label = 'sigma=2')
plt.plot(xdata,expon(xdata,*popt4),'k-', label = 'fit')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.ylim(-50,2900)
#plt.yscale('log')
#plt.xscale('log')
plt.xlim(-5,250)

plt.title ('Variance of phase of heterogenous oscillators fitted to exponential', fontsize=26)
#plt.legend()
plt.grid()
plt.show()

n=1000
t = np.linspace(0,600,600*20)
state0 = [1,0]*n
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)

x1=[[],[]]
x2=[[],[]]
x3=[[],[]]
x4=[[],[]]

x1[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0].npy")
x2[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0].npy")
x3[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0].npy")
x4[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0].npy")

x1[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0] time.npy")
x2[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0] time.npy")
x3[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0] time.npy")
x4[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0] time.npy")

def me4(x):
    return maxs3(extr(x))

plt.figure(figsize=(20,8))

    plt.rc('font', size=12)          # controls default text sizes
    plt.rc('axes', titlesize=12)     # fontsize of the axes title
    plt.rc('axes', labelsize=14)    # fontsize of the x and y labels
    plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
    plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
    plt.rc('legend', fontsize=12)    # legend fontsize
    plt.rc('figure', titlesize=16)  # fontsize of the figure title

for i in range(10):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=16)
plt.xlim(-10,300)
#plt.legend()
plt.figure(figsize=(20,8))


for i in range(10):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=16)
plt.xlim(-10,300)
#plt.legend()

plt.figure(figsize=(14,10))


for i in range(10):
    plt.plot(x3[0], x3[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.2)', fontsize=26)
plt.xlim(-10,300)
#plt.legend()

plt.figure(figsize=(14,10))


for i in range(10):
    plt.plot(x3[0], x3[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.2)', fontsize=26)
plt.xlim(-10,150)
#plt.legend()

plt.figure(figsize=(14,10))


for i in range(5):
    plt.plot(x3[0], x3[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.2)', fontsize=26)
plt.xlim(-10,150)
#plt.legend()

plt.figure(figsize=(14,10))


for i in range(5):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(-10,150)
#plt.legend()

plt.figure(figsize=(14,10))


for i in range(5):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(-5,250)
#plt.legend()



plt.figure(figsize=(14,10))

x2r=[]
for i in range(5):
    x2r.append(run_mean(x2[1][i],30))
    plt.plot(x2[0], x2r[i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(-5,250)
#plt.legend()



plt.figure(figsize=(14,10))

x2r=[]
for i in range(5):
    x2r.append(run_mean(x2[1][i],30))
    plt.plot(x2[0][:10772], x2r[i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(-5,250)
#plt.legend()



plt.figure(figsize=(14,10))

x2r=[]
for i in range(5):
    x2r.append(run_mean(x3[1][i],30))
    plt.plot(x3[0][:10772], x2r[i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(-5,250)
#plt.legend()

plt.figure(figsize=(14,10))


for i in range(4):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(-5,250)
#plt.legend()

plt.figure(figsize=(14,10))


for i in range(4):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(-5,350)
#plt.legend()

plt.figure(figsize=(14,10))


for i in range(6):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(-5,350)
#plt.legend()

plt.figure(figsize=(14,10))


for i in range(6):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(50,350)
#plt.legend()

plt.figure(figsize=(14,10))


for i in range(5):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(50,350)
#plt.legend()

plt.figure(figsize=(14,10))


for i in range(7):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(50,350)
#plt.legend()

plt.figure(figsize=(14,10))


for i in range(6):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(50,350)
#plt.legend()

plt.figure(figsize=(14,10))


for i in range(6):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 10 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(0,350)
#plt.legend()

plt.figure(figsize=(14,10))


for i in range(6):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 6 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(0,350)
#plt.legend()

plt.figure(figsize=(18,10))


for i in range(10):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 6 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(0,350)
#plt.legend()

plt.figure(figsize=(18,10))


for i in range(10):
    plt.plot(x2[0], x2[1][i], label='x-coord. of osc #' + str(i))
plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Desynchronization of 6 oscillators with mild noise (E=0.1)', fontsize=26)
plt.xlim(-10,350)
#plt.legend()

plt.figure(figsize=(16,8))

plt.plot(x1[0], np.mean(x1[1], axis=0), 'k-', label='E=0.05')
plt.plot(x2[0], np.mean(x2[1], axis=0), 'b-', label='E=0.1')
plt.plot(x3[0], np.mean(x3[1], axis=0), 'm-', label='E=0.2')
plt.plot(x4[0], np.mean(x4[1], axis=0), 'r-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Mean (x-coodrinate) of 1000 noisy oscillators with different noise intensities', fontsize=16)
plt.legend()

plt.figure(figsize=(16,8))

plt.plot(x1[0], np.mean(x1[1], axis=0), 'k-', label='E=0.05')
plt.plot(x2[0], np.mean(x2[1], axis=0), 'b-', label='E=0.1')
plt.plot(x3[0], np.mean(x3[1], axis=0), 'm-', label='E=0.2')
plt.plot(x4[0], np.mean(x4[1], axis=0), 'r-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Mean (x-coodrinate) of noisy oscillators', fontsize=26)
plt.legend()

plt.figure(figsize=(14,10))

plt.plot(x1[0], np.mean(x1[1], axis=0), 'k-', label='E=0.05')
plt.plot(x2[0], np.mean(x2[1], axis=0), 'b-', label='E=0.1')
plt.plot(x3[0], np.mean(x3[1], axis=0), 'm-', label='E=0.2')
plt.plot(x4[0], np.mean(x4[1], axis=0), 'r-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Mean (x-coodrinate) of noisy oscillators', fontsize=26)
plt.legend()

plt.figure(figsize=(14,10))

plt.plot(x1[0], np.mean(x1[1], axis=0), 'k-', label='E=0.05')
plt.plot(x2[0], np.mean(x2[1], axis=0), 'b-', label='E=0.1')
plt.plot(x3[0], np.mean(x3[1], axis=0), 'm-', label='E=0.2')
plt.plot(x4[0], np.mean(x4[1], axis=0), 'r-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Mean (x-coodrinate) of noisy oscillators', fontsize=26)
plt.xlim(-10, 400)
plt.legend()

plt.figure(figsize=(14,10))

plt.plot(x1[0], np.mean(x1[1], axis=0), 'k-', label='E=0.05')
plt.plot(x2[0], np.mean(x2[1], axis=0), 'b-', label='E=0.1')
plt.plot(x3[0], np.mean(x3[1], axis=0), 'm-', label='E=0.2')
plt.plot(x4[0], np.mean(x4[1], axis=0), 'r-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.title('Mean (x-coodrinate) of noisy oscillators', fontsize=26)
plt.xlim(-10, 400)
plt.grid()
plt.legend()

plt.figure(figsize=(14,10))

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'ko-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'bo-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'mo-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'ro-', label='E=0.5') 

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
#plt.xlim(0,150)
#plt.ylim(-0.80,1.05)

plt.title('Maxima of means (x-coordinate) of noisy oscillators', fontsize=26)
plt.legend(loc=1)

plt.figure(figsize=(14,10))

m4good = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))


plt.plot(m1[0], m1[1],'ko-', label = 'E=0.05')
plt.plot(m2[0], m2[1],'bo-', label = 'E=0.1')
plt.plot(m3[0], m3[1],'mo-', label = 'E=0.2')
#plt.plot(m4[0], m4[1],'+', label = 'E=0.5 raw')
plt.plot(m4good[0], m4good[1],'ro-', label='E=0.5') 

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
#plt.xlim(0,150)
#plt.ylim(-0.80,1.05)

plt.title('Maxima of means (x-coordinate) of noisy oscillators', fontsize=26)
plt.legend(loc=1)
plt.grid()

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.05,1.2)
#plt.xlim(-5,300)
plt.legend(loc=1)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=26)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)

plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.05,1.2)
#plt.xlim(-5,300)
plt.legend(loc=1)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=26)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=22)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.05,1.2)
#plt.xlim(-5,300)
plt.legend(loc=1)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=26)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=22)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.2)
plt.xlim(-15, 400)
plt.legend(loc=1)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=26)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=22)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.1)
plt.xlim(-15, 400)
plt.legend(loc=1)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=26)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=22)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.1)
plt.xlim(-15, 400)
plt.legend(loc=1)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=20)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.1)
plt.xlim(-15, 400)
plt.legend(loc=1)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=20)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.1)
plt.xlim(-15, 400)
plt.legend(loc=1)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=20)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.1)
plt.xlim(-15, 400)
plt.legend(bbox_to_anchor=(1, 1),
           bbox_transform=plt.gcf().transFigure)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)
           
plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=20)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.1)
plt.xlim(-15, 400)
plt.legend(bbox_to_anchor=(0.9, 0.5), loc=2, borderaxespad=0.)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=20)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.1)
plt.xlim(-15, 400)
plt.legend(bbox_to_anchor=(0.7, 0.5), loc=2, borderaxespad=0.)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=20)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.1)
plt.xlim(-15, 400)
plt.legend(bbox_to_anchor=(0.7, 0.6), loc=2, borderaxespad=0.)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=19)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.1)
plt.xlim(-15, 400)
plt.legend(bbox_to_anchor=(0.8, 0.7), loc=2, borderaxespad=0.)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=19)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.3)
plt.xlim(-15, 400)
plt.legend(bbox_to_anchor=(0.8, 0.7), loc=2, borderaxespad=0.)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=19)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.3)
plt.xlim(-15, 400)
plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3,
           ncol=2, mode="expand", borderaxespad=0.)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)
           
plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=19)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.3)
plt.xlim(-15, 400)
plt.legend(bbox_to_anchor=(0.2, 0.9, 0.8, 0.9), loc=3,
           ncol=2, mode="expand", borderaxespad=0.)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)
           
plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=19)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.3)
plt.xlim(-15, 400)
plt.legend(bbox_to_anchor=(0.05, 0.9, 0.8, 0.9), loc=3,
           ncol=2, mode="expand", borderaxespad=0.)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)
           
plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=20)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.1)
plt.xlim(-15, 400)
plt.legend(loc=1)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=20)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.1)
plt.xlim(-15, 400)
plt.legend()
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=20)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.1)
plt.xlim(-15, 400)
plt.legend(loc=1)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=19)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.1)
plt.xlim(-15, 400)
plt.legend(loc=1)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=21)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.1)
plt.xlim(-15, 400)
plt.legend(loc=1)
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=21)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.1)
plt.xlim(-15, 400)
plt.legend(loc=1)
plt.grid()
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

popt1,pcov1 = curve_fit(lin,xdata1,ydata1)
popt2,pcov2 = curve_fit(lin,xdata2[1:10],ydata2[1:10])
popt3,pcov3 = curve_fit(lin,xdata3[0:5],ydata3[0:5])
popt4,pcov4 = curve_fit(lin,xdata4[0:3],ydata4[0:3])

tangents = [popt1[0],popt2[0],popt3[0], popt4[0]]
nt = norm(tangents)
rt = roundl(tangents,4)
angles = slp2ang(tangents)
plt.rc('legend', fontsize=21)
plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
texttang = ''
for i in rt:
    texttang = texttang+str(i)+' : '
texttang = texttang[:-3]
#plt.text(1,1.1,'The slopes:\n' + texttang)

plt.ylim(-0.2,1.3)
plt.xlim(-15, 400)
plt.legend(loc=1)
plt.grid()
plt.title('Maxima of means (x-coord) of noisy oscillators fitted to the line', fontsize=25)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

# This shit won't work as predicted
#popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev = 10000)
#popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev = 10000)
#popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev = 10000)
#popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev = 10000)

# To obtain these - use Desmos.com
# Copy-paste datapoints from xdata/ydata to the tables; then regression
popt1 = [0.362215, 0.00099855, 0.637115] # R2 = 0.9982
popt2 = [1.27066, 0.000797632, -0.282885] # R2 = 0.9983
popt3 = [1.04445, 0.0052881, -0.032042] # R2 = 0.9984
popt4 = [1.00651, 0.0325793, 0.00844607] # R2 = 0.9837


plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')

plt.legend(loc=1)
plt.title('Means of noisy oscillators fitted to the exponential', fontsize=26)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

# This shit won't work as predicted
#popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev = 10000)
#popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev = 10000)
#popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev = 10000)
#popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev = 10000)

# To obtain these - use Desmos.com
# Copy-paste datapoints from xdata/ydata to the tables; then regression
popt1 = [0.362215, 0.00099855, 0.637115] # R2 = 0.9982
popt2 = [1.27066, 0.000797632, -0.282885] # R2 = 0.9983
popt3 = [1.04445, 0.0052881, -0.032042] # R2 = 0.9984
popt4 = [1.00651, 0.0325793, 0.00844607] # R2 = 0.9837


plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.xlim(-10,400)
plt.ylim(-0.2, 1.2)
plt.legend(loc=1)
plt.title('Means of noisy oscillators fitted to the exponential', fontsize=26)

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

# This shit won't work as predicted
#popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev = 10000)
#popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev = 10000)
#popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev = 10000)
#popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev = 10000)

# To obtain these - use Desmos.com
# Copy-paste datapoints from xdata/ydata to the tables; then regression
popt1 = [0.362215, 0.00099855, 0.637115] # R2 = 0.9982
popt2 = [1.27066, 0.000797632, -0.282885] # R2 = 0.9983
popt3 = [1.04445, 0.0052881, -0.032042] # R2 = 0.9984
popt4 = [1.00651, 0.0325793, 0.00844607] # R2 = 0.9837


plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.xlim(-10,400)
plt.ylim(-0.2, 1.2)
#plt.legend(loc=1)
plt.title('Means of noisy oscillators fitted to the exponential', fontsize=26)
plt.grid()

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

# This shit won't work as predicted
#popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev = 10000)
#popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev = 10000)
#popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev = 10000)
#popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev = 10000)

# To obtain these - use Desmos.com
# Copy-paste datapoints from xdata/ydata to the tables; then regression
popt1 = [0.362215, 0.00099855, 0.637115] # R2 = 0.9982
popt2 = [1.27066, 0.000797632, -0.282885] # R2 = 0.9983
popt3 = [1.04445, 0.0052881, -0.032042] # R2 = 0.9984
popt4 = [1.00651, 0.0325793, 0.00844607] # R2 = 0.9837


plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.xlim(-10,400)
plt.ylim(-0.2, 1.2)
#plt.legend(loc=1)
plt.title('Maxima of means of noisy oscillators fitted to the exponential', fontsize=26)
plt.grid()

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

# This shit won't work as predicted
#popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev = 10000)
#popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev = 10000)
#popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev = 10000)
#popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev = 10000)

# To obtain these - use Desmos.com
# Copy-paste datapoints from xdata/ydata to the tables; then regression
popt1 = [0.362215, 0.00099855, 0.637115] # R2 = 0.9982
popt2 = [1.27066, 0.000797632, -0.282885] # R2 = 0.9983
popt3 = [1.04445, 0.0052881, -0.032042] # R2 = 0.9984
popt4 = [1.00651, 0.0325793, 0.00844607] # R2 = 0.9837


plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, expon(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, expon(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, expon(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, expon(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.xlim(-10,400)
plt.ylim(-0.2, 1.1)
#plt.legend(loc=1)
plt.title('Maxima of means of noisy oscillators fitted to the exponential', fontsize=26)
plt.grid()

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

# This shit won't work as predicted
popt1,pcov1 = curve_fit(quad,xdata1[:3000],ydata1[:3000], maxfev = 10000)
popt2,pcov2 = curve_fit(quad,xdata2[:3000],ydata2[:3000], maxfev = 10000)
popt3,pcov3 = curve_fit(quad,xdata3[:3000],ydata3[:3000], maxfev = 10000)
popt4,pcov4 = curve_fit(quad,xdata4[:3000],ydata4[:3000], maxfev = 10000)

# To obtain these - use Desmos.com
# Copy-paste datapoints from xdata/ydata to the tables; then regression
#popt1 = [0.362215, 0.00099855, 0.637115] # R2 = 0.9982
#popt2 = [1.27066, 0.000797632, -0.282885] # R2 = 0.9983
#popt3 = [1.04445, 0.0052881, -0.032042] # R2 = 0.9984
#popt4 = [1.00651, 0.0325793, 0.00844607] # R2 = 0.9837


plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, quad(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, quad(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, quad(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, quad(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.xlim(-10,400)
plt.ylim(-0.2, 1.1)
#plt.legend(loc=1)
plt.title('Maxima of means of noisy oscillators fitted to the quadratic', fontsize=26)
plt.grid()

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

# This shit won't work as predicted
popt1,pcov1 = curve_fit(quad,xdata1[:3000],ydata1[:3000], maxfev = 10000)
popt2,pcov2 = curve_fit(quad,xdata2[:3000],ydata2[:3000], maxfev = 10000)
popt3,pcov3 = curve_fit(quad,xdata3[:3000],ydata3[:3000], maxfev = 10000)
popt4,pcov4 = curve_fit(quad,xdata4[:2000],ydata4[:2000], maxfev = 10000)

# To obtain these - use Desmos.com
# Copy-paste datapoints from xdata/ydata to the tables; then regression
#popt1 = [0.362215, 0.00099855, 0.637115] # R2 = 0.9982
#popt2 = [1.27066, 0.000797632, -0.282885] # R2 = 0.9983
#popt3 = [1.04445, 0.0052881, -0.032042] # R2 = 0.9984
#popt4 = [1.00651, 0.0325793, 0.00844607] # R2 = 0.9837


plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, quad(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, quad(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, quad(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, quad(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.xlim(-10,400)
plt.ylim(-0.2, 1.1)
#plt.legend(loc=1)
plt.title('Maxima of means of noisy oscillators fitted to the quadratic', fontsize=26)
plt.grid()

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

# This shit won't work as predicted
popt1,pcov1 = curve_fit(quad,xdata1[:3000],ydata1[:3000], maxfev = 10000)
popt2,pcov2 = curve_fit(quad,xdata2[:3000],ydata2[:3000], maxfev = 10000)
popt3,pcov3 = curve_fit(quad,xdata3[:3000],ydata3[:3000], maxfev = 10000)
popt4,pcov4 = curve_fit(quad,xdata4[:2000],ydata4[:2000], maxfev = 10000)

# To obtain these - use Desmos.com
# Copy-paste datapoints from xdata/ydata to the tables; then regression
#popt1 = [0.362215, 0.00099855, 0.637115] # R2 = 0.9982
#popt2 = [1.27066, 0.000797632, -0.282885] # R2 = 0.9983
#popt3 = [1.04445, 0.0052881, -0.032042] # R2 = 0.9984
#popt4 = [1.00651, 0.0325793, 0.00844607] # R2 = 0.9837


plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, quad(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, quad(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, quad(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, quad(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
#plt.xlim(-10,400)
plt.ylim(-0.2, 1.1)
#plt.legend(loc=1)
plt.title('Maxima of means of noisy oscillators fitted to the quadratic', fontsize=26)
plt.grid()

plt.figure(figsize=(14,10))

m1 = me4 (run_mean (np.mean(x1[1], axis=0), 30, 0)) # Smoothened (30,1)
m2 = me4 (run_mean (np.mean(x2[1], axis=0), 30, 0))
m3 = me4 (run_mean (np.mean(x3[1], axis=0), 30, 0))
m4 = me4 (run_mean (np.mean(x4[1], axis=0), 30, 1)) # Smoothened (30,2)
#m4_BAD = me4 (run_mean (np.mean(x4[1], axis=0), 30, 0))

xdata1 = np.array(m1[0])
ydata1 = np.array(m1[1])
xdata2 = np.array(m2[0])
ydata2 = np.array(m2[1])
xdata3 = np.array(m3[0])
ydata3 = np.array(m3[1])
xdata4 = np.array(m4[0])
ydata4 = np.array(m4[1])

# This shit won't work as predicted
popt1,pcov1 = curve_fit(quad,xdata1[:3000],ydata1[:3000], maxfev = 10000)
popt2,pcov2 = curve_fit(quad,xdata2[:3000],ydata2[:3000], maxfev = 10000)
popt3,pcov3 = curve_fit(quad,xdata3[:3000],ydata3[:3000], maxfev = 10000)
popt4,pcov4 = curve_fit(quad,xdata4[:2000],ydata4[:2000], maxfev = 10000)

# To obtain these - use Desmos.com
# Copy-paste datapoints from xdata/ydata to the tables; then regression
#popt1 = [0.362215, 0.00099855, 0.637115] # R2 = 0.9982
#popt2 = [1.27066, 0.000797632, -0.282885] # R2 = 0.9983
#popt3 = [1.04445, 0.0052881, -0.032042] # R2 = 0.9984
#popt4 = [1.00651, 0.0325793, 0.00844607] # R2 = 0.9837


plt.plot(xdata1,ydata1, 'ko', label = 'E=0.05 maxima')
plt.plot(xdata1, quad(xdata1, *popt1), 'k--', label = 'fit')
plt.plot(xdata2,ydata2, 'bo', label = 'E=0.1 maxima')
plt.plot(xdata2, quad(xdata2, *popt2), 'b--', label = 'fit')
plt.plot(xdata3,ydata3, 'mo', label = 'E=0.2 maxima')
plt.plot(xdata3, quad(xdata3, *popt3),'m--', label = 'fit')
plt.plot(xdata4,ydata4, 'ro', label = 'E=0.5 maxima')
plt.plot(xdata4, quad(xdata4, *popt4), 'r--', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('x-coordinate')
plt.xlim(-10,400)
plt.ylim(-0.2, 1.1)
#plt.legend(loc=1)
plt.title('Maxima of means of noisy oscillators fitted to the quadratic', fontsize=26)
plt.grid()

plt.figure(figsize=(14,10))

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), 'k-', label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1),'k-', label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2),'k-', label = 'E=0.05')
plt.plot (x2[0][:10562], run_mean(np.var(x2[1],axis=0),240), 'b-',label = 'E=0.1')
plt.plot (x3[0][:10562], run_mean(np.var(x3[1],axis=0),240),'m-', label = 'E=0.2')
plt.plot (x4[0][:10562], run_mean(np.var(x4[1],axis=0),240),'r-', label = 'E=0.5')
#plt.plot(x4[0][0:100],np.var(x4[1], axis=0)[0:100], 'r-')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of noisy oscillators (smoothened)', fontsize=26)
plt.legend(loc=1)
plt.show()

plt.figure(figsize=(14,10))

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), 'k-', label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1),'k-', label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2),'k-', label = 'E=0.05')
plt.plot (x2[0][:10562], run_mean(np.var(x2[1],axis=0),240), 'b-',label = 'E=0.1')
plt.plot (x3[0][:10562], run_mean(np.var(x3[1],axis=0),240),'m-', label = 'E=0.2')
plt.plot (x4[0][:10562], run_mean(np.var(x4[1],axis=0),240),'r-', label = 'E=0.5')
#plt.plot(x4[0][0:100],np.var(x4[1], axis=0)[0:100], 'r-')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of noisy oscillators (smoothened)', fontsize=26)
plt.legend(loc=1)
plt.grid()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), 'k-', label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1),'k-', label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2),'k-', label = 'E=0.05')
plt.plot (x2[0][:10562], run_mean(np.var(x2[1],axis=0),240), 'b-',label = 'E=0.1')
plt.plot (x3[0][:10562], run_mean(np.var(x3[1],axis=0),240),'m-', label = 'E=0.2')
plt.plot (x4[0][:10562], run_mean(np.var(x4[1],axis=0),240),'r-', label = 'E=0.5')
#plt.plot(x4[0][0:100],np.var(x4[1], axis=0)[0:100], 'r-')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of noisy oscillators (smoothened)', fontsize=26)
plt.legend(loc=1)
plt.ylim(-0.04, 0.82)
plt.grid()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (x1[0][:10562], run_mean(np.var(x1[1],axis=0),240), 'k-', label = 'E=0.05')
#plt.plot (x1[0][:10323], run_mean(np.var(x1[1],axis=0),240,1),'k-', label = 'E=0.05')
#plt.plot (x1[0][:9364], run_mean(np.var(x1[1],axis=0),240,2),'k-', label = 'E=0.05')
plt.plot (x2[0][:10562], run_mean(np.var(x2[1],axis=0),240), 'b-',label = 'E=0.1')
plt.plot (x3[0][:10562], run_mean(np.var(x3[1],axis=0),240),'m-', label = 'E=0.2')
plt.plot (x4[0][:10562], run_mean(np.var(x4[1],axis=0),240),'r-', label = 'E=0.5')
#plt.plot(x4[0][0:100],np.var(x4[1], axis=0)[0:100], 'r-')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.title('Variance (x-coodrinate) of noisy oscillators (smoothened)', fontsize=26)
plt.legend(loc=1)
plt.ylim(-0.04, 0.82)
plt.xlim(-10, 400)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=1)
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
#plt.legend(loc=1)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(quad,xdata1[:7000],ydata1[:7000])
popt2,pcov2 = curve_fit(quad,xdata2[:5000],ydata2[:5000])
popt3,pcov3 = curve_fit(quad,xdata3[:3000],ydata3[:3000])
popt4,pcov4 = curve_fit(quad,xdata4[:1000],ydata4[:1000])


plt.figure(figsize=(14,10))

plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,quad(xdata1,*popt1),'k-', label = 'fit')

plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,quad(xdata2,*popt2),'b-', label = 'fit')

plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,quad(xdata3,*popt3),'m-', label = 'fit')

plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,quad(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
#plt.legend(loc=1)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev=10000)

#### R-squared statistical metric
rsq=[]
rsq.append(r_sq(expon,xdata1,ydata1,popt1))
rsq.append(r_sq(expon,xdata2,ydata2,popt2))
rsq.append(r_sq(expon,xdata3,ydata3,popt3))
rsq.append(r_sq(expon,xdata4,ydata4,popt4))

plt.figure(figsize=(16,8))

plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,expon(xdata1,*popt1),'k-', label = 'E=0.05 fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,expon(xdata2,*popt2),'b-', label = 'E=0.1 fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,expon(xdata3,*popt3),'m-', label = 'E=0.2 fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,expon(xdata4,*popt4),'r-', label = 'E=0.5 fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the exponential', fontsize=26)
#plt.legend(loc=1)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(expon,xdata1,ydata1, maxfev=10000)
popt2,pcov2 = curve_fit(expon,xdata2,ydata2, maxfev=10000)
popt3,pcov3 = curve_fit(expon,xdata3,ydata3, maxfev=10000)
popt4,pcov4 = curve_fit(expon,xdata4,ydata4, maxfev=10000)

#### R-squared statistical metric
rsq=[]
rsq.append(r_sq(expon,xdata1,ydata1,popt1))
rsq.append(r_sq(expon,xdata2,ydata2,popt2))
rsq.append(r_sq(expon,xdata3,ydata3,popt3))
rsq.append(r_sq(expon,xdata4,ydata4,popt4))

plt.figure(figsize=(14,10))

plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,expon(xdata1,*popt1),'k-', label = 'E=0.05 fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,expon(xdata2,*popt2),'b-', label = 'E=0.1 fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,expon(xdata3,*popt3),'m-', label = 'E=0.2 fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,expon(xdata4,*popt4),'r-', label = 'E=0.5 fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the exponential', fontsize=26)
#plt.legend(loc=1)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(quad,xdata1[:7000],ydata1[:7000])
popt2,pcov2 = curve_fit(quad,xdata2[:5000],ydata2[:5000])
popt3,pcov3 = curve_fit(quad,xdata3[:3000],ydata3[:3000])
popt4,pcov4 = curve_fit(quad,xdata4[:1000],ydata4[:1000])


plt.figure(figsize=(14,10))

plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,quad(xdata1,*popt1),'k-', label = 'fit')

plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,quad(xdata2,*popt2),'b-', label = 'fit')

plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,quad(xdata3,*popt3),'m-', label = 'fit')

plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,quad(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the quadratic', fontsize=26)
#plt.legend(loc=1)
plt.grid()
plt.show()

ph1 = phvar(x1[1])[0]
ph2 = phvar(x2[1])[0]
ph3 = phvar(x3[1])[0]
ph4 = phvar(x4[1])[0]

plt.plot(x1[0], ph1, 'k-', label='E=0.05')
plt.plot(x2[0], ph2, 'b-', label='E=0.1')
plt.plot(x3[0], ph3, 'm-', label='E=0.2')
plt.plot(x4[0], ph4, 'r-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 oscillators with different noise intensities', fontsize=16)
plt.legend()

n=1000
t6 = np.linspace(0,600,600*20)
state06 = [1,0]*n
params6 = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)

x1 = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/2nd attempt/1000 oscillators with E 0.05 and state0 [1,0] v2.npy")
x2 = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/2nd attempt/1000 oscillators with E 0.1 and state0 [1,0] v2.npy")
x3 = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/2nd attempt/1000 oscillators with E 0.2 and state0 [1,0] v2.npy")
x4 = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/2nd attempt/1000 oscillators with E 0.5 and state0 [1,0] v2.npy")
del x1,x2,x3,x4
x1 = x61
x2 = x62
x3 = x63
x4 = x64
del x1x,x2x,x3x,x4x
plt.figure(figsize=(16,8))

ph1 = phvar(x1[1])[0]
ph2 = phvar(x2[1])[0]
ph3 = phvar(x3[1])[0]
ph4 = phvar(x4[1])[0]

plt.plot(x1[0], ph1, 'k-', label='E=0.05')
plt.plot(x2[0], ph2, 'b-', label='E=0.1')
plt.plot(x3[0], ph3, 'm-', label='E=0.2')
plt.plot(x4[0], ph4, 'r-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of 1000 oscillators with different noise intensities', fontsize=16)
plt.legend()

plt.figure(figsize=(14,10))

plt.plot(x1[0][:10562], run_mean(ph1, 240), 'k-', label='E=0.05')
plt.plot(x2[0][:10562], run_mean(ph2, 240), 'b-', label='E=0.1')
plt.plot(x3[0][:10562], run_mean(ph3, 240), 'm-', label='E=0.2')
plt.plot(x4[0][:10562], run_mean(ph4, 240), 'r-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of noisy oscillators (smoothened)', fontsize=26)
plt.grid()
plt.legend()

plt.figure(figsize=(14,10))

plt.plot(x1[0][:10562], run_mean(ph1, 240), 'k-', label='E=0.05')
plt.plot(x2[0][:10562], run_mean(ph2, 240), 'b-', label='E=0.1')
plt.plot(x3[0][:10562], run_mean(ph3, 240), 'm-', label='E=0.2')
plt.plot(x4[0][:10562], run_mean(ph4, 240), 'r-', label='E=0.5')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of noisy oscillators (smoothened)', fontsize=26)
plt.grid()
#plt.legend()
plt.xlim(-10, 400)
plt.ylim(-50,2900)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2[:3000],ydata2[:3000], maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3[:700],ydata3[:700], maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4[:300],ydata4[:300], maxfev=10000)

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of noisy oscillators fitted to the line', fontsize=26)
plt.grid()
#plt.legend()
plt.xlim(-10, 400)
plt.ylim(-50,2900)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2[:3000],ydata2[:3000], maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3[:700],ydata3[:700], maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4[:300],ydata4[:300], maxfev=10000)

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of noisy oscillators fitted to the line', fontsize=26)
plt.grid()
plt.legend()
plt.xlim(-10, 400)
plt.ylim(-50,2900)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2[:3000],ydata2[:3000], maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3[:700],ydata3[:700], maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4[:300],ydata4[:300], maxfev=10000)

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of noisy oscillators fitted to the line', fontsize=26)
plt.grid()
plt.legend()
plt.xlim(-10, 400)
plt.ylim(-50,2900)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2[:3000],ydata2[:3000], maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3[:700],ydata3[:700], maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4[:300],ydata4[:300], maxfev=10000)

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of noisy oscillators fitted to the line', fontsize=26)
plt.grid()
plt.legend(loc=3)
plt.xlim(-10, 400)
plt.ylim(-50,2900)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2[:3000],ydata2[:3000], maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3[:700],ydata3[:700], maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4[:300],ydata4[:300], maxfev=10000)

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of noisy oscillators fitted to the line', fontsize=26)
plt.grid()
plt.legend(loc=4)
plt.xlim(-10, 400)
plt.ylim(-50,2900)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(quad,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2[:3000],ydata2[:3000], maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3[:700],ydata3[:700], maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4[:300],ydata4[:300], maxfev=10000)

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, quad(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, quad(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, quad(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, quad(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of noisy oscillators fitted to the quadratic', fontsize=26)
plt.grid()
#plt.legend(loc=4)
plt.xlim(-10, 400)
plt.ylim(-50,2900)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(quad,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2[:3500],ydata2[:3500], maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3[:900],ydata3[:900], maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4[:400],ydata4[:400], maxfev=10000)

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, quad(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, quad(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, quad(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, quad(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of noisy oscillators fitted to the quadratic', fontsize=26)
plt.grid()
#plt.legend(loc=4)
plt.xlim(-10, 400)
plt.ylim(-50,2900)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(quad,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2[:4000],ydata2[:4000], maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3[:900],ydata3[:900], maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4[:400],ydata4[:400], maxfev=10000)

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, quad(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, quad(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, quad(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, quad(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of noisy oscillators fitted to the quadratic', fontsize=26)
plt.grid()
#plt.legend(loc=4)
plt.xlim(-10, 400)
plt.ylim(-50,2900)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

#popt1,pcov1 = curve_fit(expon, xdata1[:6000], ydata1[:6000], maxfev=10000)
#popt2,pcov2 = curve_fit(expon, xdata2[:3000], ydata2[:3000], maxfev=10000)
#popt3,pcov3 = curve_fit(expon, xdata3[:700], ydata3[:700], maxfev=10000)
#popt4,pcov4 = curve_fit(expon, xdata4[:300], ydata4[:300], maxfev=10000)

popt1 = [-4838.26, 0.000317081, 4856.2] #R^2 = 0.9994
popt2 = [-2840, 0.0022, 2900] #R2 = 0.9984 # This one I fitted almost manually

popt3 = [-2592.47, 0.0109569, 2708.4]   #R^2 = 0.9993
popt4 = [-1828.32, 0.0711882, 2660.94]  #R^2 = 0.9978

# Coefficients and R2 are from Desmos.com
# Using ydata4Desmos = [ydata4[i] for i in range(2000) if i%50==0]
# xdata4Desmos = [xdata4[i] for i in range(2000) if i%50==0]
# ydata3Desmos = [ydata3[i] for i in range(8000) if i%170==0]
# xdata3Desmos = [xdata3[i] for i in range(8000) if i%170==0]
# ydata1Desmos = [ydata1[i] for i in range(9000) if i%190==0]
# xdata1Desmos = [xdata1[i] for i in range(9000) if i%190==0]


plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('Phase variance')
plt.title('Variance of phase of noisy oscillators fitted to the exponential', fontsize=26)
plt.grid()
#plt.legend(loc=4)
plt.xlim(-10, 400)
plt.ylim(-50,2900)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

#popt1,pcov1 = curve_fit(expon, xdata1[:6000], ydata1[:6000], maxfev=10000)
#popt2,pcov2 = curve_fit(expon, xdata2[:3000], ydata2[:3000], maxfev=10000)
#popt3,pcov3 = curve_fit(expon, xdata3[:700], ydata3[:700], maxfev=10000)
#popt4,pcov4 = curve_fit(expon, xdata4[:300], ydata4[:300], maxfev=10000)

popt1 = [-4838.26, 0.000317081, 4856.2] #R^2 = 0.9994
popt2 = [-2840, 0.0022, 2900] #R2 = 0.9984 # This one I fitted almost manually

popt3 = [-2592.47, 0.0109569, 2708.4]   #R^2 = 0.9993
popt4 = [-1828.32, 0.0711882, 2660.94]  #R^2 = 0.9978

# Coefficients and R2 are from Desmos.com
# Using ydata4Desmos = [ydata4[i] for i in range(2000) if i%50==0]
# xdata4Desmos = [xdata4[i] for i in range(2000) if i%50==0]
# ydata3Desmos = [ydata3[i] for i in range(8000) if i%170==0]
# xdata3Desmos = [xdata3[i] for i in range(8000) if i%170==0]
# ydata1Desmos = [ydata1[i] for i in range(9000) if i%190==0]
# xdata1Desmos = [xdata1[i] for i in range(9000) if i%190==0]


plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, expon(xdata1, *popt1), 'k-', label = 'fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, expon(xdata2, *popt2), 'b-', label = 'fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, expon(xdata3, *popt3),'m-', label = 'fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, expon(xdata4, *popt4), 'r-', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('Variance of phase')
plt.title('Variance of phase of noisy oscillators fitted to the exponential', fontsize=26)
plt.grid()
#plt.legend(loc=4)
plt.xlim(-10, 400)
plt.ylim(-50,2900)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(lin,xdata2[:3000],ydata2[:3000], maxfev=10000)
popt3,pcov3 = curve_fit(lin,xdata3[:700],ydata3[:700], maxfev=10000)
popt4,pcov4 = curve_fit(lin,xdata4[:300],ydata4[:300], maxfev=10000)

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, lin(xdata1, *popt1), 'k-', label = 'fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, lin(xdata2, *popt2), 'b-', label = 'fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, lin(xdata3, *popt3),'m-', label = 'fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, lin(xdata4, *popt4), 'r-', label = 'fit')

plt.xlabel('time, hours')
plt.ylabel('Variance of phase')
plt.title('Variance of phase of noisy oscillators fitted to the line', fontsize=26)
plt.grid()
plt.legend(loc=4)
plt.xlim(-10, 400)
plt.ylim(-50,2900)

xdata1 = np.array(x1[0][:10562])
xdata2 = np.array(x2[0][:10562])
xdata3 = np.array(x3[0][:10562])
xdata4 = np.array(x4[0][:10562])

ydata1 = run_mean(ph1, 240)
ydata2 = run_mean(ph2, 240)
ydata3 = run_mean(ph3, 240)
ydata4 = run_mean(ph4, 240)

popt1,pcov1 = curve_fit(quad,xdata1[:6000],ydata1[:6000], maxfev=10000)
popt2,pcov2 = curve_fit(quad,xdata2[:4000],ydata2[:4000], maxfev=10000)
popt3,pcov3 = curve_fit(quad,xdata3[:900],ydata3[:900], maxfev=10000)
popt4,pcov4 = curve_fit(quad,xdata4[:400],ydata4[:400], maxfev=10000)

plt.figure(figsize=(14,10))

plt.plot(xdata1,ydata1, 'k--', label = 'E=0.05')
plt.plot(xdata1, quad(xdata1, *popt1), 'k-', label = 'E=0.05 fit')
plt.plot(xdata2,ydata2, 'b--', label = 'E=0.1')
plt.plot(xdata2, quad(xdata2, *popt2), 'b-', label = 'E=0.1 fit')
plt.plot(xdata3,ydata3, 'm--', label = 'E=0.2')
plt.plot(xdata3, quad(xdata3, *popt3),'m-', label = 'E=0.2 fit')
plt.plot(xdata4,ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4, quad(xdata4, *popt4), 'r-', label = 'E=0.5 fit')

plt.xlabel('time, hours')
plt.ylabel('Variance of phase')
plt.title('Variance of phase of noisy oscillators fitted to the quadratic', fontsize=26)
plt.grid()
#plt.legend(loc=4)
plt.xlim(-10, 400)
plt.ylim(-50,2900)

n=1000
t = np.linspace(0,600,600*20)
state0 = [1,0]*n
params = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)


x1=[[],[]]
x2=[[],[]]
x3=[[],[]]
x4=[[],[]]

x1[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0].npy")
x2[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0].npy")
x3[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0].npy")
x4[1] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0].npy")

x1[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.05 and state0 [1,0] time.npy")
x2[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.1 and state0 [1,0] time.npy")
x3[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.2 and state0 [1,0] time.npy")
x4[0] = np.load("/home/kalashnikov/Code/Variables for my code/Noise/Other state0/1000 oscillators with E 0.5 and state0 [1,0] time.npy")

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=1)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=4)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=4, mode='expand')
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=4, mode='expand',ncol=2)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=4, mode='expand',ncol=4)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=4, mode='expand',ncol=8)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=(250,0.6), mode='expand',ncol=8)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=(0.8,0.6), mode='expand',ncol=8)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=(0.5,0.7), mode='expand',ncol=4)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.rc('legend', fontsize=20)

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=(0.45,0.75), mode='expand',ncol=4)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.rc('legend', fontsize=20)

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=(0.43,0.70),ncol=2)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.rc('legend', fontsize=20)

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=(0.53,0.68),ncol=2)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.rc('legend', fontsize=20)

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=(0.58,0.68),ncol=2)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.rc('legend', fontsize=20)

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=(0.58,0.67),ncol=2)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.rc('legend', fontsize=22)

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=(0.58,0.67),ncol=2)
plt.grid()
plt.show()

xdata1 = x1[0][:10562]
xdata2 = x2[0][:10562]
xdata3 = x3[0][:10562]
xdata4 = x4[0][:10562]

ydata1 = run_mean(np.var(x1[1],axis=0),240)
ydata2 = run_mean(np.var(x2[1],axis=0),240)
ydata3 = run_mean(np.var(x3[1],axis=0),240)
ydata4 = run_mean(np.var(x4[1],axis=0),240)

popt1,pcov1 = curve_fit(lin,xdata1[:6000],ydata1[:6000])
popt2,pcov2 = curve_fit(lin,xdata2[:4000],ydata2[:4000])
popt3,pcov3 = curve_fit(lin,xdata3[:2000],ydata3[:2000])
popt4,pcov4 = curve_fit(lin,xdata4[:400],ydata4[:400])

plt.rc('legend', fontsize=22)

plt.figure(figsize=(14,10))
plt.plot (xdata1, ydata1, 'k--',label = 'E=0.05')
plt.plot(xdata1,lin(xdata1,*popt1),'k-', label = 'fit')
plt.plot (xdata2, ydata2,'b--', label = 'E=0.1')
plt.plot(xdata2,lin(xdata2,*popt2),'b-', label = 'fit')
plt.plot (xdata3, ydata3,'m--', label = 'E=0.2')
plt.plot(xdata3,lin(xdata3,*popt3),'m-', label = 'fit')
plt.plot (xdata4, ydata4, 'r--', label = 'E=0.5')
plt.plot(xdata4,lin(xdata4,*popt4),'r-', label = 'fit')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')
plt.ylim(-0.04,0.82)
plt.xlim(-10,400)
plt.title('Variance of x-coord of noisy oscillators fitted to the line', fontsize=26)
plt.legend(loc=(0.55,0.67),ncol=2)
plt.grid()
plt.show()

n=2
t = np.linspace(0, 100, 1000)
state0 = [1,0]*n
x01 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

n=2
t = np.linspace(0, 100, 1000)
state0 = [1,0]*n
x01 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n, [0.0]*n)))

x01x = sep(x01)[0]
plt.plot (t, phvar(x1)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x01)[0], label = 'sigma=0.5')
n=2
t = np.linspace(0, 400, 4000)
state0 = [1,0]*n
x01 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n, [0.0]*n)))

plt.plot (t, phvar(x01)[0], label = 'sigma=0.5')
n=2
t = np.linspace(0, 1000, 1000)
state0 = [1,0]*n
x01 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 0.5*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n, [0.0]*n)))

plt.plot (t, phvar(x01)[0], label = 'sigma=0.5')
n=2
t = np.linspace(0, 1000, 1000)
state0 = [1,0]*n
x01 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(26), (np.pi*2)/(22)],[0.0]*n,[0.0]*n, [0.0]*n)))

plt.plot (t, phvar(x01)[0], label = 'sigma=0.5')
plt.plot (t, phvar(x01)[0], label = 'sigma=0.5')
plt.xlim(0,100)

plt.plot (t, phvar(x01)[0], label = 'sigma=0.5')
plt.xlim(0,200)

n=2
t = np.linspace(0, 1000, 1000)
state0 = [1,0]*n
x01 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(25.5), (np.pi*2)/(22.5)],[0.0]*n,[0.0]*n, [0.0]*n)))

plt.plot (t, phvar(x01)[0], label = 'sigma=0.5')
plt.xlim(0,200)

plt.plot (t, phvar(x01)[0], label = 'sigma=0.5')
plt.xlim(0,400)

plt.figure(figsize=(14,10))
plt.plot (t, phvar(x01)[0], label = 'sigma=0.5')
plt.xlim(0,200)
plt.grid()
plt.title('Phase variance of 2 oscillators slightly different in phase')

plt.figure(figsize=(14,10))
plt.plot (t, phvar(x01)[0], label = 'sigma=0.5')
plt.xlim(0,400)
plt.grid()
plt.title('Phase variance of 2 oscillators slightly different in phase')

plt.figure(figsize=(14,10))
plt.plot (t, phvar(x01)[0], label = 'sigma=0.5')
plt.xlim(0,400)
plt.ylabel('Variance of phase')
plt.xlabel('time, hours')
plt.grid()
plt.title('Phase variance of 2 oscillators slightly different in phase')

n001=1
params001 = ([0.1],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x001 = odeint(oscillator_system, [1,0] , t001, args=(params001))

fig, (ax1, ax2) = plt.subplots(2, sharey=True)
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

n001=1
params001 = ([0.1],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x001 = odeint(oscillator_system, [1,0] , t001, args=(params001))

fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(14, 10))
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o')
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

n001=1
params001 = ([0.1],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x001 = odeint(oscillator_system, [1,0] , t001, args=(params001))

fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(14, 10))
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o', markersize=3)
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

n001=1
params001 = ([0.1],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x001 = odeint(oscillator_system, [1,0] , t001, args=(params001))

fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(14, 10))
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o', markersize=100)
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

n001=1
params001 = ([0.1],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x001 = odeint(oscillator_system, [1,0] , t001, args=(params001))

fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(14, 10))
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o', markersize=20)
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o')
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

n001=1
params001 = ([0.1],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x001 = odeint(oscillator_system, [1,0] , t001, args=(params001))

fig, (ax1, ax2) = plt.subplots(2, sharey=True, figsize=(14, 10))
ax1.grid()
ax1.plot(t001,x001[:,0], label='')
ax1.plot(t001[359], x001[:,0][359], 'o', markersize=15)
ax1.set(title='Time series for 2-dimentional oscillator', ylabel='x-coordinate (t)')

ax2.plot(t001,x001[:,1], label='')
ax2.plot(t001[359], x001[:,1][359], 'o', markersize=15)
ax2.set(xlabel='time, hours',ylabel='y-coordinate (t)')
ax2.grid()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], linewidth=1.5, label='limit cycle')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', label='state at 26.9h')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r", label='radius')
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot')
plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.legend()
plt.show()

plt.figure(figsize = (7,7))
plt.plot(x001[:,0],x001[:,1], linewidth=1.5, label='limit cycle')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', label='state at 26.9h')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r", label='radius')
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot')
#plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.legend()
plt.show()

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], linewidth=1.5, label='limit cycle')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', label='state at 26.9h')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r", label='radius')
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot', fontsize=26)
#plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
#plt.legend()
plt.show()

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], linewidth=1.5, label='limit cycle')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', markersize=15, label='state at 26.9h')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r", label='radius')
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot', fontsize=26)
#plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
#plt.legend()
plt.show()

params001 = ([0.1],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x002 = odeint(oscillator_system, [1,1] , t001, args=(params001))

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], linewidth=2, 'b-', label='limit cycle')
plt.plot(x002[:,0],x002[:,1], linewidth=2, 'b--', label='limit cycle')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', markersize=15, label='state at 26.9h')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r", label='radius')
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot', fontsize=26)
#plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
#plt.legend()
plt.show()
params001 = ([0.1],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x002 = odeint(oscillator_system, [1,1] , t001, args=(params001))

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], 'b-', linewidth=2,  label='limit cycle')
plt.plot(x002[:,0],x002[:,1], 'b--', linewidth=2,  label='limit cycle')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', markersize=15, label='state at 26.9h')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r", label='radius')
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot', fontsize=26)
#plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
#plt.legend()
plt.show()

params001 = ([0.3],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x002 = odeint(oscillator_system, [1,1] , t001, args=(params001))

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], 'b-', linewidth=2,  label='limit cycle')
plt.plot(x002[:,0],x002[:,1], 'b--', linewidth=2,  label='limit cycle')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', markersize=15, label='state at 26.9h')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r", label='radius')
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot', fontsize=26)
#plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
#plt.legend()
plt.show()

params001 = ([0.3],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x002 = odeint(oscillator_system, [1,1] , t001, args=(params001))

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], 'b-', linewidth=2,  label='limit cycle')
plt.plot(x002[:,0],x002[:,1], 'b--', linewidth=2,  label='Displace from limit cycle')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', markersize=15, label='state at 26.9h')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r", label='radius')
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot', fontsize=26)
#plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.legend(bbox_to_anchor=(1.05, 1))
plt.show()

params001 = ([0.3],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x002 = odeint(oscillator_system, [1,1] , t001, args=(params001))

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], 'b-', linewidth=2,  label='limit cycle')
plt.plot(x002[:,0],x002[:,1], 'b--', linewidth=2,  label='displace from limit cycle')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', markersize=15, label='state at 26.9h')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r", label='radius/amplitude')
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot', fontsize=26)
#plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.legend(bbox_to_anchor=(1.05, 1))
plt.show()

params001 = ([0.3],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x002 = odeint(oscillator_system, [1,1] , t001, args=(params001))

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], 'b-', linewidth=2,  label='limit cycle')
plt.plot(x002[:,0],x002[:,1], 'b--', linewidth=2,  label='displace from limit cycle')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', markersize=15, label='state at 26.9h')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r", label='radius/amplitude')
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot', fontsize=26)
#plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.legend(bbox_to_anchor=(1.01, 1))
plt.show()

params001 = ([0.3],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x002 = odeint(oscillator_system, [1,1] , t001, args=(params001))

plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], 'b-', linewidth=2,  label='limit cycle')
plt.plot(x002[:,0],x002[:,1], 'b--', linewidth=2,  label='displace from limit cycle')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', markersize=15, label='state at 26.9h')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r", label='radius/amplitude')
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot', fontsize=26)
#plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.legend(bbox_to_anchor=(1.005, 1))
plt.show()

params001 = ([0.3],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x002 = odeint(oscillator_system, [1,1] , t001, args=(params001))
plt.rc('legend', fontsize=20)
plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], 'b-', linewidth=2,  label='limit cycle')
plt.plot(x002[:,0],x002[:,1], 'b--', linewidth=2,  label='displace from limit cycle')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', markersize=15, label='state at 26.9h')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r", label='radius/amplitude')
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot', fontsize=26)
#plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.legend(bbox_to_anchor=(1.005, 1))
plt.show()

params001 = ([0.3],[1], [(np.pi*2)/24], [0.0], [0.0], [0.0])
t001 = np.linspace(0,50,500)
x002 = odeint(oscillator_system, [1,1] , t001, args=(params001))
plt.rc('legend', fontsize=20)
plt.figure(figsize = (10,10))
plt.plot(x001[:,0],x001[:,1], 'b-', linewidth=2,  label='limit cycle')
plt.plot(x002[:,0],x002[:,1], 'b--', linewidth=2,  label='displace from it')
plt.plot(x001[:,0][269],x001[:,1][269],'ro', markersize=15, label='state at 26.9h')
plt.plot([0,x001[:,0][269]],[0,x001[:,1][269]], '-', linewidth=0.7, color="r", label='radius/amplitude')
plt.plot([-3,3],[0,0],'k-')
plt.plot([0,0],[-3,3],'k-')
plt.ylabel('y-coordinate (t)')
plt.xlabel('x-coordinate (t)')
plt.xlim(-1.5,1.5)
plt.ylim(-1.5,1.5)
plt.title('Phase plane plot', fontsize=26)
#plt.text(0.6,0.85, '(0.71,0.69)\n 26.9h from (1,0)')
plt.grid()
plt.legend(bbox_to_anchor=(1.005, 1))
plt.show()

n=10
t = np.linspace(0, 1000, 1000)
state0 = [1,0]*n
x01 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)], (np.pi*2)/(22.5)],[0.0]*n,[0.0]*n, [0.0]*n)))
n=10
t = np.linspace(0, 1000, 1000)
state0 = [1,0]*n
x03 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n, [0.0]*n)))

plt.plot(x03)
plt.plot(x03)
plt.xlim(0,100)

plt.plot(x03)
plt.xlim(0,60)

plt.plot(t,x03)
plt.xlim(0,60)

x03x = sep(x03)[0]
plt.plot(t,x03x)
plt.xlim(0,60)

for i in range(10):
    plt.plot(t,x03x[i])
plt.xlim(0,60)

for i in range(10):
    plt.plot(t,x03x[i])
plt.xlim(0,100)

n=10
t = np.linspace(0, 1000, 1000)
state0 = [1,0]*n
x03 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n, [0.0]*n)))
x03x = sep(x03)[0]
for i in range(10):
    plt.plot(t,x03x[i])
plt.xlim(0,100)

plt.figure (figsize=(14,10))
for i in range(10):
    plt.plot(t,x03x[i])
plt.xlim(0,100)
plt.grid()
plt.ylabel('x-coordinate')
plt.xlabel('time, hours')
plt.title('Desync in heterogenous system, N=10', fontsize=26)

plt.figure (figsize=(14,10))
for i in range(10):
    plt.plot(t,x03x[i])
plt.xlim(0,100)
#plt.grid()
plt.ylabel('x-coordinate')
plt.xlabel('time, hours')
plt.title('Desync in heterogenous system, N=10', fontsize=26)

n=1
t9 = np.linspace(0,100,100*20)
state09 = [1,0]*n
params9 = ([0.1]*n,[1]*n,[(np.pi*2)/24]*n,[0.0]*n,[0.0]*n)
x91 = ode_rand3(n,t9,state09,params9,0.05)
x92 = ode_rand3(n,t9,state09,params9,0.1)
x93 = ode_rand3(n,t9,state09,params9,0.2)
x94 = ode_rand3(n,t9,state09,params9,0.5)

x91
clear
x91x = sep(x91[1])[0]
x92x = sep(x92[1])[0]
x93x = sep(x93[1])[0]
x94x = sep(x94[1])[0]
plt.plot(x91x)
plt.plot(t9,x91x)
plt.plot(t9[:1801],x91x)
plt.plot(t9[:1801],x91x[0])
plt.figure(figsize=(14,10))
plt.plot(t9[:1801],x91x[0], label='E=0.05')
plt.plot(t9[:1801],x92x[0], label='E=0.1')
plt.plot(t9[:1801],x93x[0], label='E=0.2')
plt.plot(t9[:1801],x94x[0], label='E=0.5')
plt.legend()
plt.title('Examples of noisy oscillations', fontsize=26)

plt.figure(figsize=(14,10))
plt.plot(t9[:1801],x91x[0], label='E=0.05')
plt.plot(t9[:1801],x92x[0], label='E=0.1')
plt.plot(t9[:1801],x93x[0], label='E=0.2')
#plt.plot(t9[:1801],x94x[0], label='E=0.5')
plt.legend()
plt.title('Examples of noisy oscillations', fontsize=26)

plt.figure(figsize=(14,10))
plt.plot(t9[:1801],x91x[0], label='E=0.05')
plt.plot(t9[:1801],x92x[0], label='E=0.1')
plt.plot(t9[:1801],x93x[0], label='E=0.2')
#plt.plot(t9[:1801],x94x[0], label='E=0.5')
plt.legend()
plt.title('Examples of noisy oscillations', fontsize=26)
plt.ylabel('x-coordinate')
plt.xlabel('time, hours')

clear
# Coupling starting

n = 10 # Number of oscillators
t = np.linspace(0, 50, 500)
state0 = [1,0]*n

x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.0]*n)))

# Coupling starting

n = 100 # Number of oscillators
t = np.linspace(0, 100, 1000)
state0 = [1,0]*n

x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.05]*n, [0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.1]*n, [0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.2]*n, [0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.5]*n, [0.0]*n)))

len(x1)
np.shape(x1)
x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]

plt.figure(figsize=(14,10))

plt.rc('font', size=16)          # controls default text sizes
plt.rc('axes', titlesize=18)     # fontsize of the axes title
plt.rc('axes', labelsize=20)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=18)    # fontsize of the tick labels
plt.rc('ytick', labelsize=18)    # fontsize of the tick labels
plt.rc('legend', fontsize=18)    # legend fontsize
plt.rc('figure', titlesize=22)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 's=1, K=0.05')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 's=1, K=0.1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 's=1, K=0.2')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 's=1, K=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.2')
plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.5')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

#plt.ylim(-0.05,0.65)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

# Coupling starting

n = 1000 # Number of oscillators
t = np.linspace(0, 700, 7000)
state0 = [1,0]*n

x1 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.05]*n, [0.0]*n)))
x2 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.1]*n, [0.0]*n)))
x3 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.15]*n, [0.0]*n)))
x4 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.2]*n, [0.0]*n)))
x5 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.3]*n, [0.0]*n)))
x6 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.5]*n, [0.0]*n)))

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]


plt.figure(figsize=(14,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.2')
plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.5')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

#plt.ylim(-0.05,0.65)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]


plt.figure(figsize=(18,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.2')
plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.5')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

#plt.ylim(-0.05,0.65)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]


plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

#plt.ylim(-0.05,0.65)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
#plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
#plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

#plt.ylim(-0.05,0.65)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
#plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
#plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')
plt.plot(t,env(v1))

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

#plt.ylim(-0.05,0.65)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
#plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
#plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
#plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
#plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
#plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')
plt.plot(t,env(v1))

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

#plt.ylim(-0.05,0.65)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
#plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
#plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
#plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
#plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
#plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')
plt.plot(t,env(v1), label='env')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

#plt.ylim(-0.05,0.65)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
#plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
#plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
#plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
#plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
#plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')
plt.plot(t,env(v1), label='env')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

plt.xlim(0,100)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
#plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
#plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
#plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
#plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
#plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')
plt.plot(t[20:],env(v1[20:]), label='env')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

plt.xlim(0,100)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
#plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
#plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
#plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
#plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
#plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')
plt.plot(t[100:],env(v1[100:]), label='env')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

plt.xlim(0,100)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
#plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
#plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
#plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
#plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
#plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')
plt.plot(t[500:],env(v1[500:]), label='env')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

#plt.xlim(0,100)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

maxs3?
t?
t
t.nonzero()
def maxs4 (data):
    a = (np.diff(np.sign(np.diff(data)))<0).nonzero()[0]+1
    return a

t
v1
x1x[55:75]
x1x[0][55:75]
clear
x1x[0][55:75]
maxs4(x1x[0])
x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
#plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
#plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
#plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
#plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
#plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

#plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')
#plt.plot(t[500:],env(v1[500:]), label='env')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

#plt.xlim(0,100)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
#plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
#plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
#plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
#plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
#plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

#plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')
#plt.plot(t[500:],env(v1[500:]), label='env')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

plt.xlim(0,100)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

maxs4(v1)
v1
v1[0:100]
plt.plot(t,v1)
plt.plot(t,v1)
plt.xlim(0,50)

from scipy.signal import argrelextrema
def maxs5(data):
    return argrelextrema(data, np.greater)

v1[55:75]
v1[550:570]
maxs5(v1)
maxs4(v1)
v1[maxs4(v1)]
x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
plt.plot(t[maxs4(v1)],v1[maxs4(v1)], label='maxima')
#plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
#plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
#plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
#plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
#plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

#plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')
#plt.plot(t[500:],env(v1[500:]), label='env')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

plt.xlim(0,100)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

def maxs4 (data):
    """Takes the data, returns the indices of the maxima in value.

    Let's find maxima of variances in the data:
    v1 = np.var(x1x, axis=0)
    plt.plot(time, v1)
    plt.plot(time[maxs4(v1)], v1[maxs4(v1)])"""
    a = (np.diff(np.sign(np.diff(data)))<0).nonzero()[0]+1
    return a

maxs4?
x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
plt.plot(t[maxs4(v1)],v1[maxs4(v1)], 'o-', label='maxima')
#plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
#plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
#plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
#plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
#plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

#plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')
#plt.plot(t[500:],env(v1[500:]), label='env')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

plt.xlim(0,100)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
plt.plot(t[maxs4(v1)],v1[maxs4(v1)], 'o-', label='maxima')
#plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
#plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
#plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
#plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
#plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

#plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')
#plt.plot(t[500:],env(v1[500:]), label='env')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

plt.xlim(0,200)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
plt.plot(t[maxs4(v1)],v1[maxs4(v1)], 'o-', label='maxima')
#plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
#plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
#plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
#plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
#plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

#plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')
#plt.plot(t[500:],env(v1[500:]), label='env')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

#plt.xlim(0,200)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

#plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
plt.plot(t[maxs4(v1)],v1[maxs4(v1)], label='maxima')
plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

#plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')
#plt.plot(t[500:],env(v1[500:]), label='env')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

plt.xlim(0,200)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]
x5x = sep(x5)[0]
x6x = sep(x6)[0]

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)
v5=np.var(x5x,axis=0)
v6=np.var(x6x,axis=0)

plt.figure(figsize=(20,10))

#plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
#plt.plot(t[maxs4(v1)],v1[maxs4(v1)], label='maxima')
plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

#plt.plot(me4(v1)[0],me4(v1)[1], label='maxima')
#plt.plot(t[500:],env(v1[500:]), label='env')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

plt.xlim(0,200)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

plt.xlim(0,200)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

plt.xlim(200,400)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

plt.figure(figsize=(20,10))

plt.plot (t, np.var(x1x,axis=0), label = 's=1, K=0.05')
plt.plot (t, np.var(x2x,axis=0), label = 's=1, K=0.1')
plt.plot (t, np.var(x3x,axis=0), label = 's=1, K=0.15')
plt.plot (t, np.var(x4x,axis=0), label = 's=1, K=0.2')
plt.plot (t, np.var(x5x,axis=0), label = 's=1, K=0.3')
plt.plot (t, np.var(x6x,axis=0), label = 's=1, K=0.5')

plt.ylabel ('x-coordinate variance')
plt.xlabel ('time, hours')

plt.xlim(400,600)
plt.title ('Variance of x-coordinate of 1000 heterogenous oscillators (raw)', fontsize=16)
plt.legend()
plt.show()

np.save("/home/kalashnikov/Code/Variables for my code/Coupling/Heterogeneity/1000 coupled oscillators without noise s=1 and K=0.05",x1)
np.save("/home/kalashnikov/Code/Variables for my code/Coupling/Heterogeneity/1000 coupled oscillators without noise s=1 and K=0.1",x2)
np.save("/home/kalashnikov/Code/Variables for my code/Coupling/Heterogeneity/1000 coupled oscillators without noise s=1 and K=0.15",x3)
np.save("/home/kalashnikov/Code/Variables for my code/Coupling/Heterogeneity/1000 coupled oscillators without noise s=1 and K=0.2",x4)
np.save("/home/kalashnikov/Code/Variables for my code/Coupling/Heterogeneity/1000 coupled oscillators without noise s=1 and K=0.3",x5)
np.save("/home/kalashnikov/Code/Variables for my code/Coupling/Heterogeneity/1000 coupled oscillators without noise s=1 and K=0.5",x6)
np.save("/home/kalashnikov/Code/Variables for my code/Coupling/Heterogeneity/1000 coupled oscillators without noise time",t)
del x5
del x3
x3=x4
x4=x6
plt.figure(figsize=(14,10))

plt.rc('font', size=16)          # controls default text sizes
plt.rc('axes', titlesize=18)     # fontsize of the axes title
plt.rc('axes', labelsize=20)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=18)    # fontsize of the tick labels
plt.rc('ytick', labelsize=18)    # fontsize of the tick labels
plt.rc('legend', fontsize=18)    # legend fontsize
plt.rc('figure', titlesize=22)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 's=1, K=0.05')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 's=1, K=0.1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 's=1, K=0.2')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 's=1, K=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.rc('font', size=16)          # controls default text sizes
plt.rc('axes', titlesize=18)     # fontsize of the axes title
plt.rc('axes', labelsize=20)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=18)    # fontsize of the tick labels
plt.rc('ytick', labelsize=18)    # fontsize of the tick labels
plt.rc('legend', fontsize=18)    # legend fontsize
plt.rc('figure', titlesize=22)  # fontsize of the figure title

plt.plot (t, np.mean(x1x,axis=0),'k-', label = 's=1, K=0.05')
plt.plot (t, np.mean(x2x,axis=0),'b-', label = 's=1, K=0.1')
plt.plot (t, np.mean(x3x,axis=0),'m-', label = 's=1, K=0.2')
plt.plot (t, np.mean(x4x,axis=0),'r-', label = 's=1, K=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Mean (x-coordinate) of 1000 heterogenous oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (t, np.var(x1x,axis=0),'k-', label = 's=1, K=0.05')
plt.plot (t, np.var(x2x,axis=0),'b-', label = 's=1, K=0.1')
plt.plot (t, np.var(x3x,axis=0),'m-', label = 's=1, K=0.2')
plt.plot (t, np.var(x4x,axis=0),'r-', label = 's=1, K=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Var (x-coordinate) of 1000 heterogenous oscillators', fontsize=22)
plt.legend()
plt.show()

del x1,x2,x3,x4,x5,x6
x4 = np.load("/home/kalashnikov/Code/Variables for my code/Coupling/Heterogeneity/1000 coupled oscillators without noise s=1 and K=0.5.npy")
x3 = np.load("/home/kalashnikov/Code/Variables for my code/Coupling/Heterogeneity/1000 coupled oscillators without noise s=1 and K=0.2.npy")
x2 = np.load("/home/kalashnikov/Code/Variables for my code/Coupling/Heterogeneity/1000 coupled oscillators without noise s=1 and K=0.1.npy")
x1 = np.load("/home/kalashnikov/Code/Variables for my code/Coupling/Heterogeneity/1000 coupled oscillators without noise s=1 and K=0.05.npy")
x1x = sep(x1)[0]
x2x = sep(x2)[0]
x3x = sep(x3)[0]
x4x = sep(x4)[0]

plt.figure(figsize=(14,10))

plt.plot (t, np.var(x1x,axis=0),'k-', label = 's=1, K=0.05')
plt.plot (t, np.var(x2x,axis=0),'b-', label = 's=1, K=0.1')
plt.plot (t, np.var(x3x,axis=0),'m-', label = 's=1, K=0.2')
plt.plot (t, np.var(x4x,axis=0),'r-', label = 's=1, K=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Var (x-coordinate) of 1000 heterogenous oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (t[maxs4(np.var(x1x,axis=0))], np.var(x1x,axis=0)[maxs4(np.var(x1x,axis=0))],'k-', label = 's=1, K=0.05')
plt.plot (t[maxs4(np.var(x2x,axis=0))], np.var(x2x,axis=0)[maxs4(np.var(x2x,axis=0))],'b-', label = 's=1, K=0.1')
plt.plot (t[maxs4(np.var(x3x,axis=0))], np.var(x3x,axis=0)[maxs4(np.var(x3x,axis=0))],'m-', label = 's=1, K=0.2')
plt.plot (t[maxs4(np.var(x4x,axis=0))], np.var(x4x,axis=0)[maxs4(np.var(x4x,axis=0))],'r-', label = 's=1, K=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Var (x-coordinate) of 1000 heterogenous oscillators', fontsize=22)
plt.legend()
plt.show()

v1
v1.insert(0,0)
np.insert(v1,0,0)
np.insert(v1,1,0)
np.insert?
v1
plt.figure(figsize=(14,10))

plt.plot (t[maxs4(v1)], v1[maxs4(v1)],'k-', label = 's=1, K=0.05')
plt.plot (t[maxs4(v2)], v2[maxs4(v2)],'b-', label = 's=1, K=0.1')
plt.plot (t[maxs4(v3)], v3[maxs4(v3)],'m-', label = 's=1, K=0.2')
plt.plot (t[maxs4(v4)], v4[maxs4(v4)],'r-', label = 's=1, K=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Var (x-coordinate) of 1000 heterogenous oscillators', fontsize=22)
plt.legend()
plt.show()

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)

plt.figure(figsize=(14,10))

plt.plot (t[maxs4(v1)], v1[maxs4(v1)],'k-', label = 's=1, K=0.05')
plt.plot (t[maxs4(v2)], v2[maxs4(v2)],'b-', label = 's=1, K=0.1')
plt.plot (t[maxs4(v3)], v3[maxs4(v3)],'m-', label = 's=1, K=0.2')
plt.plot (t[maxs4(v4)], v4[maxs4(v4)],'r-', label = 's=1, K=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Var (x-coordinate) of 1000 heterogenous oscillators', fontsize=22)
plt.legend()
plt.show()

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)

plt.figure(figsize=(14,10))

plt.plot (np.insert(t[maxs4(v1)],0,0), np.insert(v1[maxs4(v1)],0,0),'k-', label = 's=1, K=0.05')
plt.plot (np.insert(t[maxs4(v2)],0,0), np.insert(v2[maxs4(v2)],0,0),'b-', label = 's=1, K=0.1')
plt.plot (np.insert(t[maxs4(v3)],0,0), np.insert(v3[maxs4(v3)],0,0),'m-', label = 's=1, K=0.2')
plt.plot (np.insert(t[maxs4(v4)],0,0), np.insert(v4[maxs4(v4)],0,0),'r-', label = 's=1, K=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Var (x-coordinate) of 1000 heterogenous oscillators', fontsize=22)
plt.legend()
plt.show()

m1 = np.mean(x1x,axis=0)
m2 = np.mean(x2x,axis=0)
m3 = np.mean(x3x,axis=0)
m4 = np.mean(x4x,axis=0)

v1=np.var(x1x,axis=0)
v2=np.var(x2x,axis=0)
v3=np.var(x3x,axis=0)
v4=np.var(x4x,axis=0)

plt.figure(figsize=(14,10))

plt.plot (np.insert(t[maxs4(m1)],0,0), np.insert(m1[maxs4(m1)],0,0),'k-', label = 's=1, K=0.05')
plt.plot (np.insert(t[maxs4(m2)],0,0), np.insert(m2[maxs4(m2)],0,0),'b-', label = 's=1, K=0.1')
plt.plot (np.insert(t[maxs4(m3)],0,0), np.insert(m3[maxs4(m3)],0,0),'m-', label = 's=1, K=0.2')
plt.plot (np.insert(t[maxs4(m4)],0,0), np.insert(m4[maxs4(m4)],0,0),'r-', label = 's=1, K=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Var (x-coordinate) of 1000 heterogenous oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (t[maxs4(m1)], m1[maxs4(m1)],'k-', label = 's=1, K=0.05')
plt.plot (t[maxs4(m2)], m2[maxs4(m2)],'b-', label = 's=1, K=0.1')
plt.plot (t[maxs4(m3)], m3[maxs4(m3)],'m-', label = 's=1, K=0.2')
plt.plot (t[maxs4(m4)], m4[maxs4(m4)],'r-', label = 's=1, K=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Var (x-coordinate) of 1000 heterogenous oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (t[maxs4(m1)], m1[maxs4(m1)],'ko', label = 's=1, K=0.05 maxima')
plt.plot(t,m1,'k-', label = 'data')

plt.plot (t[maxs4(m2)], m2[maxs4(m2)],'bo', label = 's=1, K=0.1 maxima')
plt.plot(t,m2,'b-', label = 's=1, K=0.1 data')

plt.plot (t[maxs4(m3)], m3[maxs4(m3)],'mo', label = 's=1, K=0.2 maxima')
plt.plot(t,m3,'m-', label = 's=1, K=0.2 data')

plt.plot (t[maxs4(m4)], m4[maxs4(m4)],'ro', label = 's=1, K=0.5 maxima')
plt.plot(t, m4,'r-', label = 's=1, K=0.5 data')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Mean + maxima (x-coordinate) of 1000 heterogenous oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (t[maxs4(m1)], m1[maxs4(m1)],'ko', label = 's=1, K=0.05 maxima')
plt.plot(t,m1,'k-', label = 's=1, K=0.05 data')

plt.plot (t[maxs4(m2)], m2[maxs4(m2)],'bo', label = 's=1, K=0.1 maxima')
plt.plot(t,m2,'b-', label = 's=1, K=0.1 data')

plt.plot (t[maxs4(m3)], m3[maxs4(m3)],'mo', label = 's=1, K=0.2 maxima')
plt.plot(t,m3,'m-', label = 's=1, K=0.2 data')

plt.plot (t[maxs4(m4)], m4[maxs4(m4)],'ro', label = 's=1, K=0.5 maxima')
plt.plot(t, m4,'r-', label = 's=1, K=0.5 data')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Mean + maxima (x-coordinate) of 1000 heterogenous oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (np.insert(t[maxs4(v1)],0,0), np.insert(v1[maxs4(v1)],0,0),'k-', label = 's=1, K=0.05')
plt.plot (np.insert(t[maxs4(v2)],0,0), np.insert(v2[maxs4(v2)],0,0),'b-', label = 's=1, K=0.1')
plt.plot (np.insert(t[maxs4(v3)],0,0), np.insert(v3[maxs4(v3)],0,0),'m-', label = 's=1, K=0.2')
plt.plot (np.insert(t[maxs4(v4)],0,0), np.insert(v4[maxs4(v4)],0,0),'r-', label = 's=1, K=0.5')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Maxima of var(x-coordinate) of 1000 heterogenous oscillators with starting values', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (np.insert(t[maxs4(v1)],0,0), np.insert(v1[maxs4(v1)],0,0),'k-', label = 's=1, K=0.05')
plt.plot (np.insert(t[maxs4(v2)],0,0), np.insert(v2[maxs4(v2)],0,0),'b-', label = 's=1, K=0.1')
plt.plot (np.insert(t[maxs4(v3)],0,0), np.insert(v3[maxs4(v3)],0,0),'m-', label = 's=1, K=0.2')
plt.plot (np.insert(t[maxs4(v4)],0,0), np.insert(v4[maxs4(v4)],0,0),'r-', label = 's=1, K=0.5')

plt.ylabel ('variance (x)')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Maxima of var(x-coordinate) of 1000 heterogenous oscillators with starting values', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (t[maxs4(m1)], m1[maxs4(m1)],'ko-', label = 's=1, K=0.05 maxima')
#plt.plot(t,m1,'k-', label = 's=1, K=0.05 data')

plt.plot (t[maxs4(m2)], m2[maxs4(m2)],'bo-', label = 's=1, K=0.1 maxima')
#plt.plot(t,m2,'b-', label = 's=1, K=0.1 data')

plt.plot (t[maxs4(m3)], m3[maxs4(m3)],'mo-', label = 's=1, K=0.2 maxima')
#plt.plot(t,m3,'m-', label = 's=1, K=0.2 data')

plt.plot (t[maxs4(m4)], m4[maxs4(m4)],'ro-', label = 's=1, K=0.5 maxima')
#plt.plot(t, m4,'r-', label = 's=1, K=0.5 data')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Maxima of mean (x-coordinate) of 1000 coupled oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (np.insert(t[maxs4(m1)],0,0), np.insert(m1[maxs4(m1)],0,0),'ko-', label = 's=1, K=0.05 maxima')
#plt.plot(t,m1,'k-', label = 's=1, K=0.05 data')

plt.plot (np.insert(t[maxs4(m2)],0,0), np.insert(m2[maxs4(m2)],0,0),'bo-', label = 's=1, K=0.1 maxima')
#plt.plot(t,m2,'b-', label = 's=1, K=0.1 data')

plt.plot (np.insert(t[maxs4(m3)],0,0), np.insert(m3[maxs4(m3)],0,0),'mo-', label = 's=1, K=0.2 maxima')
#plt.plot(t,m3,'m-', label = 's=1, K=0.2 data')

plt.plot (np.insert(t[maxs4(m4)],0,0), np.insert(m4[maxs4(m4)],0,0),'ro-', label = 's=1, K=0.5 maxima')
#plt.plot(t, m4,'r-', label = 's=1, K=0.5 data')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Maxima of mean (x-coordinate) of 1000 coupled oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (np.insert(t[maxs4(m1)],0,0), np.insert(m1[maxs4(m1)],0,1),'ko-', label = 's=1, K=0.05 maxima')
#plt.plot(t,m1,'k-', label = 's=1, K=0.05 data')

plt.plot (np.insert(t[maxs4(m2)],0,0), np.insert(m2[maxs4(m2)],0,1),'bo-', label = 's=1, K=0.1 maxima')
#plt.plot(t,m2,'b-', label = 's=1, K=0.1 data')

plt.plot (np.insert(t[maxs4(m3)],0,0), np.insert(m3[maxs4(m3)],0,1),'mo-', label = 's=1, K=0.2 maxima')
#plt.plot(t,m3,'m-', label = 's=1, K=0.2 data')

plt.plot (np.insert(t[maxs4(m4)],0,0), np.insert(m4[maxs4(m4)],0,1),'ro-', label = 's=1, K=0.5 maxima')
#plt.plot(t, m4,'r-', label = 's=1, K=0.5 data')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,400)
plt.title('Maxima of mean (x-coordinate) of 1000 coupled oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (np.insert(t[maxs4(m1)],0,0), np.insert(m1[maxs4(m1)],0,1),'ko-', label = 's=1, K=0.05 maxima')
#plt.plot(t,m1,'k-', label = 's=1, K=0.05 data')

plt.plot (np.insert(t[maxs4(m2)],0,0), np.insert(m2[maxs4(m2)],0,1),'bo-', label = 's=1, K=0.1 maxima')
#plt.plot(t,m2,'b-', label = 's=1, K=0.1 data')

plt.plot (np.insert(t[maxs4(m3)],0,0), np.insert(m3[maxs4(m3)],0,1),'mo-', label = 's=1, K=0.2 maxima')
#plt.plot(t,m3,'m-', label = 's=1, K=0.2 data')

plt.plot (np.insert(t[maxs4(m4)],0,0), np.insert(m4[maxs4(m4)],0,1),'ro-', label = 's=1, K=0.5 maxima')
#plt.plot(t, m4,'r-', label = 's=1, K=0.5 data')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('Maxima of mean (x-coordinate) of 1000 coupled oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (np.insert(t[maxs4(m1)],0,0), np.insert(m1[maxs4(m1)],0,1),'ko-', label = 's=1, K=0.05 maxima')
#plt.plot(t,m1,'k-', label = 's=1, K=0.05 data')

plt.plot (np.insert(t[maxs4(m2)],0,0), np.insert(m2[maxs4(m2)],0,1),'bo-', label = 's=1, K=0.1 maxima')
#plt.plot(t,m2,'b-', label = 's=1, K=0.1 data')

plt.plot (np.insert(t[maxs4(m3)],0,0), np.insert(m3[maxs4(m3)],0,1),'mo-', label = 's=1, K=0.2 maxima')
#plt.plot(t,m3,'m-', label = 's=1, K=0.2 data')

plt.plot (np.insert(t[maxs4(m4)],0,0), np.insert(m4[maxs4(m4)],0,1),'ro-', label = 's=1, K=0.5 maxima')
#plt.plot(t, m4,'r-', label = 's=1, K=0.5 data')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,150)
plt.title('Maxima of mean (x-coordinate) of 1000 coupled oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

plt.plot (np.insert(t[maxs4(m1)],0,0), np.insert(m1[maxs4(m1)],0,1),'ko-', label = 's=1, K=0.05 maxima')
#plt.plot(t,m1,'k-', label = 's=1, K=0.05 data')

plt.plot (np.insert(t[maxs4(m2)],0,0), np.insert(m2[maxs4(m2)],0,1),'bo-', label = 's=1, K=0.1 maxima')
#plt.plot(t,m2,'b-', label = 's=1, K=0.1 data')

plt.plot (np.insert(t[maxs4(m3)],0,0), np.insert(m3[maxs4(m3)],0,1),'mo-', label = 's=1, K=0.2 maxima')
#plt.plot(t,m3,'m-', label = 's=1, K=0.2 data')

plt.plot (np.insert(t[maxs4(m4)],0,0), np.insert(m4[maxs4(m4)],0,1),'ro-', label = 's=1, K=0.5 maxima')
#plt.plot(t, m4,'r-', label = 's=1, K=0.5 data')

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,170)
plt.title('Maxima of mean (x-coordinate) of 1000 coupled oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

for i in range(20):
    plt.plot(t, x1x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(-10,170)
plt.title('x-coordinate of 1000 coupled oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

for i in range(20):
    plt.plot(t, x1x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,300)
plt.title('x-coordinate of 1000 coupled oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))

for i in range(30):
    plt.plot(t, x1x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,300)
plt.title('x-coordinate of 1000 coupled oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(20,10))

for i in range(30):
    plt.plot(t, x1x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,300)
plt.title('x-coordinate of 1000 coupled oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(26,8))

for i in range(50):
    plt.plot(t, x1x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('x-coordinate of 1000 coupled oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(26,10))

for i in range(50):
    plt.plot(t, x1x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,300)
plt.title('x-coordinate of 1000 coupled oscillators', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(26,10))

for i in range(50):
    plt.plot(t, x1x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.05', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(26,10))

for i in range(100):
    plt.plot(t, x1x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.05', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(30,10))

for i in range(100):
    plt.plot(t, x1x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.05', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(50,8))

for i in range(100):
    plt.plot(t, x1x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,400)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.05', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(50,8))

for i in range(100):
    plt.plot(t, x1x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,700)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.05', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(50,8))

for i in range(1000):
    plt.plot(t, x1x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(-10,700)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.05', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(50,8))

for i in range(1000):
    plt.plot(t, x1x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(100,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.05', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(30,8))

for i in range(1000):
    plt.plot(t, x1x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(100,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.05', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(30,8))

for i in range(1000):
    plt.plot(t, x2x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(100,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.1', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(30,8))

for i in range(1000):
    plt.plot(t, x2x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(0,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.1', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(30,8))

for i in range(1000):
    plt.plot(t, x3x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(0,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.1', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(30,8))

for i in range(1000):
    plt.plot(t, x4x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(0,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.1', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(30,8))

for i in range(1000):
    plt.plot(t, x4x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(0,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.5', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(30,8))

for i in range(1000):
    plt.plot(t, x3x[i])

plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(0,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.2', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t, phvar(x1)[0],'k-', label = 'K=0.05')
plt.plot (t, phvar(x2)[0],'b-', label = 'K=0.1')
plt.plot (t, phvar(x3)[0],'m-', label = 'K=0.2')
plt.plot (t, phvar(x4)[0],'r-', label = 'K=0.5')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of heterogenous oscillators (smoothened)', fontsize=26)
#plt.xlim(-5,250)
plt.grid()
#plt.legend()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t, phvar(x1)[0],'k-', label = 'K=0.05')
plt.plot (t, phvar(x2)[0],'b-', label = 'K=0.1')
plt.plot (t, phvar(x3)[0],'m-', label = 'K=0.2')
plt.plot (t, phvar(x4)[0],'r-', label = 'K=0.5')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of heterogenous oscillators (smoothened)', fontsize=26)
#plt.xlim(-5,250)
plt.grid()
plt.legend()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t, phvar(x1)[0],'k-', label = 'K=0.05')
plt.plot (t, phvar(x2)[0],'b-', label = 'K=0.1')
plt.plot (t, phvar(x3)[0],'m-', label = 'K=0.2')
plt.plot (t, phvar(x4)[0],'r-', label = 'K=0.5')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of coupled heterogenous oscillators (raw)', fontsize=26)
#plt.xlim(-5,250)
plt.grid()
plt.legend()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t, phvar(x1)[0],'k-', label = 'K=0.05')
plt.plot (t, phvar(x2)[0],'b-', label = 'K=0.1')
plt.plot (t, phvar(x3)[0],'m-', label = 'K=0.2')
plt.plot (t, phvar(x4)[0],'r-', label = 'K=0.5')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of coupled heterogenous oscillators (raw)', fontsize=26)
plt.xlim(-5,250)
plt.grid()
plt.legend()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t, phvar(x1)[0],'k-', label = 'K=0.05')
plt.plot (t, phvar(x2)[0],'b-', label = 'K=0.1')
plt.plot (t, phvar(x3)[0],'m-', label = 'K=0.2')
plt.plot (t, phvar(x4)[0],'r-', label = 'K=0.5')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of coupled heterogenous oscillators (raw)', fontsize=26)
plt.xlim(-5,150)
plt.grid()
plt.legend()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t[:6800], run_mean(phvar(x1)[0],120),'k-', label = 'K=0.05')
plt.plot (t, phvar(x2)[0],'b-', label = 'K=0.1')
plt.plot (t, phvar(x3)[0],'m-', label = 'K=0.2')
plt.plot (t, phvar(x4)[0],'r-', label = 'K=0.5')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of coupled heterogenous oscillators (raw)', fontsize=26)
plt.xlim(-5,150)
plt.grid()
plt.legend()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t[:6881], run_mean(phvar(x1)[0],120),'k-', label = 'K=0.05')
plt.plot (t, phvar(x2)[0],'b-', label = 'K=0.1')
plt.plot (t, phvar(x3)[0],'m-', label = 'K=0.2')
plt.plot (t, phvar(x4)[0],'r-', label = 'K=0.5')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of coupled heterogenous oscillators (raw)', fontsize=26)
plt.xlim(-5,150)
plt.grid()
plt.legend()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t[:6781], run_mean(phvar(x1)[0],240),'k-', label = 'K=0.05')
plt.plot (t, phvar(x2)[0],'b-', label = 'K=0.1')
plt.plot (t, phvar(x3)[0],'m-', label = 'K=0.2')
plt.plot (t, phvar(x4)[0],'r-', label = 'K=0.5')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of coupled heterogenous oscillators (raw)', fontsize=26)
plt.xlim(-5,150)
plt.grid()
plt.legend()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t[:6761], run_mean(phvar(x1)[0],240),'k-', label = 'K=0.05')
plt.plot (t, phvar(x2)[0],'b-', label = 'K=0.1')
plt.plot (t, phvar(x3)[0],'m-', label = 'K=0.2')
plt.plot (t, phvar(x4)[0],'r-', label = 'K=0.5')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of coupled heterogenous oscillators (raw)', fontsize=26)
plt.xlim(-5,150)
plt.grid()
plt.legend()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t[:6881], run_mean(phvar(x1)[0],120),'k--', label = 'K=0.05 run_mean')
plt.plot (t, phvar(x1)[0],'k-', label = 'K=0.05')

plt.plot (t[:6881], run_mean(phvar(x2)[0],120),'b--', label = 'K=0.1 run_mean')
plt.plot (t, phvar(x2)[0],'b-', label = 'K=0.1')

plt.plot (t[:6881], run_mean(phvar(x3)[0],120),'m--', label = 'K=0.2 run_mean')
plt.plot (t, phvar(x3)[0],'m-', label = 'K=0.2')

plt.plot (t[:6881], run_mean(phvar(x4)[0],120),'r--', label = 'K=0.5 run_mean')
plt.plot (t, phvar(x4)[0],'r-', label = 'K=0.5')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of coupled heterogenous oscillators (raw)', fontsize=26)
plt.xlim(-5,150)
plt.grid()
plt.legend()
plt.show()

plt.figure(figsize=(14,10))
plt.plot (t[:6881], run_mean(phvar(x1)[0],120),'k--', label = 'K=0.05 run_mean')
plt.plot (t, phvar(x1)[0],'k-', label = 'K=0.05')

plt.plot (t[:6881], run_mean(phvar(x2)[0],120),'b--', label = 'K=0.1 run_mean')
plt.plot (t, phvar(x2)[0],'b-', label = 'K=0.1')

plt.plot (t[:6881], run_mean(phvar(x3)[0],120),'m--', label = 'K=0.2 run_mean')
plt.plot (t, phvar(x3)[0],'m-', label = 'K=0.2')

plt.plot (t[:6881], run_mean(phvar(x4)[0],120),'r--', label = 'K=0.5 run_mean')
plt.plot (t, phvar(x4)[0],'r-', label = 'K=0.5')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of coupled heterogenous oscillators (raw)', fontsize=26)
#plt.xlim(-5,150)
plt.grid()
plt.legend()
plt.show()

ph1 = phvar(x1)[0]
ph2 = phvar(x2)[0]
ph3 = phvar(x3)[0]
ph4 = phvar(x4)[0]

plt.figure(figsize=(14,10))
plt.plot (t[:6881], run_mean(phvar(x1)[0],120),'k--', label = 'K=0.05 run_mean')
plt.plot (t, phvar(x1)[0],'k-', label = 'K=0.05')
plt.plot (t[maxs4(ph1)], ph1[maxs4(ph1)],'k-', label = 'K=0.05 maxima')

plt.plot (t[:6881], run_mean(phvar(x2)[0],120),'b--', label = 'K=0.1 run_mean')
plt.plot (t, phvar(x2)[0],'b-', label = 'K=0.1')
plt.plot (t[maxs4(ph2)], ph2[maxs4(ph2)],'bo', label = 'K=0.1 maxima')

plt.plot (t[:6881], run_mean(phvar(x3)[0],120),'m--', label = 'K=0.2 run_mean')
plt.plot (t, phvar(x3)[0],'m-', label = 'K=0.2')
plt.plot (t[maxs4(ph3)], ph3[maxs4(ph3)],'mo', label = 'K=0.2 maxima')

plt.plot (t[:6881], run_mean(phvar(x4)[0],120),'r--', label = 'K=0.5 run_mean')
plt.plot (t, phvar(x4)[0],'r-', label = 'K=0.5')
plt.plot (t[maxs4(ph4)], ph4[maxs4(ph4)],'ro', label = 'K=0.5 maxima')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of coupled heterogenous oscillators (raw)', fontsize=26)
#plt.xlim(-5,150)
plt.grid()
plt.legend()
plt.show()

ph1 = phvar(x1)[0]
ph2 = phvar(x2)[0]
ph3 = phvar(x3)[0]
ph4 = phvar(x4)[0]

plt.figure(figsize=(14,10))
plt.plot (t[:6881], run_mean(phvar(x1)[0],120),'k--', label = 'K=0.05 run_mean')
plt.plot (t, phvar(x1)[0],'k-', label = 'K=0.05')
plt.plot (t[maxs4(ph1)], ph1[maxs4(ph1)],'k:', label = 'K=0.05 maxima')

plt.plot (t[:6881], run_mean(phvar(x2)[0],120),'b--', label = 'K=0.1 run_mean')
plt.plot (t, phvar(x2)[0],'b-', label = 'K=0.1')
plt.plot (t[maxs4(ph2)], ph2[maxs4(ph2)],'bo', label = 'K=0.1 maxima')

plt.plot (t[:6881], run_mean(phvar(x3)[0],120),'m--', label = 'K=0.2 run_mean')
plt.plot (t, phvar(x3)[0],'m-', label = 'K=0.2')
plt.plot (t[maxs4(ph3)], ph3[maxs4(ph3)],'mo', label = 'K=0.2 maxima')

plt.plot (t[:6881], run_mean(phvar(x4)[0],120),'r--', label = 'K=0.5 run_mean')
plt.plot (t, phvar(x4)[0],'r-', label = 'K=0.5')
plt.plot (t[maxs4(ph4)], ph4[maxs4(ph4)],'ro', label = 'K=0.5 maxima')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of coupled heterogenous oscillators (raw)', fontsize=26)
#plt.xlim(-5,150)
plt.grid()
plt.legend()
plt.show()

ph1 = phvar(x1)[0]
ph2 = phvar(x2)[0]
ph3 = phvar(x3)[0]
ph4 = phvar(x4)[0]

plt.figure(figsize=(14,10))
plt.plot (t[:6881], run_mean(phvar(x1)[0],120),'k--', label = 'K=0.05 run_mean')
plt.plot (t, phvar(x1)[0],'k-', label = 'K=0.05')
plt.plot (t[maxs4(ph1)], ph1[maxs4(ph1)],'ko', label = 'K=0.05 maxima')

plt.plot (t[:6881], run_mean(phvar(x2)[0],120),'b--', label = 'K=0.1 run_mean')
plt.plot (t, phvar(x2)[0],'b-', label = 'K=0.1')
plt.plot (t[maxs4(ph2)], ph2[maxs4(ph2)],'bo', label = 'K=0.1 maxima')

plt.plot (t[:6881], run_mean(phvar(x3)[0],120),'m--', label = 'K=0.2 run_mean')
plt.plot (t, phvar(x3)[0],'m-', label = 'K=0.2')
plt.plot (t[maxs4(ph3)], ph3[maxs4(ph3)],'mo', label = 'K=0.2 maxima')

plt.plot (t[:6881], run_mean(phvar(x4)[0],120),'r--', label = 'K=0.5 run_mean')
plt.plot (t, phvar(x4)[0],'r-', label = 'K=0.5')
plt.plot (t[maxs4(ph4)], ph4[maxs4(ph4)],'ro', label = 'K=0.5 maxima')

plt.ylabel ('Variance of phase')
plt.xlabel ('time, hours')
plt.title('Variance of phase of coupled heterogenous oscillators (raw, smooth and maxima)', fontsize=26)
#plt.xlim(-5,150)
plt.grid()
plt.legend()
plt.show()

a = np.sin(t)
b = np.sin(t+1)
plt.plot(t,a)
plt.plot(t,b)
plt.xlim(0,10)

plt.plot(t,a, label='sin(t)')
plt.plot(t,b, label='sin(t+1)')
plt.xlim(0,10)

plt.plot(t,a, label='sin(t)')
plt.plot(t,b, label='sin(t+1)')
plt.xlim(0,10)
plt.legend()

plt.figure(figzise=(14,10))
plt.plot(t,a, label='sin(t)')
plt.plot(t,b, label='sin(t+1)')
plt.xlim(0,10)
plt.legend()

plt.figure(figsize=(14,10))
plt.plot(t,a, label='sin(t)')
plt.plot(t,b, label='sin(t+1)')
plt.xlim(0,10)
plt.legend()

plt.figure(figsize=(14,10))
plt.plot(t,a, label='sin(t)')
plt.plot(t,b, label='sin(t+1)')
plt.plot(t, np.sum([a,b]), label='sum a+b')
plt.xlim(0,10)
plt.legend()

def s(a,b):
    return list(map(lambda a,b: a+b, a,b))

a
b
s(a,b)
plt.figure(figsize=(14,10))
plt.plot(t,a, label='sin(t)')
plt.plot(t,b, label='sin(t+1)')
plt.plot(t, s(a,b), label='sum a+b')
plt.xlim(0,10)
plt.legend()

n = 1000 # Number of oscillators
t = np.linspace(0, 700, 7000)
state0 = [1,0]*n

x7 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.01]*n, [0.0]*n)))
t = np.linspace(0, 100, 1000)
x7 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.01]*n, [0.0]*n)))
#x8 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.02]*n, [0.0]*n)))
#x9 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.04]*n, [0.0]*n)))
#x10 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.07]*n, [0.0]*n)))

x7x = sep(x7)[0]
plt.figure(figsize=(30,8))
for i in range(1000):
    plt.plot(t, x7x[i])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(100,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.01', fontsize=22)
plt.legend()
plt.show()

x7x = sep(x7)[0]
plt.figure(figsize=(20,8))
for i in range(1000):
    plt.plot(t, x7x[i])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(100,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.01', fontsize=22)
plt.legend()
plt.show()

t = np.linspace(0, 500, 2500)
n = 500
state0 = [1,0]*n
x7 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.01]*n, [0.0]*n)))

x7x = sep(x7)[0]
plt.figure(figsize=(20,8))
for i in range(1000):
    plt.plot(t, x7x[i])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(100,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.01', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))
for i in range(1000):
    plt.plot(t, x7x[i])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(100,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.01', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(20,8))
for i in range(1000):
    plt.plot(t, x7x[i])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(50,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.01', fontsize=22)
plt.legend()
plt.show()

x7x
clear
plt.figure(figsize=(20,8))
for i in range(500):
    plt.plot(t, x7x[i])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(50,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.01', fontsize=22)
plt.legend()
plt.show()

plt.figure(figsize=(22,8))
for i in range(500):
    plt.plot(t, x7x[i])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(0,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.01', fontsize=22)
plt.legend()
plt.show()

x8 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.02]*n, [0.0]*n)))
x8x = sep(x8)[0]

x9 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.04]*n, [0.0]*n)))
x9x = sep(x9)[0]

plt.figure(figsize=(22,8))
for i in range(500):
    plt.plot(t, x8x[i])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(0,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.01', fontsize=22)
plt.legend()
plt.show()


plt.figure(figsize=(22,8))
for i in range(500):
    plt.plot(t, x8x[i])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(0,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.02', fontsize=22)
plt.legend()
plt.show()


plt.figure(figsize=(22,8))
for i in range(500):
    plt.plot(t, x9x[i])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
plt.xlim(0,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.04', fontsize=22)
plt.legend()
plt.show()


plt.figure(figsize=(28,8))
for i in range(500):
    plt.plot(t, x9x[i])
plt.ylabel ('x-coordinate')
plt.xlabel ('time, hours')
#plt.ylim(-1.5,2.5)
#plt.xlim(0,300)
plt.title('x-coordinate of 1000 coupled oscillators with K=0.04', fontsize=22)
plt.legend()
plt.show()

maxs4(x9x[0])
maxs4(x9x[1])
plt.plot(t, x9x[0])
plt.plot(t[maxs4(x9x[0])], x9x[0][maxs4(x9x[0])], 'o')

t[maxs4(x9x[0])]
np.diff(t[maxs4(x9x[0])])
t[maxs4(x9x[0])]>250
np.where(t[maxs4(x9x[0])]>250)
t[np.where(t[maxs4(x9x[0])]>250)]
t
t[100:200]
t[np.where(t<250,t)]
t[np.where(t<250)]
t000=t[np.where(t<250)]
t000=t[np.where(t<250 and t>100)]
t000=t[np.where(t<250 && t>100)]
t000=t[np.where(250>t>100)]
t000=t[np.where((t>100) & (t<250))]
def per(xnx, lower_limit, higher_limit):
    """Function for finding the periods.
    Input: x1x[0]-type data (only for 1 specific oscillator)
    Output

    Uses maxs4() to extract the maxima."""
    t_temp = t[np.where((t>lower_limit) & (t<higher_limit))] # Temporary time-storing variable
    return np.diff(t_temp[maxs4(xnx)])

per(x8x[0])
per(x8x[0], 100,250)
t
len(t)
t_temp = t[np.where((t>100) & (t<250))]
t_temp
m4m = maxs4(x8x[0])
m4m
t[m4m]
plt.plot(t,x8x[0])
plt.plot(t,x8x[0])
plt.xlim(90, 300)

t[m4m][0:10]
t_temp[m4m]
t[m4m]
np.diff(t[m4m])
m4mt=t[m4m]
def per(xnx, lower_limit):
    """Function for finding the periods.
    Input: x1x[0]-type data (only for 1 specific oscillator)
    Output

    Uses maxs4() to extract the maxima."""
    #t_temp = t[np.where((t>lower_limit) & (t<higher_limit))] # Temporary time-storing variable

    d = t[maxs4(xnx)]
    d = d[np.where(d>lower_limit)]
    return np.diff(d)

per(x1x[0])
per(x1x[0], 100)
t[m4m]
t[np.where(t[m4m]>250)]
x1x[0]
x8x[0]
x8x[0][maxs4(x8x[0])]
t[maxs4(x8x[0])]
t[maxs4(x8x[0])][0:10]
np.where(t[maxs4(x8x[0])]>250)
np.where(t[maxs4(x8x[0])]>100)
d = t[maxs4(x8x[0])]
d
d = d[np.where(d>250)]
d
np.diff(d)
def per(xnx, limit):
    """Function for finding the periods.
    Input: x1x[0]-type data (only for 1 specific oscillator)
    Output

    Uses maxs4() to extract the maxima."""
    #t_temp = t[np.where((t>lower_limit) & (t<higher_limit))] # Temporary time-storing variable

    d = t[maxs4(xnx)] # timepoint values with maxima on them
    d = d[np.where(d>limit)]
    return np.diff(d)

per(x8x[0],100)
per(x8x[0],250)
per(x8x[0],300)
len(x1x)
len(x8x)
def pers(xnx, limit):
    """Function for finding the periods for the whole dataset.
    Input: data in x1x-type
    Averages periods of sigular oscillators.
    """
    mean_periods=[]
    for i in range(len(xnx)):
        d = t[maxs4(xnx[i])] # timepoint values with maxima on them
        d = d[np.where(d>limit)]
        mean_periods.append(np.mean(np.diff(d)))
    return mean_periods

pers(x8x,100)
pers(x8x,300)
per8 = pers(x8x,300)
per9 = pers(x9x,300)
plt.hist(per8)
per7  = pers(x7x,300)
plt.hist(per7, label = 'K=0.01')
plt.hist(per8, label = 'K=0.02')
plt.hist(per9, label = 'K=0.04')
plt.legend()
plt.grid()

per7  = pers(x7x,300)
plt.hist(per7, bins=30, label = 'K=0.01')
plt.hist(per8,bins=30, label = 'K=0.02')
plt.hist(per9,bins=30, label = 'K=0.04')
plt.legend()
plt.grid()

per7  = pers(x7x,300)
plt.hist(per7, bins=10, label = 'K=0.01')
plt.hist(per8,bins=30, label = 'K=0.02')
plt.hist(per9,bins=30, label = 'K=0.04')
plt.legend()
plt.grid()

per7  = pers(x7x,300)
plt.hist(per7, bins=10, label = 'K=0.01')
plt.hist(per8,bins=10, label = 'K=0.02')
plt.hist(per9,bins=10, label = 'K=0.04')
plt.legend()
plt.grid()

t = np.linspace(0, 700, 7000)
n = 1000
state0 = [1,0]*n

x7 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.01]*n, [0.0]*n)))
x8 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.02]*n, [0.0]*n)))
x9 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.04]*n, [0.0]*n)))
x10 = odeint(oscillator_system, state0, t, args = (([0.1]*n,[1]*n,[(np.pi*2)/(24 + 1*i) for i in np.random.randn(n)],[0.0]*n,[0.07]*n, [0.0]*n)))

np.save("/home/kalashnikov/Code/Variables for my code/Coupling/Heterogeneity/1000 coupled oscillators without noise s=1 and K=0.01",x7)
np.save("/home/kalashnikov/Code/Variables for my code/Coupling/Heterogeneity/1000 coupled oscillators without noise s=1 and K=0.02",x8)
